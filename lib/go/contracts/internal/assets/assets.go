// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleNFT.cdc (7.215kB)
// ../../../contracts/MetadataViews.cdc (8.249kB)
// ../../../contracts/NonFungibleToken.cdc (4.832kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5d\x6f\xe3\xba\xd1\xbe\xf7\xaf\x98\xcd\xc5\xbe\x32\xde\xc4\x6a\x81\xa2\x17\x46\xbc\xd9\xc5\xe6\x18\xcd\xc5\x09\x16\x59\xb7\xbd\x58\x04\x3d\xb4\x38\x8e\x89\x48\xa4\x41\x52\x76\xd5\x1c\xff\xf7\x62\x48\x7d\x50\x12\x95\xe4\xb4\xe7\xa2\xc2\x62\xd7\x12\x67\x86\x33\xcf\x7c\x92\x9b\xa6\xb0\xd9\x0b\x03\xc2\x00\x93\x80\xff\x64\xc5\x21\x47\x10\xf4\x77\x81\xd2\x32\x2b\x94\x04\xb5\x03\x06\xeb\x5c\x9d\xe0\x5e\xc9\xab\x75\x29\x9f\xc4\x36\x47\xd8\xa8\x67\x94\xb3\x34\x85\x3b\x4b\xfc\x52\x59\x38\x30\x6d\x89\xdc\xee\x11\xd4\x6e\x27\x32\xc1\x72\x30\x96\x49\xce\x34\x87\x6d\x69\x41\x58\x60\xc6\x94\x05\x72\xb0\x0a\xb6\x48\xfc\x47\xd4\x15\x18\x51\x88\x9c\x69\xfa\xba\x57\x27\x28\x98\xac\xe0\x7e\xbd\x31\x70\x52\x65\xce\x3b\x95\x9c\xec\x4c\x69\x84\x5d\x29\x33\xd2\x8f\xe5\xc2\x56\x8b\xd9\x4c\x14\x07\xa5\x2d\xe9\xd8\xa8\xe8\x34\x84\x9d\x56\x05\x5c\x2c\xd2\xe1\xc2\x22\xe3\xd9\x45\xc3\xf5\x33\x5a\xc6\x99\x65\x7f\x13\x78\x32\x2d\x4b\xef\xab\xa7\x9f\x1d\xca\x2d\x64\x4a\x5a\xcd\x32\x0b\x3f\x79\xc4\xee\xd7\x9b\xe5\x78\xe3\x97\xd9\x0c\x00\x80\x18\x8e\xce\x32\xcb\xf2\xef\xe5\xe1\x90\x57\x4b\xf8\xeb\x9d\xb4\x7f\xfe\x53\x47\x80\x47\xb2\xed\x6b\x2d\xf7\x4e\x0a\x2b\x58\x2e\xfe\x85\x3c\x99\x0f\x68\xfe\x2e\xec\x9e\x6b\x76\x4a\x04\x6f\xc4\x5c\x3a\x85\x97\xf0\x85\x73\x8d\xc6\xdc\x0c\x59\x6e\xf1\xa0\x8c\xb0\x3d\x0e\xab\x42\xfa\x96\x21\x47\xd2\x22\xcf\xd1\x41\xfb\xdd\x2a\xcd\x9e\xf0\x1b\xb3\xfb\x25\x04\x2f\x13\xe4\xdf\xca\x6d\x2e\x32\x4f\xdd\xfd\xee\x11\xff\x2c\xa4\x45\x3d\x29\xb7\xa5\xd5\x68\x54\xa9\x33\x84\x28\xb4\x8b\xbb\xfb\xf5\xe6\xb2\xef\xb4\xc5\x03\x1a\x95\x1f\x51\xc3\x8b\x93\x12\xee\xda\x19\x3e\x1b\xad\x49\x56\x20\x29\xa1\x85\x7c\x1a\x2d\x72\x34\x99\x16\x07\x32\x6e\x92\xc6\xee\xcb\x62\x2b\x99\xc8\x47\x14\x2c\xcb\xd0\x98\xc4\x60\xbe\x9b\x3b\x52\xad\x2a\x96\x5b\x81\x66\x09\x3f\x06\xca\xbb\x95\xea\xb1\xd3\x4f\x48\x61\x93\xf6\xcd\x7d\xe9\xdc\xd7\xfb\x1e\x5a\xd0\x5f\x89\xa8\xdf\x27\x18\xe9\xde\x5f\x7e\x87\xbe\x0d\xe9\x3c\x80\x9d\x1e\x32\x7a\x21\x38\xac\x40\xf0\xf1\x02\xa9\x0c\x2b\xa7\xf9\x78\x31\xd0\x1a\x56\xa1\x0d\x63\xd2\x56\x7f\x58\x75\xb6\x8c\xc9\x5a\x3b\x60\xd5\xd9\xd4\x92\x9d\xdd\xaf\x9e\x5f\x77\xa5\x84\x27\xb4\xce\xd6\x64\xbe\x84\x1f\x9b\xea\x80\x8f\x03\x13\x35\xda\x52\x4b\xf8\xd1\xfb\x48\x0f\x11\x5f\xf7\xf1\xba\x15\xe6\x90\xb3\xea\x53\x32\xbf\x7c\x0f\xf9\x43\xa3\xe4\xa7\x3a\xff\x9b\xe7\x31\xd0\x7a\xa4\xb1\xf6\x19\x40\x22\x92\x7f\xc0\x51\xe0\x69\xe9\x84\xcf\x97\xf0\x45\x56\xdf\xad\x2e\x33\x7b\x33\xf4\xd3\x49\xd8\x6c\xef\x88\x07\x2b\xf4\x64\xcc\xe0\xeb\xe6\x2c\x47\x3c\x01\x34\x51\xa6\x24\xca\x01\x6d\x20\xb7\x01\x32\x46\xaa\x79\x7a\x71\x3d\x8c\x99\x69\xb6\x20\xda\xfb\x9a\xfd\x65\xb3\xf9\xb6\x16\x39\x4e\xab\x46\x4f\xa9\xf3\xe5\x20\xec\x26\xe9\xe7\xd1\x95\xf1\xd7\x29\x80\xc3\x00\xf8\x0d\x10\xb7\x6c\xd3\x96\xf4\x13\xe2\x1d\x6a\x9e\x63\x41\x2f\x03\xdb\x3d\xc1\x39\x52\xbc\x5d\xb1\xdf\xb1\x0c\x83\x46\x39\x6c\x17\x83\x72\x4d\x71\xcc\xeb\x7e\x65\xa9\xd6\x2f\xe1\xf3\xa8\xfc\xdf\xaf\x37\xf3\x58\xbe\xde\xdd\xfa\x6c\xf5\x55\xf2\x71\x44\xb2\x55\x5a\xab\xd3\xfd\x7a\x13\xb4\xc2\xf9\x12\x3e\xc6\x36\x98\x60\xee\x0c\x19\xc8\xe8\x16\x88\x7b\x98\x66\x07\x65\x6c\x24\xbf\x12\x8d\xa6\xcc\x2d\xac\x56\x84\xe8\x1c\x7e\xfd\xb5\xf9\x74\xe3\x8a\x27\x55\xcf\x09\xff\x5f\x7c\x65\x92\x66\x2e\xaf\x56\x00\x30\x68\xdc\xa1\x46\x99\xe1\xd2\x0d\x4b\x77\xb7\xcd\x48\xe6\x7d\x87\xbc\xa3\xa0\xc1\x4d\xc8\x4c\x69\x8d\x99\xbd\x98\x70\xfb\xb4\x7f\x3b\x5f\x2e\x5f\xf1\xf0\xe5\xb8\x7f\x7f\xd3\xea\x28\x38\xea\xc8\xd2\x03\x66\x28\x8e\xd1\xa5\xb1\xe0\xf8\x04\xd0\xd1\x05\x90\xa7\x29\x70\xe1\x07\x46\x5d\x11\x22\x04\x55\xa6\xe4\x4e\xe9\x42\xc8\x27\x70\xc1\x66\x42\x72\x22\xa0\xc1\xb8\xb3\xd7\x56\x07\x84\x93\xb0\x7b\x9a\x96\x7f\xf1\xbe\xff\x85\x00\xde\x09\xcc\x79\x2f\x62\x68\xe2\x53\x27\x89\x9c\x86\xd8\x25\x7c\x7e\xf1\xd4\x91\x59\xe6\x7e\xbd\x39\xf7\xdb\x3e\x24\xd1\x6e\xda\x8a\x83\xeb\x2b\x78\x39\xc7\x3a\x41\x9a\x3a\xf5\x68\x3e\x04\x8d\x85\x3a\xa2\x1b\xec\xc9\x12\x37\xd3\xfa\xe1\xb9\x45\x87\x49\x0e\x9e\x48\x58\x9a\xbc\xdd\x32\xcb\x73\xd4\xa3\xe8\x6f\xc4\x26\xcd\x8f\xbb\xdb\x20\xfa\xa3\x29\x3a\xb0\xc1\xcd\x4a\x6e\x30\xbe\xbe\x1a\x18\xb4\xf0\xba\x26\xcf\x58\x2d\xa1\xdb\x60\x0e\x37\x37\x70\x60\x52\x64\xc9\x45\x21\x8c\x21\x37\xdd\xaf\x37\x17\xf3\x59\x4f\x30\x16\x62\x30\x16\xbb\x6d\x16\x82\x37\x83\x71\xbb\x9b\xbe\x59\x30\x3f\xf4\x0e\x64\xd4\x65\xed\xfa\xca\xb1\x4e\x40\x5b\xd7\x25\xb0\xec\x99\x70\x75\xb0\x12\x84\x8c\xf3\x1e\x82\x2d\xc0\x26\x08\xb9\x50\x50\xcb\x54\xe7\x67\xcd\x28\x38\x30\xad\x59\xf5\x9f\x15\xc4\xd7\xe0\xf6\x3f\x98\xf9\x00\x9f\xfb\x75\x6a\x36\xe2\xe9\xaa\x1a\xcd\x54\x35\x90\x7d\x32\xb2\x80\x73\xa7\xb2\xc4\x53\x2d\xbc\xb6\x21\xc8\xb1\xd3\x5e\x64\xfb\x36\x0c\xdd\x99\x30\xe7\xa0\x24\x8e\xf6\x54\x39\xdf\xc4\x23\xe3\x87\xe0\x8f\xad\x01\x11\xb7\x87\x47\x1b\xf2\x37\x1d\x6b\xde\xf6\x36\x47\x63\xb5\xaa\xda\x7d\x27\xfc\xed\x3b\x4a\x1d\x1b\x2e\x91\x9c\x7b\x9a\x72\x4a\x6b\x76\xcf\x2c\x30\x4d\xad\x6e\xe0\xfb\x77\xf4\xa7\xf8\x3c\x39\x48\x8d\x67\xac\xcc\x84\x7e\x6d\x3b\x23\xd9\xbe\x50\x35\x75\xdd\xaa\x26\xef\xa7\x15\x4b\x53\x30\xca\x5b\xd0\x25\x3e\x64\x8c\x06\x49\xc6\x41\x58\x03\x45\x5d\x5f\x5d\xc4\x12\x41\xf3\x75\xaf\xb8\xf9\xaf\xda\x6b\xdc\xf6\xe4\x63\xc4\xfd\xcc\xc4\x45\xdc\xcc\x3f\x84\x3d\xea\xf7\x6d\xd8\x62\x17\x8b\xc4\x0f\xae\x4f\x47\x1a\x79\x9a\xc2\x57\x8d\xcc\xa2\x8b\x92\xd2\xee\x95\xa6\xd3\xfb\xc0\x23\x79\xae\x4e\xc0\xd5\x49\x66\xcc\xd8\xf0\xa4\x18\x26\x83\xc6\x1d\xac\x26\x91\x20\xd9\x6f\xc3\x31\x80\x95\x44\x52\xf2\x0f\x6c\x1e\xf4\xfb\xb7\xe7\xbc\x09\x88\xa9\xfb\x36\xbd\x77\x00\xf2\x17\x59\x3d\xd4\xdd\xf3\x25\xde\xac\xcf\x91\xba\x25\x77\xf6\x77\x81\x80\x64\x61\x37\x18\xad\x9c\xe0\xb7\x80\xa8\x2d\x0f\xf8\x28\x00\xdf\x61\x48\x0c\xa8\xba\xd2\x8c\x1a\x7a\x53\x81\xfa\x16\xc6\x47\xae\x34\x25\xbc\x69\x54\x6e\xae\xbc\xea\xb2\x23\x2b\x25\xd1\x25\xac\x4b\x4d\xab\x20\xab\x63\xd0\xd5\x65\x2c\x0e\xb6\x1a\x26\x7e\xe3\x39\x4f\xf9\x13\x91\x74\xe3\x52\x12\x6d\xe5\xd1\x71\xaa\x6d\x98\xcd\x9e\xa1\x94\x81\xf6\x0f\xed\xfc\xe4\xd5\x06\xc6\x0b\x21\x41\x69\x30\x8a\x6a\x09\xf5\xf5\xe6\xfe\xcf\x5f\xf7\xa9\x93\xac\xef\x07\x6b\x11\x6c\x9b\xbb\x14\x2a\x84\xb4\xce\xb8\x16\xae\x34\x8d\x5e\x1a\xf9\x8b\xa6\xe6\x0e\xae\x96\x42\xdc\xe4\x50\xfa\xd7\xd4\x28\xd1\xbb\x1f\xe9\xdc\xeb\xdd\xed\xb0\x51\x37\x5d\x9f\xfe\xc8\x7a\x8e\xce\xc4\x41\x20\xc9\x08\x86\xa9\xd2\xcd\x27\x76\x8f\x42\x87\x9f\xdb\x0a\x30\x4a\x9e\x5a\x9b\x64\x10\x7d\xb5\xec\x25\x7c\x7c\x79\x73\x02\x3e\xff\x8f\xde\x04\x0d\xc7\x85\x5e\x5c\x0e\x13\x8e\x46\x65\x89\xae\x8f\x75\xe1\x34\x02\x06\xea\x1b\xb0\x20\x73\x83\x1b\xd5\xf1\xa1\xdf\x63\x11\xbf\x47\xe8\xa1\xf1\xea\xd5\x41\x00\x4b\xfb\x73\x4c\x15\xa0\x13\x3f\x59\xcf\x47\x88\xbc\x12\x55\xff\x67\x80\x65\x99\x2a\xa5\xed\xc5\xd4\x38\x90\x20\x8c\x97\xc5\x60\x48\xbc\xbe\xf2\x98\x0e\xb6\x8e\xc3\x07\xab\xa9\x85\xff\xaf\x8b\x79\xf2\xc7\x79\xbc\x3a\xb9\x7b\xca\x79\xff\xa0\xd5\xdd\x5f\x3b\xcb\x9c\x3c\x30\x4e\x60\x4b\xe6\x2f\x52\x7a\x2a\xfc\xa1\x97\xac\xdf\xd1\xcf\x25\xe4\x42\x0e\x07\x66\xf7\xa6\xcf\x1c\xbd\xa7\x86\x15\xa4\xc6\xbf\xa6\x18\x39\x92\x4e\x89\xe8\xee\xab\x49\x82\xaf\xb7\xef\x10\x30\xba\xcf\x8e\xef\xef\xc9\x7a\xe6\x35\xe3\x42\x50\x38\xbb\x02\x46\x75\xc7\xb0\x23\xd6\xa7\x8a\x5a\x60\xcb\x4e\x7d\x2d\x28\x31\xaf\x14\xe1\x56\xd1\x3a\xa2\x16\x24\x35\xb9\xbe\xea\xb8\x83\x99\x39\x0a\xe8\xbc\xa7\x75\x9b\xc8\x75\x47\xca\xd8\x81\x6d\x45\x2e\x6c\x05\x3b\xa5\xa7\x26\xcd\x9e\x06\xb9\x90\xcf\xd7\x61\x03\xee\xb6\x7d\xbb\xe0\x5d\x86\x71\xfa\xda\x95\xc3\x5b\x37\x03\xe7\x4f\xc9\xf8\x84\x1d\x0b\x87\x41\x99\x64\xfa\x09\xed\x6b\x78\xcd\x22\x39\x1f\xba\xbb\x6e\x4c\xbf\xc5\xd5\x85\x67\xe9\x15\x47\x2f\xe6\x0d\x2f\x7b\xc6\xc0\xc3\xa3\x70\x0d\x94\x74\xe7\xa9\xe9\xff\x81\x3a\xcf\xce\xb3\x7f\x07\x00\x00\xff\xff\x45\xc1\x68\x0e\x2f\x1c\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0x91, 0xd9, 0x22, 0xeb, 0x5a, 0xab, 0xe8, 0xb2, 0x1a, 0xb, 0x8c, 0xd4, 0x60, 0x6a, 0xee, 0xeb, 0xab, 0x32, 0x71, 0xfe, 0x7c, 0xd5, 0xc8, 0x4c, 0x80, 0x29, 0x30, 0x5c, 0x82, 0x67, 0xed}}
	return a, nil
}

var _metadataviewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x6d\x6f\xdb\xc8\xf1\x7f\xaf\x4f\x31\xf0\x1f\x08\xac\xfc\x25\xd2\xb9\x5e\x83\x56\x38\xdd\xc1\x97\xc4\x39\x17\x71\x6a\x38\xf6\xf5\xc5\x21\xb0\x97\xe4\x50\xda\x66\xb9\xcb\xee\x2e\x2d\xb3\x41\xbe\x7b\x31\xc3\xe5\x93\x44\xbb\xbe\x43\xf3\xc2\x91\xc8\xdd\xd9\x99\xdf\xce\xc3\x6f\x46\xf1\xcb\x97\xb3\xd9\xf5\x56\x3a\x48\x8d\xf6\x56\xa4\x1e\x64\x51\x2a\x2c\x50\x7b\x07\x7e\x8b\x50\xa0\x17\x99\xf0\x02\x9c\x17\x3a\x13\x36\x83\xd2\x9a\xd2\x38\xcc\x66\x52\xc3\xd9\x87\xf3\xcb\xe5\xc9\xeb\x3f\xbd\x8e\x66\xb3\x2b\xcc\x57\xb0\xf5\xbe\x74\xab\x38\xde\x48\xbf\xad\x92\x28\x35\x45\x6c\x74\xae\xcc\x2e\xe6\x3f\x89\x32\x49\x5c\x08\xe7\xd1\xc6\xb9\x92\xa5\x8b\xbf\x3b\xf9\xee\xd5\xc9\x5f\x5f\xbd\x5e\xea\xdc\x2f\xdb\xc3\xa2\x22\x9b\xcd\x3e\x79\x5b\xa5\xde\x81\xd0\x19\x58\x74\xa6\xb2\x29\x3a\x48\x85\xee\x55\x04\xa3\x11\x8c\x85\xc2\x58\x9c\x75\x9a\xfa\xba\x44\xb7\x80\x54\x28\x85\x19\xdc\x4b\xdc\xb9\x08\xde\x89\x74\xcb\x9f\xf9\x35\x58\x2c\x2d\x3a\xb2\x72\x26\x20\x93\x79\x8e\x96\xe4\x7d\x91\x3a\x03\x93\x77\x56\x2f\xc0\x55\xe9\x16\x84\x03\x01\xa9\x45\xe1\x8d\x85\x44\x9a\x8d\x15\xe5\xb6\x9e\x19\x0b\x02\xfe\x76\xf9\xee\x3d\xc8\x42\x6c\x10\x72\xa9\x30\x9a\xbd\x8c\x67\x33\x59\x94\xc6\x7a\x38\xab\xf4\x46\x26\x0a\xaf\xcd\x17\xd4\x90\x5b\x53\xc0\x51\x14\x57\x5e\x2a\xe9\xeb\x78\xf4\x36\x4a\xb3\xf4\x68\x36\x2b\xab\xa4\xbf\x8a\x8b\xa0\xc5\xaf\x64\x02\x7c\x9d\xcd\x00\x00\xe2\x38\x86\x53\xb8\x42\x67\xd4\x3d\x5a\xba\x8d\x7b\x99\xa1\x03\x91\xa6\xe8\x1c\x78\x03\x02\x1c\xfa\xa1\x15\x01\x83\x76\xfb\x40\x8c\x63\x8c\x09\xc2\x16\x61\x38\xc6\x68\x13\x81\xd0\xf0\xf1\xec\x7a\xbe\x07\xb7\x27\x4f\x91\xda\xa3\xcd\x45\x8a\x9d\x1c\x6f\x5a\x35\x06\x5a\x90\xf3\xf0\xb9\xe0\xb7\xc2\x83\xf4\xe0\xaa\x92\x50\xd9\x53\x84\x2c\xee\x0e\xef\x64\xf7\x06\x7e\xe5\x55\xed\xca\xbc\xd2\xb0\x41\xcf\x88\x1c\xcf\x57\xf0\xdb\x75\x5d\xe2\xe7\x83\x25\xb6\xd9\x4d\xcb\x8e\x6f\x59\x8d\x15\xd0\xca\xf9\x0a\x4e\x75\xdd\x78\xd6\x4f\xbc\xeb\xdb\x14\xaa\x6f\x8c\x52\x98\x7a\x69\x34\x48\xba\xfa\x8d\x35\x55\x49\x88\xb2\x03\x05\xe1\x96\xa0\xc8\xf0\x01\x92\x1a\xce\xdf\xfe\x2e\xa3\x06\xf2\x0f\xcd\x4b\x8c\xb5\x66\x47\xaa\xb7\xcb\x8f\x65\xb6\x82\x9b\x73\xed\x5f\x7f\x3f\x5f\xc1\x8b\xaf\xed\xf3\x6f\x53\xd0\x9c\xbf\x6d\x80\x69\xd6\x7f\xde\x37\xf2\xad\x74\xa5\x12\x75\x63\x57\x22\x9c\x4c\x43\x54\xf0\x25\xe9\x54\x55\xe4\x4c\x74\x79\x5a\x14\xb8\x80\x0c\x5d\x6a\x65\xc9\xba\x0a\x9d\xf5\x77\xbe\xad\x8a\x44\x0b\xa9\x20\xa7\x30\xd0\x60\x92\x7f\x62\xea\x23\xb8\x30\xce\x87\x2f\x0e\xdc\xd6\x54\x2a\xdb\xf7\x20\x3a\xf0\x10\xaf\xe0\x8b\xad\x82\xc1\xdd\xdb\xf3\xae\x83\x46\x74\x0b\xa4\x5d\x7b\xdc\x70\xd1\xde\x06\xe9\x20\x97\xa8\x32\xd8\x49\xa5\x20\x41\xc8\x1a\xd1\x98\x81\xd4\xa0\xa4\x0b\xc9\xc5\x6f\xd1\x62\x6e\x2c\x06\x75\x47\x62\x12\x7e\x6a\x3d\x99\x98\x1a\x9d\x4a\x87\xd1\xe4\x99\x64\x82\x42\xcf\x4a\xae\xe0\x93\xb7\x52\x6f\xc6\x26\x9c\xc2\xce\x4a\xef\x51\x8f\x40\xfd\x5f\xd9\x23\x20\x43\x2f\x64\x9b\xf2\xc6\x72\x17\x23\x51\xce\x70\x5c\x27\xc8\x89\x13\xee\xd1\x26\xc6\x75\x91\x0f\xa5\xb0\x82\x33\x1c\x48\xed\x3c\x0a\xce\x88\x02\x9c\xd4\x1b\x85\xa0\xa4\xc6\xf9\xd3\x10\x0c\xcc\x7b\x0c\x09\x57\x08\xa5\x06\x4e\xd4\xe5\x63\x31\x01\xca\x73\x30\x09\x9e\x96\x20\x08\xd8\x61\xb2\xcc\xad\x44\x9d\xa9\x9a\x93\x32\x1c\xcb\x08\x39\x53\x2f\xe0\xf2\xe3\xfb\xf9\x48\x08\x7b\x7e\xc0\xe3\xd0\x43\x16\x64\xf0\x17\x28\x2d\x72\x32\x5b\x00\xfa\xf4\x69\xeb\x3b\xa3\x06\xb9\xe6\xeb\x99\x54\xf8\xad\x07\x41\x6a\xe9\x8f\xbb\x6f\xf4\x6f\xe8\x36\x8b\xd1\x9b\x09\x34\xc7\x0b\x9e\x38\xb0\x5d\x32\x1f\xe4\x19\xfa\xe7\x50\xe5\x11\x87\xd3\x9a\x4f\x3e\x7c\x39\x74\xd1\xf5\x50\x87\xc3\xa5\xfd\x2d\xae\x7b\x5d\xba\x65\xdf\xf6\x33\x10\x69\x16\xd2\x2a\x6a\xb4\x32\x1d\x24\x48\xbe\x8b\xbe\x36\x83\x68\xae\xcf\x79\x63\x31\x03\x72\x0c\x0b\x26\xcf\x21\xdd\x0a\xa9\x0f\x0b\x1a\x89\x76\xed\x5d\x56\x0e\x33\x2a\x44\x16\xb9\xb8\x13\x79\xe0\x32\xed\x16\x40\xa5\xca\x34\xc1\x6f\x28\xfa\xa1\xc0\x4c\x8a\x47\x53\x52\xaf\x1f\xeb\x7e\x98\xb2\x2b\x2b\x29\xe7\x06\x57\xdf\xb3\xf7\x97\xeb\xeb\xcb\xde\x66\xb6\xa7\x49\xb6\x6d\xcd\x26\x0e\x00\x82\x33\x0c\xad\x85\x63\x63\xf9\xc3\xa7\x39\xdc\x5c\x7d\x08\x29\x61\x42\xad\x56\xf0\x6a\x4a\x2d\xf2\xc4\xca\xaa\xc3\xf8\x63\xd7\x1b\xbc\x99\x74\x8d\xca\xd2\x65\x56\x76\x78\x8d\x4f\x5b\xbd\x27\xc5\xa2\xaf\xac\xee\x84\x3d\xee\x0d\xe7\x97\x67\x9f\x58\xfd\x66\x07\x41\xd4\xfb\x53\xa0\x55\xc3\x02\xd3\x6d\x0c\x3e\x41\xd4\x4c\x0f\xf8\x17\x05\x2e\xc9\x3c\x74\x0e\x7a\x1a\x3c\x00\x84\xc5\xde\x2f\x32\xaa\xe0\x7e\x8b\xd2\x32\xf5\xa2\x32\x25\x33\xd4\x5e\xe6\x12\x2d\x1c\xbf\x39\x7f\x3b\xef\x84\x58\xc1\xfe\xe2\xb7\x82\x33\xae\xb4\x98\x7a\xb8\xb9\x3a\x8f\xe0\x14\x52\x25\x69\xaf\x28\x4b\x25\xd3\x26\x8f\x91\x2b\x56\x0e\x9b\xb2\xf7\xe6\xfc\xed\x90\x32\xe5\xc4\x35\xc9\x05\x95\x11\x5c\x84\x82\x15\xf7\x52\x90\x49\xac\xee\x46\x78\xdc\x89\xfa\x51\xcf\x6c\xd1\xeb\x5c\x60\x94\xd9\xde\x9c\xbf\x25\x2f\x23\xd1\x13\x86\x11\xac\xac\x17\x9f\xd4\x70\xd7\xc1\xee\x91\xa4\x11\xb7\xcf\x4c\xea\x22\x59\xe6\x2e\x92\x26\xa6\x9a\x88\xa5\x77\x71\x38\x61\x29\xb2\xcc\x92\x53\xeb\x4d\xfc\x64\x9a\x4c\x89\xd4\x4c\x15\x87\x4b\xe1\xb7\x1c\x1c\x1a\x0c\x67\x1c\xa1\xa0\xa4\x67\x81\x54\xe6\x8d\xb7\x74\xe4\xaa\x03\xab\xb9\x0d\x63\xeb\x67\x15\x0c\xe9\xc0\x68\x55\x83\x46\xcc\x28\xdf\xe7\xbd\x70\x26\xb9\x8e\xe9\xec\x73\x84\x3e\x03\x1c\x12\xbb\x74\xb5\xf3\x58\xb8\xa7\x61\x21\x4b\x5b\x5c\x7e\xda\x8b\xda\x01\x64\x8b\xf1\xc2\xc9\x20\x4e\x65\x06\x6b\xc2\xf9\xf0\x15\xe3\xb9\x66\x19\x53\x11\xde\x43\x55\xe9\x86\xa6\xb6\xd1\x49\x18\x31\xd8\x5a\x78\x79\x8f\x94\xa0\x7a\x47\xfa\xa3\x3e\xb4\x35\xbb\xa5\x37\x71\xf0\x9c\x25\x3d\x5e\x1a\xbd\xdc\x61\x12\xff\x5f\x73\xce\xb2\xb2\xca\x3d\x8a\xdb\x7f\x4b\x46\x32\xef\xa0\x85\xf5\x00\x80\xf1\x2a\xe8\xd3\xd6\x11\xa9\xb0\x8a\xe3\xa3\x88\x6e\x50\xf8\xe3\x16\xcf\x79\xfb\xe0\x28\x3e\xea\x3e\x93\xac\xf9\x48\xd4\x00\xca\x67\x49\x7d\x24\x3d\xbe\xe4\xff\x5e\x02\x5c\x99\x5a\x28\x5f\x03\xb7\x3d\xed\xc3\xb7\x98\x4b\x8d\x6d\x78\x17\xa5\x71\x82\x0a\x89\x0d\x6b\xbb\x7e\x9d\x8b\xcd\x46\xde\xa3\x83\x42\xd8\x2f\xe8\x4b\x25\xa8\x18\x0a\xa8\x34\x65\x82\x6c\xaf\xa3\x7b\x09\x14\x69\xa1\x59\xa3\x2e\x30\x88\x94\x18\x3a\xb7\x4e\xad\x8b\xa1\x38\x4a\x75\xff\xaa\xd0\xd6\x8d\x2f\xdc\x5d\xb5\x9b\xee\xda\x64\xc5\xfd\xef\xc7\xb3\x6b\x07\xad\x00\xca\x7e\x94\x8a\xf1\xa1\xc4\xd4\x37\xe5\xba\x14\x75\x7f\x20\x75\x28\x4d\xe1\xf7\x5b\x74\x08\xae\xc4\x54\xe6\x21\xbb\x8e\xd5\x39\xc8\x8d\x9d\x02\xfb\x69\xf1\xd4\x5a\x51\x37\xb0\x50\x9f\xfd\xa5\x81\x50\xea\x4c\xde\xcb\xac\x12\xaa\x3f\xbe\xdb\xd6\x14\x6a\xbe\xb0\x79\x93\xbd\x2a\x7f\xae\x73\xe3\x56\xf0\x5b\xb8\x9c\xcf\xe3\x02\xc9\x01\x7b\x3b\xb5\x6e\x3f\x56\xe3\x18\x7e\x15\x4a\x66\xc2\x07\x62\xe0\xaa\x82\x19\xb7\x52\xb4\x1d\x8a\x4a\x79\x59\x2a\x49\x0d\x67\x60\xb9\xda\x78\x62\x38\x1b\x8b\xc2\xb7\xd5\xe8\x55\x74\x32\x12\x7b\x2f\x2c\x78\xe3\x85\x7a\x53\x79\x58\xc3\xc9\xde\x6b\x0a\xda\xd6\x55\xa4\xee\xf4\x9c\x88\x89\x81\x90\xee\xe3\xff\xb7\x7b\xa3\xb4\xf2\x7b\xae\x3f\xfc\x26\x9c\x43\xeb\x8f\xbb\x7d\x3f\xac\x49\xcf\x05\x14\xe8\x9c\xd8\xe0\x0a\x8e\x3e\x35\xc6\x76\xe7\x3f\xdf\xda\xa3\xf9\x3e\x8c\xa7\xce\xc9\x8d\x6e\x02\x22\xc8\x9b\xc8\x8a\xed\x49\xeb\xc3\x45\x7b\x29\xf0\xaa\x89\xdb\xa1\x3c\x6e\x0a\xa6\xda\xee\xce\xdb\xb8\xf9\x6e\xef\xfa\x09\x56\x34\x71\x38\x8c\xa9\x51\xc3\xe4\x39\x18\x89\xeb\x84\xfe\xce\x8d\xba\xb1\xf6\x0a\xc9\x51\x98\x27\x71\xa4\xf3\xf0\x66\x3a\x1e\x0e\x1a\xeb\xf7\x81\x84\x8f\x67\x55\x57\x98\xa2\xbc\xef\x58\x02\x42\x82\x1a\x73\x99\x4a\x61\xeb\xb6\x3b\x0b\x67\x8f\x29\x87\x60\x34\x5a\xce\x91\x5a\x24\xaf\xae\xcb\xae\x6f\xb7\xad\xe0\x9d\xf4\xdb\xee\x5b\xb4\x41\x7f\x5d\x97\x78\x3c\xdf\xbb\x80\xd4\x14\x05\xea\xac\x61\x53\x4b\xb8\x71\x03\xbf\xe0\x81\x1c\xd5\x68\x8d\xbb\xa6\x4b\x6b\x10\x38\x53\x66\xd7\x58\x61\xc7\x56\x48\x07\x15\xe1\x06\x77\xdd\x85\xd5\xad\xa1\x97\x55\xa2\x64\x4a\xdc\xe3\x78\x7e\x37\x6e\x97\x29\x4b\x91\x0f\x36\x44\x8e\xee\x21\x17\x95\xf2\x13\xe7\x44\x87\x15\x94\x7b\x75\xa1\x94\xd9\xd1\x7e\xcb\xa3\xb1\xaa\x0c\xc1\x8e\x90\x8a\x52\x24\x3c\x0e\xa4\x28\x64\x06\x52\xf9\xca\x22\x2f\x73\x64\x1c\xb7\xe8\x6d\xa7\xd4\x2f\x3f\x20\x0e\xad\x0e\x2b\x78\xd3\x2d\xfa\xe1\xc5\xa9\xae\xaf\x02\x55\xfa\x3a\x9e\x37\xb6\x86\x7f\xfb\x71\xec\x0f\x17\x5d\x00\x76\x1d\x54\x2a\x54\x5a\xa9\x56\x65\x51\x98\x4a\xf3\x7c\xd1\x09\x85\x70\x2f\x54\x85\x94\x48\xb5\xcb\xd1\xda\xd0\x73\x05\x5f\x9b\x06\xe6\xa3\xf1\x08\x4b\x38\xf7\x83\xae\x3d\x41\xbf\x43\xd4\x94\xa7\x18\xf0\x57\xd1\xc9\x68\x16\x02\xef\x1e\x68\x4b\xe3\x44\x83\x83\xa5\x83\x07\xde\xd0\x27\x0e\x7a\x76\x12\xfd\xf9\x35\x2d\xd5\x43\x4f\x0d\x5b\x76\xed\x99\xbc\xe8\x25\x3c\x3c\xce\x59\x38\x38\x84\x52\x35\x94\x68\x53\xd4\x9e\x08\xfa\x06\x07\x3d\x6a\x33\x2a\xf0\x68\x0b\x0e\xcc\x44\x38\xe9\xa0\x34\x52\xfb\x11\x5f\xa1\x45\xce\x28\x99\xd1\x4d\x37\x45\xcd\x15\xc2\xfa\x6e\xd8\xeb\x60\xb7\x25\xee\x99\x8a\x8c\x7a\x12\xea\x72\xc9\x5b\xee\x6e\xce\xe4\xc3\xeb\xef\xef\x9a\xca\x20\x94\x45\x91\xd5\xdd\x24\x75\x6f\x8e\x81\xa3\xe3\xd9\x7f\x52\xe1\x08\xdb\x54\xd0\x17\xe9\x1d\x98\x12\x6d\x53\x3d\xc7\x3e\x4e\x55\x58\x7b\x69\x51\xd5\x94\x68\xd0\x16\x52\x4b\xe7\x43\x77\xbe\x41\x3b\xd8\xc9\x78\xb7\x04\xa1\x2a\xe9\xc2\xff\xd2\x1e\x6a\x72\x28\x2d\xa6\xd2\x49\xa3\xa3\x43\xd2\x5f\xf9\x15\x34\x26\x8d\xbd\xee\xef\x2d\xd3\x1f\x4d\x3b\x9a\x5f\x26\x9a\x76\xbe\x89\x16\x32\x83\x8e\x10\x35\xc5\xf1\xe0\x6e\x17\x07\x58\x58\x54\x8d\xba\x5b\x59\x76\xee\x45\x2f\xee\x76\x42\x29\xf4\x77\xed\xf0\x8f\x92\xe5\x02\xb8\xc9\xac\xfd\x96\xe4\xa2\x72\xa1\x16\xf3\x14\x6a\xa7\xd1\x42\x21\x37\x5b\x0f\x3b\xa1\x9b\x8c\xcc\x44\xe4\x30\x0a\x9f\x1c\x7d\x31\x27\xa0\x90\x28\xa9\x51\xfc\xfd\x81\xba\x18\xe2\xb7\x98\x3a\x6b\x9f\x5b\x94\x16\x27\x2a\x3a\x15\x8b\x1f\x99\x12\xc0\x8b\x17\xfc\xad\xa9\xcb\xb0\x82\x23\xaa\xd2\x4d\x98\xf4\xb1\x29\x35\x3d\x92\x19\x58\xa1\x37\x08\x32\x42\xf8\xed\x64\xf1\xea\xf3\xd1\x13\x95\x9f\x6b\x5c\x97\x7f\xd7\xd0\x99\x3d\x59\x91\x9b\x62\xfc\x47\xa6\x50\x07\x55\xf3\x7d\xa8\x3e\x4d\xcb\xc8\x7c\xaa\x33\x84\x13\x1a\x33\x1f\x56\x8c\xae\x7a\xcc\xf5\xba\xb4\xcd\xb3\x9a\x5e\x04\x67\x71\xbc\x47\xed\x2b\xce\x06\x43\x59\xfd\x1c\xcb\xed\xa4\x4f\xb7\x89\x21\xd6\xdd\x9a\xbe\xe8\xe4\x6e\x39\xae\xdb\xc9\x3a\x24\x55\x10\xcb\x5d\xe8\x48\xb9\x8e\xb8\xd2\x37\x6d\xc2\xac\xfc\x80\x6c\x4c\xd6\xae\x15\xf4\xdf\x06\x57\x1f\x98\x47\x5c\xf2\xcb\x38\x14\xfd\xb3\xeb\x56\xc4\x18\x45\x38\x0d\x3f\x0a\x98\x3e\xd1\xc1\x05\x66\x52\x2c\xda\x11\x16\x97\x6f\x9e\x89\x5b\x8b\xae\x34\x32\x23\x34\x79\x8e\x46\x85\x3c\xda\x67\x1f\xbc\x7b\x62\x46\x95\xf3\xf4\xe2\xd1\x41\x69\x1c\x37\x32\x97\xcc\x21\x52\x53\xa0\x0b\xdd\x00\x81\xc3\xd4\x91\xde\xc4\xae\x4a\x78\x85\x70\xc1\x4b\x12\xcc\x60\x8b\x16\xfb\x8e\x13\xef\x51\x51\x0e\x8b\x0a\xf3\x6f\xa9\x94\x88\x8c\xdd\xc4\xa8\x97\x37\x9f\xb8\x1b\x8d\xff\x81\x49\xfc\xcb\xf5\xf5\x65\xfc\xb3\x70\x32\x75\xb7\x26\xbf\xe5\xaf\x17\xe7\x17\xef\x6e\xf9\x37\xc5\x03\xe5\x3b\x73\x1f\x89\xf5\x49\xe3\x16\x87\xdb\xc6\x61\xcb\x9e\x4f\x5b\xd7\xf4\x67\xff\x45\xb7\x79\xdd\x7d\x7a\x2c\x18\xe0\x14\x94\x4c\x51\x3b\xfe\x5d\xce\x58\xbe\x22\x6f\x3a\x48\x5c\x99\x3d\x30\x0a\x61\x95\x6b\x87\x65\xed\xfe\xeb\xf6\xd7\x9a\xd1\x4c\x35\x8c\x4a\xda\x91\x12\xd1\x51\x26\x9c\x14\x34\x41\x52\x16\xa6\x96\x03\x07\xf8\x10\x34\x39\x74\x01\x52\xe3\xbc\x9b\x4b\x3d\x02\xe5\xed\x60\x74\xf5\xe4\xe8\x72\x2c\x0d\xd6\x83\x7d\x4f\xe0\xd4\xba\x3b\x3e\x94\x86\x69\xd7\xcd\xd5\x87\x66\xe0\x44\xc9\xc0\x63\x01\xfc\xfb\x17\xe0\x83\x47\x4b\x75\xca\x49\x8f\xd1\x14\x5c\x43\xa4\x92\x7a\x38\x0d\x24\x74\xbe\x20\x44\xdd\xe0\xef\x67\x65\x52\x3a\xc3\xb4\x83\xc4\x8e\x21\x72\xd9\xb1\x72\x23\xe9\xa8\x9e\xda\x32\xcc\x07\xa1\xf5\x2e\xe8\x44\x2a\xff\x9e\x21\xf0\x2d\x3c\x63\x0c\xbc\x9e\x9a\xde\x7e\x9b\xfd\x27\x00\x00\xff\xff\x25\x74\xad\xcb\x39\x20\x00\x00"

func metadataviewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_metadataviewsCdc,
		"MetadataViews.cdc",
	)
}

func metadataviewsCdc() (*asset, error) {
	bytes, err := metadataviewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MetadataViews.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0x13, 0xc5, 0x18, 0x58, 0x12, 0x29, 0x8a, 0xc7, 0xd3, 0x29, 0xbe, 0x1b, 0x93, 0x94, 0xa7, 0xaf, 0xd, 0x68, 0xe7, 0x3f, 0xbd, 0x22, 0xdc, 0x7c, 0x91, 0x3c, 0xcd, 0xaf, 0x7d, 0xab, 0xbf}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x8f\xdb\xba\x11\xbe\xeb\x57\xcc\xcb\x03\x9a\xdd\xc0\x6b\xf7\x50\xf4\x60\x20\x68\xda\xb7\x6f\x01\x5f\xb6\x0f\x5b\x17\x3d\x04\x01\x4c\x8b\x23\x9b\x08\x45\x2a\x24\x65\xc7\x0d\xf6\xbf\x17\x33\x24\x25\xca\xf6\x26\x9b\x5b\x73\x89\x57\x22\xbf\x99\xf9\xe6\x9b\x8f\xd4\xe2\xdd\xbb\xaa\xfa\xf5\x57\x58\xef\x11\x1e\xb4\x3d\xc2\xa3\x35\x77\x0f\xbd\xd9\xa9\xad\x46\x58\xdb\xcf\x68\xc0\x07\x61\xa4\x70\x92\x17\x6e\x1e\xad\xc9\xef\xf9\xf5\x06\x6a\x6b\x82\x13\x75\x00\x65\x02\xba\x46\xd4\x58\x55\x84\x37\xfc\x09\x61\x2f\x02\x08\xad\xc1\x58\x73\xd7\x64\xf4\xc0\xe8\x79\xb7\x87\xda\xf6\x5a\xd2\xdf\x8d\x75\x2d\x04\x3b\xaf\x56\x0d\x08\xe8\x3d\x3a\x38\x0a\x13\x3c\x04\x0b\x12\x3b\x6d\x4f\x20\xc0\xe0\x11\x4c\x13\x86\xfd\x33\x08\x7b\x54\x6e\xcc\xe6\xc8\x70\x06\x51\x56\xc1\x82\x6a\x3b\x8d\x2d\x9a\x40\xcb\xe0\xbc\x88\x31\xd7\x39\xe7\x7e\x89\xb3\x17\x07\xca\x18\x1a\xab\x89\x26\x2a\x86\x80\x5c\xaf\xd1\x83\x30\x12\x8c\x68\x95\xd9\x55\x5c\x6a\x98\x54\xef\x3b\xac\x55\xa3\xd0\xcf\x13\x83\x0f\xeb\x0d\x38\xf4\xb6\x77\x99\xaa\xda\x3a\x1c\x1e\x41\x38\x75\x89\x33\x87\x9d\x43\x8f\x54\xbb\x30\xf0\xf8\xb0\x06\x65\x18\xdd\xb7\xc2\x8d\xb5\x27\xe0\xdf\xac\xd6\x58\x07\x65\xcd\x06\x9e\x26\xf8\x23\x34\xa1\xfa\x60\x1d\x65\xcd\xd4\xbe\xf5\x8c\x5b\x0f\x7b\xe7\xd5\x8a\x5a\x59\xeb\x5e\xf2\xa2\x06\x8f\xd0\xf4\x86\xdf\x71\x0b\x04\x33\x40\x59\xd8\xa3\x41\x47\x8f\x50\x78\xa5\x4f\x55\x6b\x0f\xa9\xad\x9e\x12\x25\x5a\x6c\x1f\xc0\x36\xbc\xba\x0c\xc1\xf9\xfe\xe1\xec\x41\x49\x74\x1b\x5e\xb9\x79\xc2\x1a\xd5\x81\xfe\x1c\xd2\x1d\x48\xf4\x5c\x87\x2f\x9f\x80\xc4\x5a\x0b\x87\x45\x72\x47\x15\xf6\xe0\x6d\x8b\xd0\x39\x64\xd0\xce\x7a\xa6\x49\x2a\x5e\x51\x25\x56\xbf\xf4\xca\x21\x27\x35\x72\x56\x74\xb7\x46\x17\x84\x32\xa9\xa7\x0c\xb4\xc5\xbd\x38\x28\xeb\x86\x69\xf0\x51\x29\x27\xa0\x14\x3c\x76\xc2\x89\x80\xb0\xc5\x5a\xf4\x94\x66\x80\x9d\x3a\xa0\xe7\x18\xac\x60\xfa\x21\xb6\x4a\xab\x70\xa2\x48\x7e\x4f\xfb\x04\x38\x6c\xd0\xa1\xa9\x91\x44\x1a\x15\x5c\xa6\x44\xe9\x5a\xa3\x4f\x80\x5f\x3b\xeb\x13\x5e\xa3\x50\xcb\xa8\xba\xb1\x76\x65\xc0\x1a\x04\xeb\xa0\xb5\x0e\xab\xc4\xf9\x48\xd7\x1c\x56\x34\x83\xde\xa6\xc4\x28\x29\x7f\x9e\x55\x2b\x3e\x23\xd4\xbd\x0f\xb6\x1d\x9a\x90\x48\x9b\x0c\xd0\xb4\x11\x34\x96\x16\x0e\xc2\x29\xdb\x13\xa4\x32\xbb\xd4\x0b\x82\x8f\x7a\x98\x57\xd5\x3f\x4e\xd0\x7b\xe2\x73\x40\xe6\x12\x46\xa0\x59\x4a\xca\x36\x2c\xc9\xa9\xc6\x3d\xd4\xc2\x80\x47\x23\x2b\xda\xe5\xa2\x58\xb2\xda\x3a\x44\x77\x17\xec\x1d\xfd\x3f\xe3\xd8\x24\x3c\x6a\x99\xd9\x51\x7e\x1c\x84\xa7\x99\xd2\x12\x50\x23\xa1\x6a\xd0\x28\x77\xe8\xaa\x8b\x71\x5a\x5b\x0e\x95\xa7\x8e\x54\x6f\x6c\xd8\xa3\xe3\x14\x67\x83\x2d\xb1\x37\x78\xe2\xe6\xc4\xd0\xd2\x89\x38\x1a\x8f\x0f\xeb\xaa\x71\xb6\xbd\xe8\x29\xfb\x94\x81\x3a\x3b\x88\xc4\xce\x7a\x15\x86\x4e\x82\x35\x93\x58\x6f\x7d\x35\xd5\x68\x6d\xa9\x13\x21\xca\x37\x38\x61\x7c\x83\x6e\x5e\x55\xef\x16\x55\xb5\x58\xb0\x93\xb7\x24\xde\x38\xd5\xe7\xd6\x3c\x87\x7f\x32\x74\xf9\x96\x9a\xa5\x35\x6d\x56\x6d\x67\x5d\x88\x6d\x29\xfa\xad\x7c\xe1\xed\x8b\x45\xd5\xf5\xdb\x2b\xd0\x97\xae\xfa\xad\xaa\x00\x00\x52\x56\xc1\x06\xa1\xc1\xf4\xed\x16\x1d\x7b\x42\x6c\x1d\x2b\x55\xf9\xe8\x7a\xca\x00\x7e\x55\x3e\xf0\x44\xd0\x5e\x0a\x75\x10\x2e\x6e\xfe\x57\xdf\x75\xfa\xb4\x84\x7f\xaf\x4c\xf8\xeb\x5f\x06\xf0\xdf\x0f\x31\x4d\x11\x00\x5b\x15\x02\x4a\x38\x12\xc7\xa9\x0f\x45\xaa\x54\x87\x0a\x4a\x68\xf5\x5f\x94\x69\xfb\x10\x06\x19\xe6\xb7\xb4\x78\x35\x2e\xbc\xb9\xbd\x16\x4a\xf9\x69\x34\x91\x0e\x34\xe5\x07\x25\x98\x59\xde\xa7\x8c\x54\xb5\x08\xac\xc6\xc1\x38\x2f\x7c\x31\x01\x07\x38\x8a\x02\x04\x48\x47\xf3\x32\xdb\xc5\x02\x56\x17\x7b\x95\x07\x63\x43\xf4\x5d\x10\x75\x6d\x7b\x13\xde\x7a\x36\x7b\xb1\xc3\x19\x6c\x08\x66\xc3\xad\x86\x2d\xc2\xc6\x28\xbd\x99\x5f\xe7\xe0\x3f\x29\xf4\x8d\x92\x99\xec\x19\x67\xb1\x84\xbf\x4b\xe9\xd0\xfb\xbf\x5d\xa5\xe4\x25\x3e\x92\xc6\x51\xf2\x20\x4d\x0e\x82\xb3\xaa\x42\x66\x2a\x59\xdd\x6b\x88\x2a\xd1\x5f\x28\xe8\x3e\x2e\x99\xd4\x13\xec\xb5\x6a\x56\xd3\x4b\x4b\x92\x90\x1f\xce\xff\xf1\x7a\x72\x1e\xe9\xf2\xd0\x82\x15\xa9\xef\x1b\xaf\x28\xe6\xa0\x37\xea\x4b\x8f\xb0\xba\x4f\xa4\x89\x7a\xcf\x32\xdd\x0b\x3f\x2c\x25\x40\x8d\x01\xc6\x84\xf9\xd5\xf3\x90\xe7\x53\x3c\xc3\xda\x81\x7b\xf2\x93\x94\x1c\xa9\xec\x9a\x81\x52\x0d\x79\x3f\x5f\xa5\x1a\x65\xe2\x19\x94\x32\x27\x53\x42\x19\x1d\x8f\x30\x13\x1e\x3b\x3c\xd5\x72\x59\xeb\xe3\xc3\x7a\x79\x5e\xe6\x0f\x73\x2f\x38\xb6\xd0\xa2\x54\x74\x72\x66\xb9\x7b\xc8\xb6\x59\x98\xe6\x2b\xb8\xce\x97\x89\x29\xdf\x83\x27\x3b\xa4\xcb\xc9\x70\x8d\x1a\x62\x14\x9a\x22\xd7\x8b\x8b\x54\x80\x78\x1a\x47\x46\xdc\xa4\xb4\xa6\x37\x03\xec\x4d\xfe\xb1\xba\xcf\xb5\xde\x2e\xe1\xc3\x94\x0f\xde\x48\xf7\x90\xe9\x23\xfa\xe7\xd0\xf7\x3a\xcc\x95\x84\xf7\xef\xa1\xc4\x7a\x43\x42\x59\xdd\x67\xe5\x8f\x5e\x10\x67\xaa\xed\x7d\xa0\x21\xe6\xab\xa0\x68\x11\x44\x1c\x17\xba\xd9\xa0\xa7\x51\x58\xdd\xbf\x99\x44\x7b\xae\xa6\xbf\x7e\xd0\x8d\x34\x53\x3e\xf3\xf0\x53\xad\xc8\x17\xb9\xec\xff\x29\x50\x3e\xe9\x82\xf8\x3c\x36\x42\xf0\x2f\xe1\x76\x3d\x4b\x99\x7a\x20\xa4\x2c\x5b\x70\x16\xba\x08\x5f\x76\x24\x81\xdf\x30\x3f\xb1\x05\xb7\x2f\x17\xca\x03\x33\xb8\x64\x3a\xc6\x6b\xdb\xb6\x7c\xd7\xca\x1b\xba\x7e\xab\x95\xdf\x43\x63\xdd\xf0\x71\x31\xc9\xe5\x85\xfa\xc7\x8c\xff\x20\x84\xfa\x6c\x36\xbe\x9b\x6e\xb9\x68\x87\x61\x75\xef\x6f\x6e\x97\xf0\x31\x6a\xeb\xd3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xb5\xdd\x2e\xe1\x4f\x79\x58\xaf\x1b\x46\x2a\x28\x0d\x80\xa9\x1d\x5d\x27\x26\x9f\x1f\x85\x4d\x6c\x31\xdf\xb4\x65\xfe\xfa\x18\xee\x06\xe4\x34\xd9\x5f\x5e\x14\xc6\x48\xc7\x72\x98\xd2\xd9\x20\x92\xd9\x35\xba\x4a\xd9\xdc\x2b\x7e\x27\x1c\xdf\x50\xf7\x56\xcb\xd1\x95\x53\x3e\x57\x24\x92\xef\x0d\x74\x80\x48\x5a\xbb\x84\x0f\xdf\x22\x3f\x4b\xda\xfb\x5c\xfd\x5f\xd8\xc4\xf7\x06\x24\xce\xc7\xe5\x40\x8c\xb9\x78\x90\x03\x39\x25\xd0\xb0\x29\x44\x17\x49\x1b\x95\x04\xe1\x9c\x38\xbd\x4e\x8d\x25\x60\x54\x22\x38\x0c\xbd\x33\x69\x62\x9d\x38\x65\x7b\xa2\x77\x71\xa6\x1c\xe6\x9e\xd4\xd7\x7b\xf2\x82\xae\xcb\x60\x4f\x39\x4a\x52\x37\xca\xf1\x2b\x29\xde\xc4\xcb\x2f\xe1\x2b\x71\x16\x0b\xf0\x76\x3c\xbf\x63\x73\xf8\xf3\xc1\xa1\x90\x20\x45\x10\x4c\x11\xdf\xc1\x5b\x0c\x7b\x2b\xd3\xa9\xa3\xc2\xcf\x4c\xd8\xb9\xc7\x3b\xbc\x62\xf1\x1e\x75\x33\x1f\x54\xf8\x51\xc9\x4f\xf0\xcb\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xe2\xc6\xf7\xde\xcb\xaa\x7e\x79\xad\x8f\xd7\x0e\x45\xc0\xdf\xdb\x2e\x9c\x8a\x0f\x86\xf8\x94\x5b\x86\xf4\xea\xd2\xc9\x21\x7e\x4e\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x86\xe9\x24\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x63\xf1\xcf\xe9\x34\x8c\x31\x64\x39\x8a\xf9\x18\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x33\x4d\x81\x27\xe0\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x61, 0xca, 0x9d, 0xaa, 0x66, 0x36, 0xdf, 0xbc, 0x51, 0xdb, 0x7b, 0x51, 0xd8, 0x3d, 0x6f, 0x4e, 0x9c, 0x8e, 0x50, 0x28, 0x7c, 0x18, 0x1d, 0x2, 0xb2, 0xc2, 0x2b, 0x26, 0xa1, 0xfe, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleNFT.cdc":       examplenftCdc,
	"MetadataViews.cdc":    metadataviewsCdc,
	"NonFungibleToken.cdc": nonfungibletokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"MetadataViews.cdc": {metadataviewsCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
