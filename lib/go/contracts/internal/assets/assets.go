// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleNFT.cdc (7.203kB)
// ../../../contracts/MetadataViews.cdc (8.238kB)
// ../../../contracts/NonFungibleToken.cdc (4.832kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x4f\x6f\xe3\xba\x11\xbf\xfb\x53\xcc\xcb\x61\x2b\xa3\x89\xd5\x02\x45\x0f\x46\xbc\xd9\xc5\xe6\x19\xcd\xe1\x05\x8b\xac\xdb\x1e\x16\x41\x1f\x23\x8e\x63\x22\x12\x69\x90\x94\x5d\x35\xcf\xdf\xbd\x18\x52\x7f\x28\x89\x8a\xf3\xba\x97\x0a\x8b\x5d\x4b\x9c\x19\xce\xff\xf9\x91\x9b\xa6\xb0\xd9\x09\x03\xc2\x00\x93\x80\xff\x66\xc5\x3e\x47\x10\xf4\x77\x81\xd2\x32\x2b\x94\x04\xb5\x05\x06\xeb\x5c\x1d\xe1\x5e\xc9\xab\x75\x29\x9f\xc5\x53\x8e\xb0\x51\x2f\x28\x67\x69\x0a\x77\x96\xf8\xa5\xb2\xb0\x67\xda\x12\xb9\xdd\x21\xa8\xed\x56\x64\x82\xe5\x60\x2c\x93\x9c\x69\x0e\x4f\xa5\x05\x61\x81\x19\x53\x16\xc8\xc1\x2a\x78\x42\xe2\x3f\xa0\xae\xc0\x88\x42\xe4\x4c\xd3\xd7\x9d\x3a\x42\xc1\x64\x05\xf7\xeb\x8d\x81\xa3\x2a\x73\xde\xa9\xe4\x64\x67\x4a\x23\x6c\x4b\x99\x91\x7e\x2c\x17\xb6\x5a\xcc\x66\xa2\xd8\x2b\x6d\x49\xc7\x46\x45\xa7\x21\x6c\xb5\x2a\xe0\x62\x91\x0e\x17\x16\x19\xcf\x2e\x1a\xae\x5f\xd0\x32\xce\x2c\xfb\x87\xc0\xa3\x69\x59\x7a\x5f\x3d\xfd\x6c\x5f\x3e\x41\xa6\xa4\xd5\x2c\xb3\xf0\xb3\xf7\xd8\xfd\x7a\xb3\x1c\x6f\xfc\x3a\x9b\x01\x00\x10\xc3\xc1\x59\x66\x59\xfe\xad\xdc\xef\xf3\x6a\x09\x7f\xbf\x93\xf6\xaf\x7f\xe9\x08\xf0\x40\xb6\x7d\xa9\xe5\xde\x49\x61\x05\xcb\xc5\x7f\x90\x27\xf3\x01\xcd\x3f\x85\xdd\x71\xcd\x8e\x89\xe0\x8d\x98\x4b\xa7\xf0\x12\x3e\x73\xae\xd1\x98\x9b\x21\xcb\x2d\xee\x95\x11\xb6\xc7\x61\x55\x48\xdf\x32\xe4\x48\x5a\xe4\x39\x3a\xd7\x7e\xb3\x4a\xb3\x67\xfc\xca\xec\x6e\x09\xc1\xcb\x04\xf9\xd7\xf2\x29\x17\x99\xa7\xee\x7e\xf7\x88\x7f\x11\xd2\xa2\x9e\x94\xdb\xd2\x6a\x34\xaa\xd4\x19\x42\xd4\xb5\x8b\xbb\xfb\xf5\xe6\xb2\x1f\xb4\xc5\x03\x1a\x95\x1f\x50\xc3\xab\x93\x12\xee\xda\x19\x3e\x1b\xad\x49\x56\x20\x29\xa1\x85\x7c\x1e\x2d\x72\x34\x99\x16\x7b\x32\x6e\x92\xc6\xee\xca\xe2\x49\x32\x91\x8f\x28\x58\x96\xa1\x31\x89\xc1\x7c\x3b\x77\xa4\x5a\x55\x2c\xb7\x02\xcd\x12\xbe\x0f\x94\x77\x2b\xd5\x63\xa7\x9f\x90\xc2\x26\xed\x9b\xfb\xd2\x85\xaf\xf7\x3d\xb4\xa0\xbf\x12\x51\xbf\x4f\x30\xd2\xbd\xbf\xfc\x0e\x7d\x1b\xd2\x79\xe0\x76\x7a\xc8\xe8\x85\xe0\xb0\x02\xc1\xc7\x0b\xa4\x32\xac\x9c\xe6\xe3\xc5\x40\x6b\x58\x85\x36\x8c\x49\x5b\xfd\x61\xd5\xd9\x32\x26\x6b\xed\x80\x55\x67\x53\x4b\x76\x72\xbf\x7a\x71\xdd\x96\x12\x9e\xd1\x3a\x5b\x93\xf9\x12\xbe\x6f\xaa\x3d\x3e\x0e\x4c\xd4\x68\x4b\x2d\xe1\x7b\xef\x23\x3d\x44\x7c\xdd\xf7\xd7\xad\x30\xfb\x9c\x55\x1f\x93\xf9\xe5\x7b\xc8\x1f\x1a\x25\x3f\xd6\xf5\xdf\x3c\x8f\x81\xd6\x23\x8d\xb5\xaf\x00\x12\x91\xfc\x0b\x0e\x02\x8f\x4b\x27\x7c\xbe\x84\xcf\xb2\xfa\x66\x75\x99\xd9\x9b\x61\x9c\x8e\xc2\x66\x3b\x47\x3c\x58\xa1\x27\x63\x06\xdf\x36\x67\x39\xe2\x09\x5c\x13\x65\x4a\xa2\x1c\xd0\x26\x72\x9b\x20\x63\x4f\x35\x4f\x2f\xaf\x87\x39\x33\xcd\x16\x64\x7b\x5f\xb3\xbf\x6d\x36\x5f\xd7\x22\xc7\x69\xd5\xe8\x29\x75\xbe\x1c\xa4\xdd\x24\xfd\x3c\xba\x32\xfe\x3a\xe5\xe0\x30\x01\x7e\x87\x8b\x5b\xb6\x69\x4b\xfa\x05\xf1\x0e\x35\x4f\xb1\xa4\x97\x81\xed\x9e\xe0\x14\x69\xde\xae\xd9\x6f\x59\x86\xc1\xa0\x1c\x8e\x8b\x41\xbb\xa6\x3c\xe6\xf5\xbc\xb2\xd4\xeb\x97\xf0\x69\xd4\xfe\xef\xd7\x9b\x79\xac\x5e\xef\x6e\x7d\xb5\xfa\x2e\xf9\x38\x22\x79\x52\x5a\xab\xe3\xfd\x7a\x13\x8c\xc2\xf9\x12\x3e\xc4\x36\x98\x60\xee\x0c\x19\xc8\xe8\x16\x88\x7b\x58\x66\x7b\x65\x6c\xa4\xbe\x12\x8d\xa6\xcc\x2d\xac\x56\xe4\xd1\x39\xfc\xf6\x5b\xf3\xe9\xc6\x35\x4f\xea\x9e\x13\xf1\xbf\xf8\xc2\x24\x61\x2e\xaf\x56\xe0\x60\xd0\xb8\x45\x8d\x32\xc3\xa5\x03\x4b\x77\xb7\x0d\x24\xf3\xb1\x43\xde\x51\x10\x70\x13\x32\x53\x5a\x63\x66\x2f\x26\xc2\x3e\x1d\xdf\x2e\x96\xcb\x37\x22\x7c\x39\x9e\xdf\x5f\xb5\x3a\x08\x8e\x3a\xb2\xf4\x80\x19\x8a\x43\x74\x69\x2c\x38\x8e\x00\x3a\xba\xc0\xe5\x69\x0a\x5c\x78\xc0\xa8\x2b\xf2\x08\xb9\x2a\x53\x72\xab\x74\x21\xe4\x33\xb8\x64\x33\x21\x39\x11\x10\x30\xee\xec\xb5\xd5\x1e\xe1\x28\xec\x8e\xd0\xf2\xaf\x3e\xf6\xbf\x92\x83\xb7\x02\x73\xde\xcb\x18\x42\x7c\xea\x28\x91\x13\x88\x5d\xc2\xa7\x57\x4f\x1d\xc1\x32\xf7\xeb\xcd\xa9\x3f\xf6\x21\x89\x4e\xd3\x56\x1c\x5c\x5f\xc1\xeb\x29\x36\x09\xd2\xd4\xa9\x47\xf8\x10\x34\x16\xea\x80\x0e\xd8\x93\x25\x0e\xd3\x7a\xf0\xdc\x7a\x87\x49\x0e\x9e\x48\x58\x42\xde\x6e\x99\xe5\x39\xea\x51\xf6\x37\x62\x93\xe6\xc7\xdd\x6d\x90\xfd\xd1\x12\x1d\xd8\xe0\xb0\x92\x03\xc6\xd7\x57\x03\x83\x16\x5e\xd7\xe4\x05\xab\x25\x74\x1b\xcc\xe1\xe6\x06\xf6\x4c\x8a\x2c\xb9\x28\x84\x31\x14\xa6\xfb\xf5\xe6\x62\x3e\xeb\x09\xc6\x42\x0c\x60\xb1\xdb\x66\x21\x78\x03\x8c\xdb\xdd\xf4\xcd\x82\x79\xd0\x3b\x90\x51\xb7\xb5\xeb\x2b\xc7\x3a\xe1\xda\xba\x2f\x81\x65\x2f\xe4\x57\xe7\x56\x72\x21\xe3\xbc\xe7\xc1\xd6\xc1\x26\x48\xb9\x50\x50\xcb\x54\xd7\x67\xcd\x28\x38\x30\xad\x59\xf5\xbf\x35\xc4\xb7\xdc\xed\x7f\x30\xf3\x13\x7c\xea\xf7\xa9\xd9\x88\xa7\xeb\x6a\x84\xa9\x6a\x47\xf6\xc9\xc8\x02\xce\x9d\xca\x12\x8f\xb5\xf0\xda\x86\xa0\xc6\x8e\x3b\x91\xed\xda\x34\x74\x67\xc2\x9c\x83\x92\x38\xda\x53\xe5\x7c\x13\xcf\x8c\xef\x82\x3f\xb6\x06\x44\xc2\x1e\x1e\x6d\x28\xde\x74\xac\x39\x1f\x6d\x8e\xc6\x6a\x55\xb5\xfb\x4e\xc4\xdb\x4f\x94\x3a\x37\x5c\x21\xb9\xf0\x34\xed\x94\xd6\xec\x8e\x59\x60\x9a\x46\xdd\x20\xf6\xef\x98\x4f\x71\x3c\x39\x28\x8d\x17\xac\xcc\x84\x7e\xed\x38\x23\xd9\xbe\x51\x35\x7d\xdd\xaa\xa6\xee\xa7\x15\x4b\x53\x30\xca\x5b\xd0\x15\x3e\x64\x8c\x80\x24\xe3\x20\xac\x81\xa2\xee\xaf\x2e\x63\x89\xa0\xf9\xba\x53\xdc\xfc\xd0\x78\x8d\xdb\xfe\x21\x12\x7d\x66\xce\x0c\xe8\xd3\x6c\x0c\xde\x7f\x68\x58\x8b\x6d\x2c\x0b\x7f\x72\x33\x3a\x32\xc4\xd3\x14\xbe\x68\x64\x16\x5d\x86\x94\x76\xa7\x34\x9d\xdc\x07\xd1\xc8\x73\x75\x04\xae\x8e\x32\x63\xc6\x86\xa7\xc4\xb0\x10\x34\x6e\x61\x35\xe5\x05\x12\x7d\xc6\x15\x03\x77\x92\x38\x2a\xfa\x81\xbd\x83\x39\x7f\x1e\xdf\x4d\xb8\x97\xa6\x6e\x33\x73\x07\x0e\xfe\x2c\xab\x87\x7a\x6a\xbe\xc6\x87\xf4\x29\xd2\xaf\xe4\xd6\xfe\xb0\xf9\x24\x07\x3b\x30\xb4\x72\x42\xcf\x39\xa1\xb6\x3a\xe0\xa3\xac\x7b\x87\x11\x31\x27\xd5\xdd\x65\x34\xc4\x9b\xae\xd3\x37\x2f\x0e\xb3\xd2\x94\x7c\x4d\xf0\xb8\xb9\xe6\xaa\x5b\x8d\xac\x94\x44\x57\xa4\xae\x1c\xad\x82\xac\xce\x3d\xd7\x8b\xb1\xd8\xdb\x6a\x58\xec\x4d\xd4\x3c\xe5\xcf\x44\xd2\x41\xa4\x24\x3a\xbe\xa3\x10\xaa\x1d\x92\xcd\x9e\xa1\x94\x81\xf6\x0f\x2d\x66\xf2\x6a\x03\xe3\x85\x90\xa0\x34\x18\x45\xfd\x83\x66\x79\x73\xe7\xe7\xaf\xf8\xd4\x51\xd6\x77\x82\xb5\x08\xf6\x94\xbb\xd2\x29\x84\xb4\xce\xb8\xd6\x5d\x69\x1a\xbd\x28\xf2\x97\x4b\xcd\xbd\x5b\x2d\x85\xb8\x29\xa0\xf4\xaf\xa9\xbd\x44\xef\x1e\xc6\xb9\xd7\xbb\xdb\xe1\x70\x6e\x26\x3d\xfd\x91\x35\x76\xce\xc4\x5e\x20\xc9\x08\x00\x54\xe9\x30\x89\xdd\xa1\xd0\xe1\xe7\xb6\xf2\x47\x85\x53\x6b\x93\x0c\xb2\xaf\x96\xbd\x84\x0f\xaf\x67\x51\xef\xe9\xff\xf4\xf6\x67\x08\x11\x7a\x79\x39\x2c\x38\x82\xc7\x12\xdd\xec\xea\xd2\x69\xe4\x18\xa8\x6f\xbd\x82\xca\x0d\x6e\x51\xc7\x07\x7d\xef\x8b\xf8\xdd\x41\xcf\x1b\x6f\x5e\x17\x04\x6e\x69\x7f\x8e\xa9\x02\xef\xc4\x4f\xd3\xf3\x91\x47\xde\xc8\xaa\x3f\x18\x60\x59\xa6\x4a\x69\x7b\x39\x35\x4e\x24\x08\xf3\x65\x31\x00\x86\xd7\x57\xde\xa7\x83\xad\xe3\xee\x83\xd5\xd4\xc2\x1f\xeb\x46\x9e\xfc\x79\x1e\xef\x4e\xee\x6e\x72\xde\x3f\x5c\x75\x77\xd6\xce\x32\x27\x0f\x8c\x13\xd8\x92\xf9\xcb\x93\x9e\x0a\x7f\xea\x15\xeb\x37\xf4\x58\x84\x42\xc8\x61\xcf\xec\xce\xf4\x99\xa3\x77\xd3\xb0\x82\xd4\xf8\xd7\x14\x23\xc7\xd0\x29\x11\xdd\x1d\x35\x49\xf0\xfd\xf6\x1d\x02\x46\x77\xd8\xf1\xfd\x3d\x59\xcf\xbc\x06\x26\x04\x8d\xb3\x6b\x60\xd4\x77\x0c\x3b\x60\x7d\x92\xa8\x05\xb6\xec\x34\xd7\x82\x16\xf3\x46\x13\x6e\x15\xad\x33\x6a\x41\x52\x93\xeb\xab\x8e\x3b\xc0\xc9\x51\x87\xce\x7b\x5a\xb7\x85\x5c\x4f\xa4\x8c\xed\xd9\x93\xc8\x85\xad\x60\xab\xf4\x14\xba\xec\x69\x90\x0b\xf9\x72\x1d\x0e\xe0\x6e\xdb\xf3\x0d\xef\x32\xcc\xd3\xb7\xae\x19\xce\xdd\x06\x9c\x3e\x26\xe3\x53\x75\x2c\x1d\x06\x6d\x92\xe9\x67\xb4\x6f\xf9\x6b\x16\xa9\xf9\x30\xdc\xf5\x60\xfa\x3d\xa1\x2e\x3c\x4b\xaf\x39\x7a\x31\x67\xa2\xec\x19\x83\x08\x8f\xd2\x35\x50\xd2\x9d\xa1\xa6\xff\xd7\xe9\x34\x3b\xcd\xfe\x1b\x00\x00\xff\xff\x64\xd4\xe1\xa9\x23\x1c\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0x7a, 0x1f, 0x78, 0xb4, 0xa1, 0x41, 0x1a, 0xa, 0x25, 0x6e, 0x61, 0x79, 0xfd, 0xd5, 0x29, 0x7d, 0x7e, 0x45, 0x2c, 0x63, 0xce, 0x93, 0xe7, 0xe4, 0x92, 0xfa, 0x30, 0x54, 0x70, 0x65, 0xe3}}
	return a, nil
}

var _metadataviewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x6d\x6f\xdb\x38\xf2\x7f\xef\x4f\x31\xc8\x1f\x28\xe2\xfc\x6d\x29\xed\xed\x06\x7b\xc6\x7a\x17\xd9\xa6\xe9\xe6\xd0\xf4\x82\x34\xd9\x7b\xb1\x28\x12\x4a\x1a\xd9\xbc\x52\xa4\x8e\xa4\xe2\xf8\x8a\x7e\xf7\xc3\x8c\xa8\x27\x5b\xc9\x65\x17\xd7\x17\xa9\x2d\x91\xc3\x99\x1f\xe7\xe1\x37\xe3\xf8\xe8\x68\x32\xb9\x59\x4b\x07\xa9\xd1\xde\x8a\xd4\x83\x2c\x4a\x85\x05\x6a\xef\xc0\xaf\x11\x0a\xf4\x22\x13\x5e\x80\xf3\x42\x67\xc2\x66\x50\x5a\x53\x1a\x87\xd9\x44\x6a\x38\xff\x70\x71\x35\x3f\x3e\xf9\xcb\x49\x34\x99\x5c\x63\xbe\x80\xb5\xf7\xa5\x5b\xc4\xf1\x4a\xfa\x75\x95\x44\xa9\x29\x62\xa3\x73\x65\x36\x31\xff\x49\x94\x49\xe2\x42\x38\x8f\x36\xce\x95\x2c\x5d\xfc\xe6\xf8\xcd\xeb\xe3\xbf\xbe\x3e\x99\xeb\xdc\xcf\x9b\xc3\xa2\x22\x9b\x4c\x3e\x79\x5b\xa5\xde\x81\xd0\x19\x58\x74\xa6\xb2\x29\x3a\x48\x85\xee\x54\x04\xa3\x11\x8c\x85\xc2\x58\x9c\xb4\x9a\xfa\x6d\x89\x6e\x06\xa9\x50\x0a\x33\x78\x90\xb8\x71\x11\xbc\x13\xe9\x9a\x3f\xf3\x6b\xb0\x58\x5a\x74\x64\xe5\x44\x40\x26\xf3\x1c\x2d\xc9\xfb\x22\x75\x06\x26\x6f\xad\x9e\x81\xab\xd2\x35\x08\x07\x02\x52\x8b\xc2\x1b\x0b\x89\x34\x2b\x2b\xca\xf5\x76\x62\x2c\x08\xf8\xdb\xd5\xbb\xf7\x20\x0b\xb1\x42\xc8\xa5\xc2\x68\x72\x14\x4f\x26\xb2\x28\x8d\xf5\x70\x5e\xe9\x95\x4c\x14\xde\x98\x2f\xa8\x21\xb7\xa6\x80\xe3\x47\xc4\x1f\xde\xfc\xf0\xfd\x49\x92\xbf\x39\xc6\x37\x42\x9c\x4c\x26\x65\x95\x74\xf8\x5f\x86\xa3\x7f\x23\xbd\xe1\xeb\x64\x02\x00\x10\xc7\x31\x9c\xc2\x35\x3a\xa3\x1e\xd0\xd2\x15\x3c\xc8\x0c\x1d\x88\x34\x45\xe7\xc0\x1b\x10\xe0\xd0\xf7\x55\x0f\x86\x37\xdb\x7b\x62\x1c\x03\x4b\xb8\x35\xb0\xc2\x21\x46\xab\x08\x84\x86\x8f\xe7\x37\xd3\x1d\x8c\x3d\xb9\x87\xd4\x1e\x6d\x2e\x52\x6c\xe5\x78\xd3\xa8\xd1\xd3\x82\x3c\x86\xcf\x05\xbf\x16\x1e\xa4\x07\x57\x95\x04\xc5\x8e\x22\x64\x71\x7b\x78\x2b\xbb\x33\xf0\x2b\xaf\x6a\x56\xe6\x95\x86\x15\x7a\x46\xe4\x70\xba\x80\xdf\x6f\xb6\x25\x7e\xde\x5b\x62\xeb\xdd\xb4\xec\xf0\x8e\xd5\x58\x00\xad\x9c\x2e\xe0\x54\x6f\x6b\x77\xfa\x99\x77\x7d\x1b\x43\xf5\xad\x51\x0a\x53\x2f\x8d\x06\x49\xf7\xbd\xb2\xa6\x2a\x09\x51\xf6\x9a\x20\xdc\x12\x14\x19\x3e\x42\xb2\x85\x8b\xb3\x3f\x64\x54\x4f\xfe\xbe\x79\x89\xb1\xd6\x6c\x48\xf5\x66\xf9\xa1\xcc\x16\x70\x7b\xa1\xfd\xc9\x77\xd3\x05\xbc\xfa\xda\x3c\xff\x36\x06\xcd\xc5\x59\x0d\x4c\xbd\xfe\xf3\xae\x91\x67\xd2\x95\x4a\x6c\x6b\xbb\x12\xe1\x64\x1a\x42\x81\x2f\x49\xa7\xaa\x22\x67\xa2\xcb\xd3\xa2\xc0\x19\x64\xe8\x52\x2b\x4b\xd6\x55\xe8\xac\xbb\xf3\x75\x55\x24\x5a\x48\x05\x39\xf9\xbe\x06\x93\xfc\x13\x53\x1f\xc1\xa5\x71\x3e\x7c\x71\xe0\xd6\xa6\x52\xd9\xae\x07\xd1\x81\xfb\x78\x05\x5f\x6c\x14\x0c\xee\xde\x9c\x77\x13\x34\xa2\x5b\x20\xed\x9a\xe3\xfa\x8b\x76\x36\x48\x07\xb9\x44\x95\xc1\x46\x2a\x05\x09\x42\x56\x8b\xc6\x0c\xa4\x06\x25\x5d\xc8\x28\x7e\x8d\x16\x73\x63\x31\xa8\x3b\x10\x93\xf0\x53\xeb\xc9\xc4\xd4\xe8\x54\x3a\x8c\x46\xcf\x24\x13\x14\x7a\x56\x72\x01\x9f\xbc\x95\x7a\x35\x34\xe1\x14\x36\x56\x7a\x8f\x7a\x00\xea\xff\xca\x1e\x01\x19\x7a\x21\x9b\x3c\x37\x94\x3b\x1b\x88\x72\x86\xe3\x3a\x41\xce\x96\xf0\x80\x36\x31\xae\x8d\x7c\x28\x85\x15\x9c\xd6\x40\x6a\xe7\x51\x70\x1a\x14\xe0\xa4\x5e\x29\x04\x25\x35\x4e\x9f\x87\xa0\x67\xde\x53\x48\xb8\x42\x28\xd5\x73\xa2\x36\x09\x8b\x11\x50\x5e\x82\x49\xf0\xb4\x04\x41\xc0\x06\x93\x79\x6e\x25\xea\x4c\x6d\x39\x13\xc3\xa1\x8c\x90\xd3\xf3\x0c\xae\x3e\xbe\x9f\x0e\x84\xb0\xe7\x07\x3c\xf6\x3d\x64\x46\x06\x7f\x81\xd2\x22\x27\xb3\x19\xa0\x4f\x9f\xb7\xbe\x35\xaa\x97\x6b\xbe\x9e\x4b\x85\xdf\x3a\x10\xa4\x96\xfe\xb0\xfd\x46\xff\xfa\x6e\x33\x1b\xbc\x19\x41\x73\xb8\xe0\x99\x03\x9b\x25\xd3\x5e\x9e\xa1\x7f\x0e\x55\x1e\x71\x38\x2d\xf9\xe4\xfd\x97\x7d\x17\x5d\xf6\x75\xd8\x5f\xda\xdd\xe2\xb2\xd3\xa5\x5d\xf6\x6d\x37\x03\x91\x66\x21\xad\xa2\x46\x2b\xd3\x5e\x82\xe4\xbb\xe8\x0a\x32\x88\xfa\xfa\x9c\x37\x16\x33\x20\xc7\xb0\x60\xf2\x1c\xd2\xb5\x90\x7a\xbf\xa0\x91\x68\xd7\xdc\x65\xe5\x30\xa3\x42\x64\x91\x2b\x3a\x31\x06\xae\xcd\x6e\x06\x54\xaa\x4c\x1d\xfc\x86\xa2\x1f\x0a\xcc\xa4\x78\x32\x25\x75\xfa\xb1\xee\xfb\x29\xbb\xb2\x92\x72\x6e\x70\xf5\x1d\x7b\x7f\xbd\xb9\xb9\xea\x6c\x66\x7b\xea\x64\xdb\xd4\x6c\xa2\x05\x20\x38\xc3\xd0\x5a\x38\x34\x96\x3f\x7c\x9a\xc2\xed\xf5\x87\x90\x12\x46\xd4\x6a\x04\x2f\xc6\xd4\x22\x4f\xac\xac\xda\x8f\x3f\x76\xbd\xde\x9b\x51\xd7\xa8\x2c\x5d\x66\x65\xfb\xd7\xf8\xbc\xd5\x3b\x52\x2c\xfa\xca\xea\x56\xd8\xd3\xde\x70\x71\x75\xfe\x89\xd5\xaf\x77\x10\x44\x9d\x3f\x05\x2e\xd5\x2f\x30\xed\xc6\xe0\x13\xc4\xc7\x74\x8f\x74\x51\xe0\x92\xcc\x7d\xe7\xa0\xa7\xc1\x03\x40\x58\xec\xfc\x22\xa3\x0a\xee\xd7\x28\x2d\x53\x2f\x2a\x53\x32\x43\xed\x65\x2e\xd1\xc2\xe1\xdb\x8b\xb3\x69\x2b\xc4\x0a\xf6\x17\xbf\x16\x9c\x71\xa5\xc5\xd4\xc3\xed\xf5\x45\x04\xa7\x90\x2a\x49\x7b\x45\x59\x2a\x99\xd6\x79\x8c\x5c\xb1\x72\x58\x97\xbd\xb7\x17\x67\x7d\xca\x94\x13\xc1\x24\x17\x54\x46\x70\x11\x0a\x56\x3c\x48\x41\x26\xb1\xba\x2b\xe1\x71\x23\xb6\x4f\x7a\x66\x83\x5e\xeb\x02\x83\xcc\xf6\xf6\xe2\x8c\xbc\x8c\x44\x8f\x18\x46\xb0\xb2\x5e\x7c\x52\x4d\x58\x7b\xbb\x07\x92\x06\x84\x3e\x33\xa9\x8b\x64\x99\xbb\x48\x9a\x98\x6a\x22\x96\xde\xc5\xe1\x84\xb9\xc8\x32\x4b\x4e\xad\x57\xf1\xb3\x69\x32\x25\x52\x33\x56\x1c\xae\x84\x5f\x73\x70\x68\x30\x9c\x71\x84\x82\x92\x9e\x05\x52\x99\xd7\xde\xd2\x92\xab\x16\xac\xfa\x36\x8c\xdd\xbe\xa8\x60\x48\x07\x46\xab\x2d\x68\xc4\x8c\xf2\x7d\xde\x09\x67\x92\xeb\x98\xce\xbe\x44\xe8\x0b\xc0\x21\xb1\x73\xb7\x75\x1e\x0b\xf7\x3c\x2c\x64\x69\x83\xcb\xcf\x3b\x51\xdb\x83\x6c\x36\x5c\x38\x1a\xc4\xa9\xcc\x60\x49\x38\xef\xbf\x62\x3c\x97\x2c\x63\x2c\xc2\x3b\xa8\x2a\x5d\xd3\xd4\x26\x3a\x09\x23\x06\x5b\x0b\x2f\x1f\x90\x12\x54\xe7\x48\x7f\xd6\x87\xd6\x66\x33\xf7\x26\x0e\x9e\x33\xa7\xc7\x73\xa3\xe7\x1b\x4c\xe2\xff\xab\xcf\x99\x57\x56\xb9\x27\x71\xfb\x6f\xc9\x48\xe6\x2d\xb4\xb0\xec\x01\x30\x5c\x05\x5d\xda\x3a\x20\x15\x16\x71\x7c\x10\xd1\x0d\x0a\x7f\xd8\xe0\x39\x6d\x1e\x1c\xc4\x07\xed\x67\x92\x35\x1d\x88\xea\x41\xf9\x22\xa9\x4f\xa4\xc7\x23\xfe\xef\x08\xe0\xda\x6c\x85\xf2\x5b\xe0\xb6\xa7\x79\x78\x86\xb9\xd4\xd8\x84\x77\x51\x1a\x27\xa8\x90\xd8\xb0\xb6\x6d\xd2\xb9\xd8\xac\xe4\x03\x3a\x28\x84\xfd\x82\xbe\x54\x82\x8a\xa1\x80\x4a\x53\x26\xc8\x76\x3a\xba\x23\xa0\x48\x0b\xcd\x1a\x75\x81\x41\xa4\xc4\xd0\xb9\xb5\x6a\x5d\xf6\xc5\x51\xaa\xfb\x57\x85\x76\x5b\xfb\xc2\xfd\x75\xb3\xe9\xbe\x49\x56\xdc\xf4\x7e\x3c\xbf\x71\xd0\x08\xa0\xec\x47\xa9\x18\x1f\x4b\x4c\x7d\x5d\xae\x4b\xb1\xed\x0e\xa4\x0e\xa5\x2e\xfc\x7e\x8d\x0e\xc1\x95\x98\xca\x3c\x64\xd7\xa1\x3a\x7b\xb9\xb1\x55\x60\x37\x2d\x9e\x5a\x2b\xb6\x35\x2c\xd4\x67\x7f\xa9\x21\x94\x3a\x93\x0f\x32\xab\x84\xea\x8e\x6f\xb7\xd5\x85\x9a\x2f\x6c\x5a\x67\xaf\xca\x5f\xe8\xdc\xb8\x05\xfc\x1e\x2e\xe7\xf3\xb0\x40\x72\xc0\xde\x8d\xad\xdb\x8d\xd5\x38\x86\xdf\x84\x92\x99\xf0\x81\x18\xb8\xaa\x60\xc6\xad\x14\x6d\x87\xa2\x52\x5e\x96\x4a\x52\xc3\x19\x58\xae\x36\x9e\x18\xce\xca\xa2\xf0\x4d\x35\x7a\x1d\x1d\x0f\xc4\x3e\x08\x0b\xde\x78\xa1\xde\x56\x1e\x96\x70\xbc\xf3\x9a\x82\xb6\x71\x15\xa9\x5b\x3d\x47\x62\xa2\x27\xa4\xfd\xf8\xff\xcd\xde\x28\xad\xfc\x8e\xeb\xf7\xbf\x09\xe7\xd0\xfa\xc3\x76\xdf\x8f\x4b\xd2\x73\x06\x05\x3a\x27\x56\xb8\x80\x83\x4f\xb5\xb1\xed\xf9\x2f\xb7\xf6\x60\xba\x0b\xe3\xa9\x73\x72\xa5\xeb\x80\x08\xf2\x46\xb2\x62\x73\xd2\x72\x7f\xd1\x4e\x0a\xbc\xae\xe3\xb6\x2f\x8f\x9b\x82\xb1\xb6\xbb\xf5\x36\x6e\xbe\x9b\xbb\x7e\x86\x15\x8d\x1c\x0e\x43\x6a\x54\x33\x79\x0e\x46\xe2\x3a\xa1\xbf\x73\x83\x6e\xac\xb9\x42\x72\x14\xe6\x49\x1c\xe9\x3c\xbc\x19\x8f\x87\xbd\xc6\xfa\x7d\x20\xe1\xc3\x01\xd5\x35\xa6\x28\x1f\x5a\x96\x80\x90\xa0\xc6\x5c\xa6\x52\xd8\x6d\xd3\x9d\x85\xb3\x87\x94\x43\x30\x1a\x0d\xe7\x48\x2d\x92\x57\x6f\xcb\xb6\x6f\xb7\x8d\xe0\x8d\xf4\xeb\xf6\x5b\xb4\x42\x7f\xb3\x2d\xf1\x70\xba\x73\x01\xa9\x29\x0a\xd4\x59\xcd\xa6\xe6\x70\xeb\x7a\x7e\xc1\x53\x38\xaa\xd1\x1a\x37\x75\x97\x56\x23\x70\xae\xcc\xa6\xb6\xc2\x0e\xad\x90\x0e\x2a\xc2\x0d\xee\xdb\x0b\xdb\x36\x86\x5e\x55\x89\x92\x29\x71\x8f\xc3\xe9\xfd\xb0\x5d\xa6\x2c\x45\x3e\x58\x13\x39\xba\x87\x5c\x54\xca\x8f\x9c\x13\xed\x57\x50\xee\xd5\x85\x52\x66\x43\xfb\x2d\x8f\xc6\xaa\x32\x04\x3b\x42\x2a\x4a\x91\x48\x25\xeb\x28\x64\x06\x52\xf9\xca\x22\x2f\x73\x64\x1c\xb7\xe8\x4d\xa7\xd4\x2d\xdf\x23\x0e\x8d\x0e\x0b\x78\xdb\x2e\xfa\xf1\xd5\xa9\xde\x5e\x07\xaa\xf4\x75\x70\xc3\x51\x63\xf8\xb7\x9f\x86\xfe\x70\xd9\x06\x60\xdb\x41\xa5\x42\xa5\x95\x6a\x54\x16\x85\xa9\x34\xcf\x17\x9d\x50\x08\x0f\x42\x55\x48\x89\x54\xbb\x1c\xad\x0d\x3d\x57\xf0\xb5\x71\x60\x3e\x1a\x8f\x30\x87\x0b\xdf\xeb\xda\x13\xf4\x1b\x44\x4d\x79\x8a\x01\x7f\x1d\x1d\x0f\x66\x21\xf0\xee\x91\xb6\xd4\x4e\xd4\x3b\x58\x3a\x78\xe4\x0d\x5d\xe2\xa0\x67\xc7\xd1\xf7\x27\xb4\x54\xf7\x3d\x35\x6c\xd9\x34\x67\xf2\xa2\x23\x78\x7c\x9a\xb3\x70\x70\x08\xa5\xb6\x50\xa2\x4d\x51\x7b\x22\xe8\x2b\xec\xf5\xa8\xf5\xa8\xc0\xa3\x2d\x38\x30\x13\xe1\xa4\x83\xd2\x48\xed\x07\x7c\x85\x16\x39\xa3\x64\x46\x37\x5d\x17\x35\x57\x08\xeb\xdb\x61\xaf\x83\xcd\x9a\xb8\x67\x2a\x32\xea\x49\xa8\xcb\x25\x6f\xb9\xbf\x3d\x97\x8f\x27\xdf\xdd\xd7\x95\x41\x28\x8b\x22\xdb\xb6\x93\xd4\x9d\x39\x06\x0e\x8e\x67\xff\x49\x85\x23\x6c\x53\x41\x5f\xa4\x77\x60\x4a\xb4\x75\xf5\x1c\xfa\x38\x55\x61\xed\xa5\x45\xb5\xa5\x44\x83\xb6\x90\x5a\x3a\x1f\xba\xf3\x15\xda\xde\x4e\xc6\xbb\x21\x08\x55\x49\x17\xfe\x43\x73\xa8\xc9\xa1\xb4\x98\x4a\x27\x8d\x8e\xf6\x49\x7f\xe5\x17\x50\x9b\x34\xf4\xba\xbf\x37\x4c\x7f\x30\xed\xa8\x7f\x8e\xa8\xdb\xf9\x3a\x5a\xc8\x0c\x3a\x42\x6c\x29\x8e\x7b\x77\x3b\xdb\xc3\xc2\xa2\xaa\xd5\x5d\xcb\xb2\x75\x2f\x7a\x71\xbf\x11\x4a\xa1\xbf\x6f\x86\x7f\x94\x2c\x67\xc0\x4d\xe6\xd6\xaf\x49\x2e\x2a\x17\x6a\x31\x4f\xa1\x36\x1a\x2d\x14\x72\xb5\xf6\xb0\x11\xba\xce\xc8\x4c\x44\xf6\xa3\xf0\xd9\xd1\x17\x73\x02\x0a\x89\x92\x1a\xc5\x3f\x1e\xa8\xb3\x3e\x7e\xb3\xb1\xb3\x76\xb9\x45\x69\x71\xa4\xa2\x53\xb1\xf8\x89\x29\x01\xbc\x7a\xc5\xdf\xea\xba\x0c\x0b\x38\xa0\x2a\x5d\x87\x49\x17\x9b\x52\xd3\x23\x99\x81\x15\x7a\x85\x20\x23\x84\xdf\x8f\x67\xaf\x3f\x1f\x3c\x53\xf9\xb9\xc6\xb5\xf9\x77\x09\xad\xd9\xa3\x15\xb9\x2e\xc6\x7f\x66\x0a\xb5\x57\x35\xdf\x87\xea\x53\xb7\x8c\xcc\xa7\x5a\x43\x38\xa1\x31\xf3\x61\xc5\xe8\xaa\x87\x5c\xaf\x4d\xdb\x3c\xab\xe9\x44\x70\x16\xc7\x07\xd4\xbe\xe2\x6c\xd0\x97\xd5\xcd\xb1\xdc\x46\xfa\x74\x9d\x18\x62\xdd\x8d\xe9\xb3\x56\xee\x9a\xe3\xba\x99\xac\x43\x52\x05\xb1\xdc\x85\x0e\x94\x6b\x89\x2b\x7d\xd3\x26\xcc\xca\xf7\xc8\xc6\x68\xed\x5a\x40\xf7\xad\x77\xf5\x81\x79\xc4\x25\xbf\x8c\x43\xd1\x3f\xbf\x69\x44\x0c\x51\x84\xd3\xf0\xa3\x80\xe9\x12\x1d\x5c\x62\x26\xc5\xac\x19\x61\x71\xf9\xe6\x99\xb8\xb5\xe8\x4a\x23\x33\x42\x93\xe7\x68\x54\xc8\xa3\x5d\xf6\xc1\xbb\x47\x66\x54\x39\x4f\x2f\x9e\x1c\x94\xc6\x71\x2d\x73\xce\x1c\x22\x35\x05\xba\xd0\x0d\x10\x38\x4c\x1d\xe9\x4d\xec\xaa\x84\x57\x08\x17\xbc\x24\xc1\x0c\xd6\x68\xb1\xeb\x38\xf1\x01\x15\xe5\xb0\xa8\x30\xff\x96\x4a\x89\xc8\xd8\x55\x8c\x7a\x7e\xfb\x89\xbb\xd1\xf8\x1f\x98\xc4\xbf\xde\xdc\x5c\xc5\xbf\x08\x27\x53\x77\x67\xf2\x3b\xfe\x7a\x79\x71\xf9\xee\x8e\x7f\x48\xdc\x53\xbe\x35\xf7\x89\x58\x1f\x35\x6e\xb6\xbf\x6d\x18\xb6\xec\xf9\xb4\x75\x49\x7f\x76\x5f\xb4\x9b\x97\xed\xa7\xa7\x82\x01\x4e\x41\xc9\x14\xb5\xe3\xdf\xe5\x8c\xe5\x2b\xf2\xa6\x85\xc4\x95\xd9\x23\xa3\x10\x56\xb9\x66\x58\xd6\xec\xbf\x69\x7e\xad\x19\xcc\x54\xc3\xa8\xa4\x19\x29\x11\x1d\x65\xc2\x49\x41\x13\x24\x65\x61\x6a\xd9\x73\x80\x0f\x41\x93\x7d\x17\x20\x35\x2e\xda\xb9\xd4\x13\x50\xde\xf5\x46\x57\xcf\x8e\x2e\x87\xd2\x60\xd9\xdb\xf7\x0c\x4e\x8d\xbb\xe3\x63\x69\x98\x76\xdd\x5e\x7f\xa8\x07\x4e\x94\x0c\x3c\x16\xc0\xbf\x7f\x01\x3e\x7a\xb4\x54\xa7\x9c\xf4\x18\x8d\xc1\xd5\x47\x2a\xd9\xf6\xa7\x81\x84\xce\x17\x84\xa8\x1d\xfc\xfd\xa2\x4c\x4a\x67\x98\x66\x90\xd8\x32\x44\x2e\x3b\x56\xae\x24\x1d\xd5\x51\x5b\x86\x79\x2f\xb4\xde\x05\x9d\x48\xe5\x3f\x32\x04\xbe\x83\x17\x8c\x81\x97\x63\xd3\xdb\x6f\x93\xff\x04\x00\x00\xff\xff\xef\x62\x80\x1f\x2e\x20\x00\x00"

func metadataviewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_metadataviewsCdc,
		"MetadataViews.cdc",
	)
}

func metadataviewsCdc() (*asset, error) {
	bytes, err := metadataviewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MetadataViews.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0xf2, 0x4a, 0xd2, 0x69, 0xb7, 0x6a, 0x56, 0xbc, 0xaa, 0xe7, 0x24, 0xc9, 0x55, 0x63, 0x1b, 0xe0, 0x2b, 0xc, 0x46, 0xa5, 0x6f, 0x21, 0x25, 0x54, 0x10, 0x95, 0x2c, 0x12, 0x7d, 0x63, 0xfa}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x8f\xdb\xba\x11\xbe\xeb\x57\xcc\xcb\x03\x9a\xdd\xc0\x6b\xf7\x50\xf4\x60\x20\x68\xda\xb7\x6f\x01\x5f\xb6\x0f\x5b\x17\x3d\x04\x01\x4c\x8b\x23\x9b\x08\x45\x2a\x24\x65\xc7\x0d\xf6\xbf\x17\x33\x24\x25\xca\xf6\x26\x9b\x5b\x73\x89\x57\x22\xbf\x99\xf9\xe6\x9b\x8f\xd4\xe2\xdd\xbb\xaa\xfa\xf5\x57\x58\xef\x11\x1e\xb4\x3d\xc2\xa3\x35\x77\x0f\xbd\xd9\xa9\xad\x46\x58\xdb\xcf\x68\xc0\x07\x61\xa4\x70\x92\x17\x6e\x1e\xad\xc9\xef\xf9\xf5\x06\x6a\x6b\x82\x13\x75\x00\x65\x02\xba\x46\xd4\x58\x55\x84\x37\xfc\x09\x61\x2f\x02\x08\xad\xc1\x58\x73\xd7\x64\xf4\xc0\xe8\x79\xb7\x87\xda\xf6\x5a\xd2\xdf\x8d\x75\x2d\x04\x3b\xaf\x56\x0d\x08\xe8\x3d\x3a\x38\x0a\x13\x3c\x04\x0b\x12\x3b\x6d\x4f\x20\xc0\xe0\x11\x4c\x13\x86\xfd\x33\x08\x7b\x54\x6e\xcc\xe6\xc8\x70\x06\x51\x56\xc1\x82\x6a\x3b\x8d\x2d\x9a\x40\xcb\xe0\xbc\x88\x31\xd7\x39\xe7\x7e\x89\xb3\x17\x07\xca\x18\x1a\xab\x89\x26\x2a\x86\x80\x5c\xaf\xd1\x83\x30\x12\x8c\x68\x95\xd9\x55\x5c\x6a\x98\x54\xef\x3b\xac\x55\xa3\xd0\xcf\x13\x83\x0f\xeb\x0d\x38\xf4\xb6\x77\x99\xaa\xda\x3a\x1c\x1e\x41\x38\x75\x89\x33\x87\x9d\x43\x8f\x54\xbb\x30\xf0\xf8\xb0\x06\x65\x18\xdd\xb7\xc2\x8d\xb5\x27\xe0\xdf\xac\xd6\x58\x07\x65\xcd\x06\x9e\x26\xf8\x23\x34\xa1\xfa\x60\x1d\x65\xcd\xd4\xbe\xf5\x8c\x5b\x0f\x7b\xe7\xd5\x8a\x5a\x59\xeb\x5e\xf2\xa2\x06\x8f\xd0\xf4\x86\xdf\x71\x0b\x04\x33\x40\x59\xd8\xa3\x41\x47\x8f\x50\x78\xa5\x4f\x55\x6b\x0f\xa9\xad\x9e\x12\x25\x5a\x6c\x1f\xc0\x36\xbc\xba\x0c\xc1\xf9\xfe\xe1\xec\x41\x49\x74\x1b\x5e\xb9\x79\xc2\x1a\xd5\x81\xfe\x1c\xd2\x1d\x48\xf4\x5c\x87\x2f\x9f\x80\xc4\x5a\x0b\x87\x45\x72\x47\x15\xf6\xe0\x6d\x8b\xd0\x39\x64\xd0\xce\x7a\xa6\x49\x2a\x5e\x51\x25\x56\xbf\xf4\xca\x21\x27\x35\x72\x56\x74\xb7\x46\x17\x84\x32\xa9\xa7\x0c\xb4\xc5\xbd\x38\x28\xeb\x86\x69\xf0\x51\x29\x27\xa0\x14\x3c\x76\xc2\x89\x80\xb0\xc5\x5a\xf4\x94\x66\x80\x9d\x3a\xa0\xe7\x18\xac\x60\xfa\x21\xb6\x4a\xab\x70\xa2\x48\x7e\x4f\xfb\x04\x38\x6c\xd0\xa1\xa9\x91\x44\x1a\x15\x5c\xa6\x44\xe9\x5a\xa3\x4f\x80\x5f\x3b\xeb\x13\x5e\xa3\x50\xcb\xa8\xba\xb1\x76\x65\xc0\x1a\x04\xeb\xa0\xb5\x0e\xab\xc4\xf9\x48\xd7\x1c\x56\x34\x83\xde\xa6\xc4\x28\x29\x7f\x9e\x55\x2b\x3e\x23\xd4\xbd\x0f\xb6\x1d\x9a\x90\x48\x9b\x0c\xd0\xb4\x11\x34\x96\x16\x0e\xc2\x29\xdb\x13\xa4\x32\xbb\xd4\x0b\x82\x8f\x7a\x98\x57\xd5\x3f\x4e\xd0\x7b\xe2\x73\x40\xe6\x12\x46\xa0\x59\x4a\xca\x36\x2c\xc9\xa9\xc6\x3d\xd4\xc2\x80\x47\x23\x2b\xda\xe5\xa2\x58\xb2\xda\x3a\x44\x77\x17\xec\x1d\xfd\x3f\xe3\xd8\x24\x3c\x6a\x99\xd9\x51\x7e\x1c\x84\xa7\x99\xd2\x12\x50\x23\xa1\x6a\xd0\x28\x77\xe8\xaa\x8b\x71\x5a\x5b\x0e\x95\xa7\x8e\x54\x6f\x6c\xd8\xa3\xe3\x14\x67\x83\x2d\xb1\x37\x78\xe2\xe6\xc4\xd0\xd2\x89\x38\x1a\x8f\x0f\xeb\xaa\x71\xb6\xbd\xe8\x29\xfb\x94\x81\x3a\x3b\x88\xc4\xce\x7a\x15\x86\x4e\x82\x35\x93\x58\x6f\x7d\x35\xd5\x68\x6d\xa9\x13\x21\xca\x37\x38\x61\x7c\x83\x6e\x5e\x55\xef\x16\x55\xb5\x58\xb0\x93\xb7\x24\xde\x38\xd5\xe7\xd6\x3c\x87\x7f\x32\x74\xf9\x96\x9a\xa5\x35\x6d\x56\x6d\x67\x5d\x88\x6d\x29\xfa\xad\x7c\xe1\xed\x8b\x45\xd5\xf5\xdb\x2b\xd0\x97\xae\xfa\xad\xaa\x00\x00\x52\x56\xc1\x06\xa1\xc1\xf4\xed\x16\x1d\x7b\x42\x6c\x1d\x2b\x55\xf9\xe8\x7a\xca\x00\x7e\x55\x3e\xf0\x44\xd0\x5e\x0a\x75\x10\x2e\x6e\xfe\x57\xdf\x75\xfa\xb4\x84\x7f\xaf\x4c\xf8\xeb\x5f\x06\xf0\xdf\x0f\x31\x4d\x11\x00\x5b\x15\x02\x4a\x38\x12\xc7\xa9\x0f\x45\xaa\x54\x87\x0a\x4a\x68\xf5\x5f\x94\x69\xfb\x10\x06\x19\xe6\xb7\xb4\x78\x35\x2e\xbc\xb9\xbd\x16\x4a\xf9\x69\x34\x91\x0e\x34\xe5\x07\x25\x98\x59\xde\xa7\x8c\x54\xb5\x08\xac\xc6\xc1\x38\x2f\x7c\x31\x01\x07\x38\x8a\x02\x04\x48\x47\xf3\x32\xdb\xc5\x02\x56\x17\x7b\x95\x07\x63\x43\xf4\x5d\x10\x75\x6d\x7b\x13\xde\x7a\x36\x7b\xb1\xc3\x19\x6c\x08\x66\xc3\xad\x86\x2d\xc2\xc6\x28\xbd\x99\x5f\xe7\xe0\x3f\x29\xf4\x8d\x92\x99\xec\x19\x67\xb1\x84\xbf\x4b\xe9\xd0\xfb\xbf\x5d\xa5\xe4\x25\x3e\x92\xc6\x51\xf2\x20\x4d\x0e\x82\xb3\xaa\x42\x66\x2a\x59\xdd\x6b\x88\x2a\xd1\x5f\x28\xe8\x3e\x2e\x99\xd4\x13\xec\xb5\x6a\x56\xd3\x4b\x4b\x92\x90\x1f\xce\xff\xf1\x7a\x72\x1e\xe9\xf2\xd0\x82\x15\xa9\xef\x1b\xaf\x28\xe6\xa0\x37\xea\x4b\x8f\xb0\xba\x4f\xa4\x89\x7a\xcf\x32\xdd\x0b\x3f\x2c\x25\x40\x8d\x01\xc6\x84\xf9\xd5\xf3\x90\xe7\x53\x3c\xc3\xda\x81\x7b\xf2\x93\x94\x1c\xa9\xec\x9a\x81\x52\x0d\x79\x3f\x5f\xa5\x1a\x65\xe2\x19\x94\x32\x27\x53\x42\x19\x1d\x8f\x30\x13\x1e\x3b\x3c\xd5\x72\x59\xeb\xe3\xc3\x7a\x79\x5e\xe6\x0f\x73\x2f\x38\xb6\xd0\xa2\x54\x74\x72\x66\xb9\x7b\xc8\xb6\x59\x98\xe6\x2b\xb8\xce\x97\x89\x29\xdf\x83\x27\x3b\xa4\xcb\xc9\x70\x8d\x1a\x62\x14\x9a\x22\xd7\x8b\x8b\x54\x80\x78\x1a\x47\x46\xdc\xa4\xb4\xa6\x37\x03\xec\x4d\xfe\xb1\xba\xcf\xb5\xde\x2e\xe1\xc3\x94\x0f\xde\x48\xf7\x90\xe9\x23\xfa\xe7\xd0\xf7\x3a\xcc\x95\x84\xf7\xef\xa1\xc4\x7a\x43\x42\x59\xdd\x67\xe5\x8f\x5e\x10\x67\xaa\xed\x7d\xa0\x21\xe6\xab\xa0\x68\x11\x44\x1c\x17\xba\xd9\xa0\xa7\x51\x58\xdd\xbf\x99\x44\x7b\xae\xa6\xbf\x7e\xd0\x8d\x34\x53\x3e\xf3\xf0\x53\xad\xc8\x17\xb9\xec\xff\x29\x50\x3e\xe9\x82\xf8\x3c\x36\x42\xf0\x2f\xe1\x76\x3d\x4b\x99\x7a\x20\xa4\x2c\x5b\x70\x16\xba\x08\x5f\x76\x24\x81\xdf\x30\x3f\xb1\x05\xb7\x2f\x17\xca\x03\x33\xb8\x64\x3a\xc6\x6b\xdb\xb6\x7c\xd7\xca\x1b\xba\x7e\xab\x95\xdf\x43\x63\xdd\xf0\x71\x31\xc9\xe5\x85\xfa\xc7\x8c\xff\x20\x84\xfa\x6c\x36\xbe\x9b\x6e\xb9\x68\x87\x61\x75\xef\x6f\x6e\x97\xf0\x31\x6a\xeb\xd3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xb5\xdd\x2e\xe1\x4f\x79\x58\xaf\x1b\x46\x2a\x28\x0d\x80\xa9\x1d\x5d\x27\x26\x9f\x1f\x85\x4d\x6c\x31\xdf\xb4\x65\xfe\xfa\x18\xee\x06\xe4\x34\xd9\x5f\x5e\x14\xc6\x48\xc7\x72\x98\xd2\xd9\x20\x92\xd9\x35\xba\x4a\xd9\xdc\x2b\x7e\x27\x1c\xdf\x50\xf7\x56\xcb\xd1\x95\x53\x3e\x57\x24\x92\xef\x0d\x74\x80\x48\x5a\xbb\x84\x0f\xdf\x22\x3f\x4b\xda\xfb\x5c\xfd\x5f\xd8\xc4\xf7\x06\x24\xce\xc7\xe5\x40\x8c\xb9\x78\x90\x03\x39\x25\xd0\xb0\x29\x44\x17\x49\x1b\x95\x04\xe1\x9c\x38\xbd\x4e\x8d\x25\x60\x54\x22\x38\x0c\xbd\x33\x69\x62\x9d\x38\x65\x7b\xa2\x77\x71\xa6\x1c\xe6\x9e\xd4\xd7\x7b\xf2\x82\xae\xcb\x60\x4f\x39\x4a\x52\x37\xca\xf1\x2b\x29\xde\xc4\xcb\x2f\xe1\x2b\x71\x16\x0b\xf0\x76\x3c\xbf\x63\x73\xf8\xf3\xc1\xa1\x90\x20\x45\x10\x4c\x11\xdf\xc1\x5b\x0c\x7b\x2b\xd3\xa9\xa3\xc2\xcf\x4c\xd8\xb9\xc7\x3b\xbc\x62\xf1\x1e\x75\x33\x1f\x54\xf8\x51\xc9\x4f\xf0\xcb\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xe2\xc6\xf7\xde\xcb\xaa\x7e\x79\xad\x8f\xd7\x0e\x45\xc0\xdf\xdb\x2e\x9c\x8a\x0f\x86\xf8\x94\x5b\x86\xf4\xea\xd2\xc9\x21\x7e\x4e\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x86\xe9\x24\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x63\xf1\xcf\xe9\x34\x8c\x31\x64\x39\x8a\xf9\x18\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x33\x4d\x81\x27\xe0\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x61, 0xca, 0x9d, 0xaa, 0x66, 0x36, 0xdf, 0xbc, 0x51, 0xdb, 0x7b, 0x51, 0xd8, 0x3d, 0x6f, 0x4e, 0x9c, 0x8e, 0x50, 0x28, 0x7c, 0x18, 0x1d, 0x2, 0xb2, 0xc2, 0x2b, 0x26, 0xa1, 0xfe, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleNFT.cdc":       examplenftCdc,
	"MetadataViews.cdc":    metadataviewsCdc,
	"NonFungibleToken.cdc": nonfungibletokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"MetadataViews.cdc": {metadataviewsCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
