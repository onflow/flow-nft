// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleNFT.cdc (3.833kB)
// ../../../contracts/NonFungibleToken.cdc (4.826kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x4d\x8f\xdb\x36\x13\x3e\x4b\xbf\x62\xde\x1c\xf2\xca\x68\xd6\x4a\x8b\xa2\x07\x63\xb7\x9b\x62\x37\x06\x7c\xa8\x11\x24\x2e\x7a\x08\x02\x84\x16\xc7\x36\xb1\x12\x69\x90\x23\x3b\xee\xc2\xff\xbd\x18\x52\xdf\x96\xb3\x69\x10\xac\x65\x71\x66\xf8\xcc\x33\x9f\x4e\x53\x58\xed\x94\x03\xe5\x40\x68\xc0\x6f\xa2\xd8\xe7\x08\x8a\xff\x16\xa8\x49\x90\x32\x1a\xcc\x06\x04\xcc\x73\x73\x84\xa5\xd1\x37\xf3\x52\x6f\xd5\x3a\x47\x58\x99\x27\xd4\x71\x9a\xc2\x82\x58\x5f\x1b\x82\xbd\xb0\xc4\xe2\xb4\x43\x30\x9b\x8d\xca\x94\xc8\xc1\x91\xd0\x52\x58\x09\xeb\x92\x40\x11\x08\xe7\xca\x02\x25\x90\x81\x35\xb2\xfe\x01\xed\x09\x9c\x2a\x54\x2e\x2c\xbf\xdd\x99\x23\x14\x42\x9f\x60\x39\x5f\x39\x38\x9a\x32\x97\x2d\x24\x6f\x3b\x33\x16\x61\x53\xea\x8c\xf1\x89\x5c\xd1\x69\x1a\xc7\xaa\xd8\x1b\x4b\x8c\xb1\x86\xe8\x11\xc2\xc6\x9a\x02\xde\x7e\x7b\xfb\x4b\x1c\xef\xcb\x35\x64\x46\x93\x15\x19\xc1\xfb\xe0\xed\x72\xbe\x9a\x5d\x2a\x3d\xc7\x31\x00\x00\x2b\x1c\x3c\x2a\x12\xf9\xa7\x72\xbf\xcf\x4f\x33\xf8\x6b\xa1\xe9\xb7\x5f\x5b\x01\x3c\x30\xae\x87\xca\xee\x42\x2b\x52\x22\x57\xff\xa0\x4c\x26\x03\x99\xbf\x15\xed\xa4\x15\xc7\x44\xc9\xda\xcc\x1b\x8f\x6f\x06\x7f\x48\x69\xd1\xb9\xfb\xa1\xca\x23\xee\x8d\x53\xd4\xd3\x20\xd3\x95\x6f\x14\x2c\x3a\x53\xda\x0c\x61\xd4\xa5\xe9\x62\x39\x5f\xc1\xb3\x97\xae\x35\x72\x24\x68\x0d\xc7\xbd\x33\x76\xbb\x40\x12\x52\x90\x98\xc1\xf3\x27\xb2\x4a\x6f\x67\x10\x3e\xcf\xad\xac\xd2\x8c\x4e\x2b\x5a\x3c\xd6\x86\x26\x9d\x6b\xf8\x9f\xc3\x7c\x33\x55\x12\xee\x20\xc8\x5d\x1e\xd6\x17\xc1\x1d\x3c\x9f\x9b\xe3\xf0\x74\x1e\xf1\xf0\xc1\xe4\x39\xfa\xe8\x8f\x38\xfa\xc1\x9a\x83\x92\x68\xdf\x5c\x1e\x7d\xc4\x0c\xd5\x61\xf4\xa8\x35\xf9\xa1\x5c\xe7\x2a\xeb\xf8\x90\xa6\x20\x55\xc8\x35\x7b\xe2\xfc\x66\x26\x33\xa3\x37\xc6\x16\x4a\x6f\x81\xd8\x80\xeb\x8a\xb3\x00\xd7\x54\x8b\x98\x4e\x7b\x84\xa3\xa2\x1d\x17\xda\xd7\xc0\xd3\x57\x58\x3c\xc2\x46\x61\x2e\x2f\x98\x37\x47\x8d\x92\xf3\x7f\x06\xef\x9e\x83\xf4\x88\xa7\xcb\xf9\x6a\x10\x09\x48\x46\xc9\x6f\xcc\xc1\xed\x4d\x9f\xe1\x2e\xea\x63\x95\x9e\x60\xb1\x30\x07\xf4\x3d\x81\x3d\xf1\x15\x14\xea\xae\xe6\x08\x84\x96\x10\x84\x14\x71\xd1\xfa\x63\x91\xe7\x68\x7b\xbe\x6c\x4a\xdd\x98\x4d\xea\x87\x4e\xa6\xcc\xe0\xdd\x98\x57\x03\x1f\x38\x4f\x3d\xc9\x0c\xbf\xef\xd0\x34\x60\x4d\x9e\xf0\x34\x83\xf6\x82\x09\xdc\xdf\xc3\x5e\x68\x95\x25\xaf\x0a\xe5\x1c\x87\x69\x39\x5f\xbd\x9a\xc4\x3d\xc3\x58\xa8\x41\x55\xfa\x6b\xa6\x4a\xd6\x75\xd9\xdc\x66\xef\xa7\x22\xd4\xdc\xc0\x86\x45\x2a\x2d\x23\xf3\xaa\x57\xa8\x95\xa1\x8c\x81\xc4\x13\xf3\xea\x69\x65\x0a\x85\x94\x3d\x06\x1b\x82\x5d\x27\xe5\xba\x86\x1a\x25\x16\x5f\x3c\xd6\x8a\x4a\x82\xb0\x56\x9c\x2e\xc8\xaf\x2e\x4e\x3c\xb8\x2b\x6c\x0f\x53\xa6\x47\x77\x78\x10\xee\x7f\xf0\xae\xed\x98\xac\x15\x5f\xe8\xb4\xad\x04\xee\x1a\x22\xfb\x62\xec\x81\x94\x1e\xb2\xc6\x63\x65\xbc\xf2\xa1\x53\x63\xc7\x9d\xca\x76\x4d\x1a\xfa\x71\x92\x4b\x30\x1a\x2f\xee\x34\xb9\x5c\x8d\x67\xc6\x67\x25\xbf\x34\x0e\x8c\x84\xbd\xdb\x59\x39\xde\xdc\x55\x5f\x8e\xb6\x44\x47\xd6\x9c\x9a\x7b\xaf\xc4\x7b\x8b\xb4\x78\x74\x55\x6e\xf8\x42\xf2\xe1\xa9\x87\x23\x9f\xd1\x4e\x10\x08\x8b\xa0\xf4\x20\xf6\x17\x41\x0c\xd6\x92\xc9\x0c\x3e\x07\x7e\xbf\x0c\x22\x56\xe5\xe0\xa0\x34\x9e\xf0\xe4\xae\xe0\x5b\x1b\x6b\xcd\x91\xb3\x70\x8b\x14\x1a\xd5\x06\x2d\x6a\xee\x54\xa6\xae\xfb\xeb\xc0\xd2\x14\x9c\x09\x1e\xb4\x85\x0f\x99\xd0\x60\x51\x48\x50\xe4\x9a\xd9\xe1\x33\x96\x05\xea\xb7\x3b\x23\xdd\x85\x87\x0d\x9e\xce\xa0\x9b\xcc\xe0\xf5\x0f\x34\x87\xca\xf7\xd7\x23\xd1\x17\x6e\xdc\xc2\x18\x29\x55\x60\x2f\xfa\x67\x1d\xf0\xbe\xf9\xf1\x19\x95\xa6\xec\x10\x0f\x8f\x7a\x39\xa9\xa2\xac\x4f\x46\xa3\xe7\xc7\x33\x41\x06\x32\x8b\x82\x10\x84\x2f\x03\x2c\xf6\x74\x1a\xf2\x5c\x53\x13\x24\xdf\xb3\x48\x3b\xa3\x92\xd1\xce\xd9\x9e\x77\x9c\x68\xfa\x53\x7d\x67\xd7\xca\x00\xfd\xc7\x66\x5c\x05\xd8\x20\x64\xa1\x34\x18\x0b\xce\x70\xe8\xb8\x8d\xd6\x9b\x5a\x58\xcc\xcc\x51\x57\x9b\x5c\x5d\xde\xbc\x1b\x92\x81\x42\x69\xf2\xce\x35\x74\xa5\x69\x1c\x0d\xf7\x94\x3f\x95\x26\xb4\xbc\x6e\x45\x51\x9a\x7a\x25\x8e\x30\x7f\xba\x8a\x1c\xfe\x1e\x06\xa7\xff\xba\x78\x0c\xa2\x9c\x56\x75\x57\xe5\xff\x21\x57\x2d\x66\x6a\xaf\x90\xb5\x3b\xc3\xaa\xf4\xfd\x9f\x76\xa8\x6c\xf7\x75\x93\xf3\x71\x14\xd5\x6c\x57\x08\x92\xc6\xd0\x0c\x5e\x3f\xbf\xb8\x2c\x9c\x27\xc1\x05\x06\xd6\x8b\x2c\x27\x5b\x14\x45\x3c\xd2\x35\xfa\x7a\x6b\xe3\xe0\xb3\xbd\x5a\x9c\x3a\xad\xb5\xb3\x6b\x4e\x6a\x9b\xdf\x71\xf4\xff\x0e\x44\x96\x99\x52\x53\xcf\xcd\xae\x6f\x51\x23\x3c\x1d\x8c\x83\xdb\x9b\x80\x6a\xd0\xe4\xc6\xd1\xc0\xdd\xb5\x83\x9f\xaa\x8a\x4d\x7e\x9e\xc4\x51\x74\x8e\xa3\x73\x1c\x47\x7e\x31\x9c\xf4\xd7\xa8\x76\x39\xf6\x4e\x78\x1b\xe0\xbc\x91\x46\xcc\x17\x5a\xff\xda\xb7\xbd\xde\xf5\x50\x13\xfc\xd0\x0d\x65\x95\x53\x9c\x16\x4e\x1c\xb0\x1a\xaa\x8e\x8c\x15\xdb\x76\x6c\xf0\xc8\xe8\x64\xc0\x77\x8a\xa2\x81\x52\xb1\x3b\x65\xab\xc9\xed\x4d\xab\x1d\x46\x46\x5a\x5d\x91\x2e\xe7\xab\xd6\xc8\xa4\x87\xb8\x49\x89\xaa\x3b\x64\x62\x2f\xd6\x8a\x7f\xb7\xc0\xc6\xd8\x6b\x4d\xb6\x77\x7b\xae\xf4\xd3\xed\x8f\x64\xe2\xef\x49\x7f\xe0\x86\x2b\xfb\xe8\xde\xf4\x44\x48\xd8\x2d\xd2\x35\x4f\x1a\xd1\xc9\x78\x10\xaa\x0a\xfe\x2f\x01\x28\x82\x4a\xaf\x12\x82\x99\x17\xb8\x0f\x8a\x97\xbc\x07\xe5\x0e\x40\x3f\xe0\xc7\x7f\x91\x45\xe7\xf8\x1c\xc7\xff\x06\x00\x00\xff\xff\x34\xa8\x82\x60\xf9\x0e\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0xfc, 0x1c, 0xd3, 0x92, 0x3, 0x53, 0xaa, 0xfd, 0x92, 0x1c, 0xb5, 0xba, 0x6b, 0xd4, 0x72, 0x60, 0x4f, 0x19, 0xdd, 0xc, 0x6d, 0xd2, 0x9, 0x18, 0x17, 0xbc, 0x3c, 0xc2, 0xc9, 0xd4, 0x12}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xc1\x8e\x1b\xb9\x11\x3d\x6f\x7f\x45\xad\x17\x88\x67\x0c\x8d\x94\x43\x90\x83\x00\x23\x4e\x76\x76\x00\x5d\x26\x8b\x89\x82\x1c\x16\x06\x44\x35\xab\x25\xc2\x6c\xb2\x4d\xb2\x25\x2b\xc6\xfc\x7b\x50\x45\xb2\x9b\x2d\x69\xec\xf1\x2d\xbe\x58\xd3\x4d\xbe\xaa\x7a\xf5\xea\x91\xbd\x78\xf7\xae\xaa\x7e\xf9\x05\xd6\x7b\x84\x07\x6d\x8f\xf0\x68\xcd\xdd\x43\x6f\x76\x6a\xab\x11\xd6\xf6\x13\x1a\xf0\x41\x18\x29\x9c\xe4\x85\x9b\x47\x6b\xf2\x7b\x7e\xbd\x81\xda\x9a\xe0\x44\x1d\x40\x99\x80\xae\x11\x35\x56\x15\xe1\x0d\x7f\x42\xd8\x8b\x00\x42\x6b\x30\xd6\xdc\x35\x19\x3d\x30\x7a\xde\xed\xa1\xb6\xbd\x96\xf4\x77\x63\x5d\x0b\xc1\xce\xab\x55\x03\x02\x7a\x8f\x0e\x8e\xc2\x04\x0f\xc1\x82\xc4\x4e\xdb\x13\x08\x30\x78\x04\xd3\x84\x61\xff\x0c\xc2\x1e\x95\x1b\xb3\x39\x32\x9c\x41\x94\x55\xb0\xa0\xda\x4e\x63\x8b\x26\xd0\x32\x38\x2f\x62\xcc\x75\xce\xb9\x5f\xe2\xec\xc5\x81\x32\x86\xc6\x6a\xa2\x89\x8a\x21\x20\xd7\x6b\xf4\x20\x8c\x04\x23\x5a\x65\x76\x15\x97\x1a\x26\xd5\xfb\x0e\x6b\xd5\x28\xf4\xf3\xc4\xe0\xc3\x7a\x03\x0e\xbd\xed\x5d\xa6\xaa\xb6\x0e\x87\x47\x10\x4e\x5d\xe2\xcc\x61\xe7\xd0\x23\xd5\x2e\x0c\x3c\x3e\xac\x41\x19\x46\xf7\xad\x70\x63\xed\x09\xf8\x57\xab\x35\xd6\x41\x59\xb3\x81\xa7\x09\xfe\x08\x4d\xa8\x3e\x58\x47\x59\x33\xb5\x6f\x3d\xe3\xd6\xc3\xde\x79\xb5\xa2\x56\xd6\xba\x97\xbc\xa8\xc1\x23\x34\xbd\xe1\x77\xdc\x02\xc1\x0c\x50\x16\xf6\x68\xd0\xd1\x23\x14\x5e\xe9\x53\xd5\xda\x43\x6a\xab\xa7\x44\x89\x16\xdb\x07\xb0\x0d\xaf\x2e\x43\x70\xbe\xbf\x3b\x7b\x50\x12\xdd\x86\x57\x6e\x9e\xb0\x46\x75\xa0\x3f\x87\x74\x07\x12\x3d\xd7\xe1\xcb\x27\x20\xb1\xd6\xc2\x61\x91\xdc\x51\x85\x3d\x78\xdb\x22\x74\x0e\x19\xb4\xb3\x9e\x69\x92\x8a\x57\x54\x89\xd5\xcf\xbd\x72\xc8\x49\x8d\x9c\x15\xdd\xad\xd1\x05\xa1\x4c\xea\x29\x03\x6d\x71\x2f\x0e\xca\xba\x61\x1a\x7c\x54\xca\x09\x28\x05\x8f\x9d\x70\x22\x20\x6c\xb1\x16\x3d\xa5\x19\x60\xa7\x0e\xe8\x39\x06\x2b\x98\x7e\x88\xad\xd2\x2a\x9c\x28\x92\xdf\xd3\x3e\x01\x0e\x1b\x74\x68\x6a\x24\x91\x46\x05\x97\x29\x51\xba\xd6\xe8\x13\xe0\x97\xce\xfa\x84\xd7\x28\xd4\x32\xaa\x6e\xac\x5d\x19\xb0\x06\xc1\x3a\x68\xad\xc3\x2a\x71\x3e\xd2\x35\x87\x15\xcd\xa0\xb7\x29\x31\x4a\xca\x9f\x67\xd5\x8a\x4f\x08\x75\xef\x83\x6d\x87\x26\x24\xd2\x26\x03\x34\x6d\x04\x8d\xa5\x85\x83\x70\xca\xf6\x04\xa9\xcc\x2e\xf5\x82\xe0\xa3\x1e\xe6\x55\xf5\x8f\x13\xf4\x9e\xf8\x1c\x90\xb9\x84\x11\x68\x96\x92\xb2\x0d\x4b\x72\xaa\x71\x0f\xb5\x30\xe0\xd1\xc8\x8a\x76\xb9\x28\x96\xac\xb6\x0e\xd1\xdd\x05\x7b\x47\xff\xcf\x38\x36\x09\x8f\x5a\x66\x76\x94\x1f\x07\xe1\x69\xa6\xb4\x04\xd4\x48\xa8\x1a\x34\xca\x1d\xba\xea\x62\x9c\xd6\x96\x43\xe5\xa9\x23\xd5\x1b\x1b\xf6\xe8\x38\xc5\xd9\x60\x4b\xec\x0d\x9e\xb8\x39\x31\xb4\x74\x22\x8e\xc6\xe3\xc3\xba\x6a\x9c\x6d\x2f\x7a\xca\x3e\x65\xa0\xce\x0e\x22\xb1\xb3\x5e\x85\xa1\x93\x60\xcd\x24\xd6\x5b\x5f\x4d\x35\x5a\x5b\xea\x44\x88\xf2\x0d\x4e\x18\xdf\xa0\x9b\x57\xd5\xbb\x45\x55\x2d\x16\xec\xe4\x2d\x89\x37\x4e\xf5\xb9\x35\xcf\xe1\x9f\x0c\x5d\xbe\xa5\x66\x69\x4d\x9b\x55\xdb\x59\x17\x62\x5b\x8a\x7e\x2b\x5f\x78\xfb\x62\x51\x75\xfd\xf6\x0a\xf4\xa5\xab\x7e\xad\x2a\x00\x80\x94\x55\xb0\x41\x68\x30\x7d\xbb\x45\xc7\x9e\x10\x5b\xc7\x4a\x55\x3e\xba\x9e\x32\x80\x5f\x94\x0f\x3c\x11\xb4\x97\x42\x1d\x84\x8b\x9b\xff\xd5\x77\x9d\x3e\x2d\xe1\xdf\x2b\x13\xfe\xfa\x97\x01\xfc\xb7\x43\x4c\x53\x04\xc0\x56\x85\x80\x12\x8e\xc4\x71\xea\x43\x91\x2a\xd5\xa1\x82\x12\x5a\xfd\x17\x65\xda\x3e\x84\x41\x86\xf9\x35\x2d\x5e\x8d\x0b\x6f\x6e\xaf\x85\x52\x7e\x1a\x4d\xa4\x03\x4d\xf9\x41\x09\x66\x96\xf7\x29\x23\x55\x2d\x02\xab\x71\x30\xce\x0b\x5f\x4c\xc0\x01\x8e\xa2\x00\x01\xd2\xd1\xbc\xcc\x76\xb1\x80\xd5\xc5\x5e\xe5\xc1\xd8\x10\x7d\x17\x44\x5d\xdb\xde\x84\xb7\x9e\xcd\x5e\xec\x70\x06\x1b\x82\xd9\x70\xab\x61\x8b\xb0\x31\x4a\x6f\xe6\xd7\x39\xf8\x4f\x0a\x7d\xa3\x64\x26\x7b\xc6\x59\x2c\xe1\xef\x52\x3a\xf4\xfe\x6f\x57\x29\x79\x89\x8f\xa4\x71\x94\x3c\x48\x93\x83\xe0\xac\xaa\x90\x99\x4a\x56\xf7\x1a\xa2\x4a\xf4\x17\x0a\xba\x8f\x4b\x26\xf5\x04\x7b\xad\x9a\xd5\xf4\xd2\x92\x24\xe4\x87\xf3\x7f\xbc\x9e\x9c\x47\xba\x3c\xb4\x60\x45\xea\xfb\xca\x2b\x8a\x39\xe8\x8d\xfa\xdc\x23\xac\xee\x13\x69\xa2\xde\xb3\x4c\xf7\xc2\x0f\x4b\x09\x50\x63\x80\x31\x61\x7e\xf5\x3c\xe4\xf9\x14\xcf\xb0\x76\xe0\x9e\xfc\x24\x25\x47\x2a\xbb\x66\xa0\x54\x43\xde\xcf\x57\xa9\x46\x99\x78\x06\xa5\xcc\xc9\x94\x50\x46\xc7\x23\xcc\x84\xc7\x0e\x4f\xb5\x5c\xd6\xfa\xf8\xb0\x5e\x9e\x97\xf9\xdd\xdc\x0b\x8e\x2d\xb4\x28\x15\x9d\x9c\x59\xee\x1e\xb2\x6d\x16\xa6\xf9\x0a\xae\xf3\x65\x62\xca\xf7\xe0\xc9\x0e\xe9\x72\x32\x5c\xa3\x86\x18\x85\xa6\xc8\xf5\xe2\x22\x15\x20\x9e\xc6\x91\x11\x37\x29\xad\xe9\xcd\x00\x7b\x93\x7f\xac\xee\x73\xad\xb7\x4b\xf8\x30\xe5\x83\x37\xd2\x3d\x64\xfa\x88\xfe\x39\xf4\xbd\x0e\x73\x25\xe1\xfd\x7b\x28\xb1\xde\x90\x50\x56\xf7\x59\xf9\xa3\x17\xc4\x99\x6a\x7b\x1f\x68\x88\xf9\x2a\x28\x5a\x04\x11\xc7\x85\x6e\x36\xe8\x69\x14\x56\xf7\x6f\x26\xd1\x9e\xab\xe9\xaf\xef\x74\x23\xcd\x94\xcf\x3c\xfc\x50\x2b\xf2\x45\x2e\xfb\x7f\x0a\x94\x4f\xba\x20\x3e\x8d\x8d\x10\xfc\x4b\xb8\x5d\xcf\x52\xa6\x1e\x08\x29\xcb\x16\x9c\x85\x4e\xe1\x7f\xfa\x29\xf7\x22\xc1\xde\x30\x33\x91\xfc\xdb\x97\x4b\xe4\x51\x19\xfc\x31\x1d\xe0\xb5\x6d\x5b\xbe\x65\xe5\x0d\x5d\xbf\xd5\xca\xef\xa1\xb1\x6e\xf8\xac\x98\x64\xf1\x42\xe5\x63\xae\xbf\x13\x42\x7d\x36\x15\xdf\x4c\xb7\x5c\xb4\xc3\xb0\xba\xf7\x37\xb7\x4b\xf8\x23\xaa\xea\xe3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xa9\xdd\x2e\xe1\x4f\x79\x4c\xaf\x5b\x45\x2a\x28\x49\xdf\xd4\x8e\x2e\x12\x93\x0f\x8f\xc2\x20\xb6\x98\xef\xd8\x32\x7f\x77\x0c\xb7\x02\xf2\x98\xec\x2c\x2f\x4a\x62\xa4\x63\x39\xcc\xe7\x6c\x90\xc7\xec\x1a\x5d\xa5\x60\xee\x15\xbf\x13\x8e\xef\xa6\x7b\xab\xe5\xe8\xc7\x29\x9f\x2b\xe2\xc8\x37\x06\x3a\x3a\x24\xad\x5d\xc2\x87\xaf\x91\x9f\x25\xed\x7d\xae\xfe\x2f\x0c\xe2\x5b\xa3\x11\x27\xe3\x72\x14\xc6\x5c\x3c\xc8\x81\x9c\x12\x68\xd8\x14\xa2\x7f\xa4\x8d\x4a\x82\x70\x4e\x9c\x5e\xa7\xc6\x12\x30\x2a\x11\x1c\x86\xde\x99\x34\xab\x4e\x9c\xb2\x31\xd1\xbb\x38\x53\x0e\x73\x4f\xea\xeb\x3d\x79\x41\xd7\x65\xb0\xa7\x1c\x25\xa9\x1b\xe5\xf8\x7d\x14\xef\xe0\xe5\x37\xf0\x95\x38\x8b\x05\x78\x3b\x9e\xdc\xb1\x39\xfc\xe1\xe0\x50\x48\x90\x22\x08\xa6\x88\x6f\xdf\x2d\x86\xbd\x95\xe9\xbc\x51\xe1\x47\x26\xec\xdc\xdd\x1d\x5e\x31\x77\x8f\xba\x99\x0f\x2a\xfc\x43\xc9\x8f\xf0\xf3\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xca\xc6\x37\xde\xcb\xaa\x7e\x7e\xad\x83\xd7\x0e\x45\xc0\xdf\xda\x2e\x9c\x8a\x4f\x85\xf8\x94\x5b\x86\xf4\xea\xd2\xc3\x21\x7e\x48\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x83\xe9\x0c\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x03\xf1\xcf\xe9\x1c\x8c\x31\x64\x39\x8a\xf9\x00\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x18\x00\x4f\xe7\xda\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6f, 0xd6, 0xbe, 0x88, 0x72, 0xd2, 0xc2, 0xe2, 0x8f, 0x5d, 0xb7, 0x54, 0xbd, 0x1d, 0x2c, 0x13, 0xf3, 0xeb, 0x6f, 0x25, 0x8e, 0x21, 0x9f, 0xac, 0x70, 0x1b, 0xe1, 0x21, 0x3e, 0xbe, 0x5f, 0xd0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleNFT.cdc":       examplenftCdc,
	"NonFungibleToken.cdc": nonfungibletokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
