// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../transactions/destroy_nft.cdc (914B)
// ../../../transactions/mint_nft.cdc (3.167kB)
// ../../../transactions/scripts/borrow_nft.cdc (581B)
// ../../../transactions/scripts/get_collection_length.cdc (465B)
// ../../../transactions/scripts/get_nft_metadata.cdc (5.57kB)
// ../../../transactions/scripts/get_total_supply.cdc (118B)
// ../../../transactions/setup_account.cdc (1.023kB)
// ../../../transactions/setup_account_from_nft_reference.cdc (1.458kB)
// ../../../transactions/setup_account_to_receive_royalty.cdc (1.493kB)
// ../../../transactions/transfer_nft.cdc (1.638kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _destroy_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x6e\x9b\x40\x14\xbc\xf3\x15\x53\x0e\x2d\x1c\x0a\x97\xaa\x07\x94\x36\x8a\xea\x46\xf2\x25\xaa\x52\xf7\x03\x96\xdd\x87\xd9\x76\xbd\x0f\xed\x3e\x4a\xaa\x28\xff\x5e\x61\xb0\x4d\x2c\x94\xbd\xd8\x62\xe7\xcd\xcc\x9b\x59\x7b\xe8\x38\x08\x1e\xd8\xdf\xf7\x7e\x6f\x6b\x47\x3b\xfe\x43\x1e\x4d\xe0\x03\xd2\xa2\x28\x35\x7b\x09\x4a\x4b\x2c\xaf\x31\x85\x36\x3a\x4d\x66\x82\xef\x4f\xea\xd0\x39\x7a\xb8\xdf\xad\x8d\x5e\x6e\xa7\xa1\xa4\x2c\x4b\xec\x5a\x1b\x21\x41\xf9\xa8\xb4\x58\xf6\x18\xac\xb4\x26\xa8\x21\x42\x79\x9c\x99\xa4\x25\x44\xbb\xf7\x14\x22\x34\x3b\x47\x13\x58\x79\x03\x43\x51\x02\xff\x8b\xb0\x92\x24\x0b\xa6\xcc\x9a\x0a\xbf\xb6\x5e\x3e\x7f\xca\xf1\x9c\x24\x00\x30\x2a\x3e\x52\x43\x81\xbc\x26\x48\xab\x04\x83\x75\x0e\x35\xa1\x8f\x64\xd0\x70\x38\x4a\xf1\xe0\x29\x7c\x58\x4a\x1d\xc7\x1d\xc9\xe2\xd3\x23\x35\x15\xde\x2f\xb6\xfa\x76\x41\x1f\xe1\x5d\xa0\x4e\x05\xca\x26\xe3\x15\xee\x7a\x69\xef\xb4\xe6\xde\xcb\xd9\xd1\xe4\x0a\x35\x87\xc0\x03\x14\xc2\xc5\x1d\xbf\x65\x65\x3c\x91\x5c\x53\xbc\xf2\x83\x2f\x73\x4a\xc5\x44\x78\xb3\x6e\xef\x6b\x36\x86\x5a\x61\xf5\xf2\xa7\x70\x50\x7b\xfa\xa1\xa4\xcd\xcf\x52\xe3\xb9\xbd\x45\xa7\xbc\xd5\x59\x3a\x2f\x01\xc3\x14\xe1\x59\x10\x85\x03\x8d\x85\x71\xfd\x9b\xb4\x40\xc9\xd4\x58\x47\xda\x36\x96\x0c\x3a\x25\x6d\x9a\x4f\x2b\xbf\x4c\x3f\xf4\x44\xba\x17\xba\x0a\xe2\x54\xff\x71\xfe\x55\xfd\x6f\x04\x31\xf6\xe2\x1b\xc1\xcd\xc7\x95\x4c\x8a\x13\x65\x76\xfa\xb3\xdd\x54\xb0\x26\xbf\xe8\xce\x4f\x68\xe4\x58\x3a\xec\x38\x0a\x9e\xcf\xa8\x77\x2b\xdc\x7b\x92\xed\x26\x66\x79\x31\x3e\x73\x65\x7d\xcc\xac\xc9\x2b\xa4\xbb\xd9\xfd\x28\x79\x15\xc5\x76\x83\xd8\x72\xef\x0c\x5a\xf5\x97\x50\x13\x79\x18\x72\x24\x64\xd2\x59\xfd\x25\xf9\x1f\x00\x00\xff\xff\x58\x09\x99\x3f\x92\x03\x00\x00"

func destroy_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_destroy_nftCdc,
		"destroy_nft.cdc",
	)
}

func destroy_nftCdc() (*asset, error) {
	bytes, err := destroy_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "destroy_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0xb6, 0x48, 0x75, 0xda, 0xd1, 0x32, 0x83, 0x28, 0x3b, 0xb4, 0xe5, 0xa8, 0x54, 0x62, 0x8, 0x1a, 0x27, 0xbb, 0xdb, 0xfb, 0x16, 0xca, 0x5a, 0x71, 0xaa, 0x9f, 0xe4, 0xd9, 0xad, 0x63, 0x48}}
	return a, nil
}

var _mint_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x5d\x4f\xe3\x3a\x13\xbe\xcf\xaf\x98\xed\x05\x9b\x6a\x51\xfb\x22\xad\xf6\x22\xda\xb2\xe2\xe3\x45\xe2\x02\x84\xa0\x7b\x6e\x10\x17\x8e\x33\x6d\x7c\x70\xed\x1c\x7b\x52\xa8\x10\xff\xfd\xc8\x1f\x49\xe3\x92\x45\x27\x17\x90\xc6\xcf\x8c\x67\x9e\x79\x66\x6c\xb1\x69\xb4\x21\xb8\xd5\xea\xaa\x55\x6b\x51\x4a\x5c\xea\x67\x54\xb0\x32\x7a\x03\x93\xd9\x6c\xce\xb5\x22\xc3\x38\xd9\xf9\x21\x66\xc6\x2b\x3e\xc9\xa2\x83\xff\xbf\xb2\x4d\x23\xf1\xf6\x6a\x39\x66\xba\x5f\x4d\x8c\x6e\x90\x58\xc5\x88\xfd\x25\xf0\xc5\x8e\xd9\x25\x80\xc4\x74\x34\xda\x79\x4b\x42\x0a\xda\xcd\x47\xe2\xcc\xe6\xf3\x39\x2c\x6b\x61\xc1\x72\x23\x1a\x82\xd6\xa2\x05\xaa\x11\x6e\xaf\x96\x37\x42\x11\x1a\x30\x68\x75\x6b\x38\x02\x69\xd8\x08\x45\xc0\x40\xe1\x8b\x03\x78\xeb\x6b\x82\x4d\x6b\x09\x4a\x04\xd3\x2a\x78\x11\x54\x7b\x07\x8c\x73\xdd\x2a\x02\xaa\x19\x41\xcd\x82\xd7\x4d\xea\xd2\x3b\xb0\xa4\x0d\x56\x20\x14\xcc\xdd\x2b\x5b\xe3\xbc\xdf\x3c\xcb\xc8\x30\x65\x19\x27\xa1\x55\x9e\x01\x00\x18\xe4\xa2\x11\xa8\xa8\x80\xb3\xaa\x32\x68\xed\xb1\xff\xae\xd8\x06\x0b\x78\x20\x23\xd4\x3a\x7c\xa9\x30\x24\x25\xb4\x4a\x17\xa8\x6e\x37\xa5\x62\x42\xa6\x9f\x79\x4b\xb6\x80\xc7\xdf\x57\xe2\xf5\xc7\xf7\xa7\xf0\xcd\xe8\x1d\x93\xb4\xbb\xdc\xbb\x72\x90\x60\x95\x42\xce\x51\xe1\x4a\x70\xc1\x8c\x40\x87\x89\xc1\x3d\x41\x36\x85\xb7\xcc\x23\x5d\xb6\x52\x73\x26\x61\xcb\x8c\x60\xa5\x44\x58\x69\xe3\x09\x10\x6a\x9d\x12\xb4\x42\x83\x8a\xa3\xb7\x93\x48\x71\xa1\x80\xa3\x81\x6a\x06\x34\x75\xee\xef\x3b\x43\x57\x2d\xe7\xd0\x20\x47\xb1\x45\xf3\xd5\x02\xd7\x52\xa2\x67\xb2\xf7\xda\x93\x79\xd1\xaf\xdd\xe3\xaa\x80\xa3\xb7\x0f\xba\xde\x23\xee\xda\x52\x0a\xfe\xbe\xdf\xf4\xce\xe0\x56\xe8\xd6\x3a\x4d\xc0\xf5\x25\x94\xb8\xd2\x06\xfd\xf6\x83\xf2\x01\xbe\x22\x6f\x09\x6d\x92\x93\x50\xeb\xeb\xcb\x73\x6f\x50\xc0\xef\x6b\x45\x3f\xbe\x07\xc7\x8d\xc1\x86\x19\xcc\xad\x58\x2b\x97\xf8\x59\x4b\xf5\x59\xd0\x94\x23\x14\xe2\x63\x51\xae\x66\x07\x8e\x60\x31\xe8\xbc\x19\x69\x62\xf2\xa1\x6d\x1a\xb9\xcb\x7a\xb3\xf9\x1c\x4a\x6d\x8c\x7e\x01\xb6\x27\xbb\xe3\x6c\x44\xfb\x42\x41\x14\xe7\xc7\x9d\xd1\xc0\x02\x42\x98\xb3\xe0\xf4\xe7\x68\x95\x4e\x73\xd7\x91\xc5\x30\xb6\xb0\xf0\x10\x3c\xdf\x31\xaa\xa7\xbd\x7b\xf7\xfc\xfa\x05\x0d\x53\x82\xe7\x93\x98\x39\x54\x1a\x2d\x28\x4d\xa1\x6b\x80\x29\xd0\xe5\xdf\xc8\x09\x18\xf9\xd0\x6d\x83\x5c\xac\x04\x56\xd0\x30\xaa\x27\xd3\x24\xe3\xf3\x90\x71\x94\x45\x28\xfc\x57\x0b\x8d\xaf\xa7\x2f\xde\x5e\x22\x07\x12\xec\x13\x1e\x57\x0c\x2c\x60\x8d\x14\x83\xcc\x7b\x4c\x9a\xcd\x6c\x8d\x74\xc1\x1a\x56\xfa\x71\x94\x0f\x68\x38\xd4\xd6\x47\x26\x7a\x62\xff\x83\x30\x4f\xf3\x3f\xb1\x78\xa1\x5b\x59\x79\xfa\xd6\x41\xfc\xbe\x35\x46\x05\x00\x7b\xb7\x93\xe0\xee\xbd\xd7\xe5\x40\x7e\x6e\x66\xcc\x24\xaa\x35\xd5\xb0\x58\x8c\x8d\x8b\x6e\xf5\xe8\xe8\x0f\xe0\x64\x70\xc4\xe5\x02\x26\x67\xc6\xb0\x1d\x44\xb4\xad\x7d\xe4\x25\x02\xfe\xd3\x32\xe9\xc7\x46\x34\x07\x83\x92\x11\x56\x50\x21\x31\x21\xed\x64\x18\x6c\x6c\xb9\x6e\x00\x45\x1d\x5c\x18\x64\x14\xfa\xb3\x73\x12\x8d\x7b\xd4\x96\x19\x08\x8a\x5b\xc0\xff\x92\xaf\xc1\x22\xcc\xb8\xf4\x24\xba\x0f\xbe\x9e\x60\x01\x8f\x4f\xbd\xcd\x4b\x2d\x24\x7e\x96\x2b\x9c\xc6\x9d\xde\x92\xaa\xb9\x01\x51\xf6\xf0\x1d\x8c\xf3\xf5\xe8\x4d\x9f\x3e\xb3\xdc\x4b\x2e\x55\xe9\x00\xf2\x99\x4e\x7f\x1e\xbd\xa5\x7a\xbb\x8f\xb2\x79\x3f\xcd\xd3\xfc\xd7\x48\x91\x82\x0e\xb2\x57\x73\x3e\x1d\xb4\x62\x2c\xc3\x0d\x7b\x46\xb0\xad\x49\x2b\xc1\xf7\xe1\x0a\x0b\x5b\x26\x45\xd5\x0d\xd4\x38\xe6\x3a\x89\x26\xfe\xc4\x0a\xbe\x8c\x26\x3d\xe3\x35\xf2\xe7\x7c\x0a\x6f\x5d\x17\x9c\x0f\x58\x4d\x77\x73\x9d\xe1\x77\xfc\x32\x99\x76\x12\xea\x9e\xbe\xee\x33\xd6\x34\xa8\xaa\x3c\x59\x75\xcf\xa8\x1a\x3e\xc2\x20\x1c\xe2\x9e\xa0\x62\xbc\x50\xc7\xa3\x46\xbc\xa5\xc2\xf7\x50\x2c\xfa\x38\x2a\x39\xf5\x47\xfa\x71\x4c\x31\xee\x49\x35\x90\xfe\xea\x3a\x21\xfc\xff\x06\x27\xfd\xea\x7b\x96\x25\xad\xe5\x06\x7a\x3f\x42\x98\x72\x5d\xd9\x68\x2b\x08\x04\x0d\x4e\xe4\x7e\xf4\x1e\x1c\xc9\x90\x1e\x2b\xfe\xdf\xed\xd5\x32\xe5\x70\x70\x01\xfa\x64\x22\xa7\xe4\x84\xcb\x91\xfb\x9b\x7e\x4f\xc8\x1a\xfc\x48\x51\x83\xfb\x52\xff\x7a\x3c\x2e\x8e\x62\xff\x9a\xa5\x5c\x76\xe3\x53\x5b\x3a\x3c\xbe\xc7\x33\x70\xfd\x74\x7d\x69\xf3\xe9\xcc\x5d\x7d\x99\x50\x36\x1f\x3b\xec\xa7\x05\x4c\x96\x35\x82\xc2\x57\xea\x2e\x20\x71\x5c\xd6\x6c\x8b\x50\x22\xaa\x70\x7b\xaa\x62\x41\xa4\x53\x1e\x56\x93\x3e\x88\xf1\xcb\x82\x1b\xd1\xa3\xb7\x8b\x6f\x70\x12\xf7\xf4\x68\xb0\x01\xfe\x61\x53\xa1\xb8\x41\x66\xb1\x82\x72\x07\x27\xdd\x5c\x7e\xcf\xe0\xdf\x00\x00\x00\xff\xff\x9c\xb1\x75\x4e\x5f\x0c\x00\x00"

func mint_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_mint_nftCdc,
		"mint_nft.cdc",
	)
}

func mint_nftCdc() (*asset, error) {
	bytes, err := mint_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mint_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0x18, 0x31, 0x1b, 0x8, 0x98, 0x2a, 0x63, 0x8e, 0xe8, 0xa3, 0x11, 0xe, 0xea, 0xc4, 0xfc, 0xdf, 0xa3, 0xfb, 0xfd, 0x6a, 0xdb, 0xf3, 0xbd, 0x82, 0x9c, 0x57, 0x1e, 0x8f, 0x8c, 0x9b, 0x62}}
	return a, nil
}

var _scriptsBorrow_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x0f\x1f\x16\x1b\x16\xfb\xb2\xec\x21\x34\x0d\x69\x68\xa0\x97\x10\x8a\x7b\x2e\xf2\x78\x9c\x0c\x95\x25\x21\xcb\xb4\x25\xe4\xbf\x97\xc4\xb1\x9d\xa6\x54\x27\x09\xbd\x6f\xa4\xf7\x49\xe3\xac\x0f\xd8\x58\xb3\xee\xcc\x4e\x4a\xcd\x85\x7d\x63\x83\xda\xdb\x06\x71\x96\xe5\x59\x96\x93\x35\xc1\x2b\x0a\x6d\x7e\x1b\xcb\xa8\xa2\x38\xba\xcc\x78\xfc\x50\x8d\xd3\xbc\x59\x17\xbf\xd0\x53\xa0\xe7\xa2\x3c\x47\xb1\x97\x16\x2d\x79\x71\x01\xa5\xf5\xde\xbe\xb7\x50\x06\xe3\x10\x05\xb2\x5a\x33\x05\xb1\x26\x72\x5d\x89\xba\x33\x68\x94\x98\x44\x55\x95\xe7\xb6\x9d\x61\xd9\x6f\xfe\x42\xaa\x19\x5e\x9e\x4c\xf8\xff\x2f\xc5\x21\x02\x00\xcd\x01\x8a\xc8\x76\x26\x60\x8e\x1d\x87\x65\x7f\x18\xe0\x34\x1a\x63\xd3\x33\xcf\x5c\x63\x3e\x60\xe7\xfb\xd3\xca\x76\x1c\x56\xca\xa9\x52\xb4\x84\xcf\xe4\xaa\xcb\x6a\x24\xb7\x5d\xa9\x85\xb6\x2a\xec\xd3\x89\xeb\x5b\xdd\xfd\x39\xfc\x90\x77\x0b\x1e\xef\x93\x89\x5b\x2c\xe0\x94\x11\x4a\xe2\x95\xed\x74\x05\x63\x07\x41\xa0\xf1\x1b\xbd\x23\x77\xa6\xaf\x1a\xc4\x97\x5e\x79\x8e\x87\x1e\x51\xf0\x5c\xb3\x67\x43\x8c\x60\xa1\xd0\x3a\x26\xa9\x85\xce\xa6\xc5\x20\xec\xf9\xda\xf4\x60\xe5\x15\xf3\xef\x66\x2e\x75\x36\xeb\x22\x39\xe9\x96\x2a\x8d\x8e\xd1\x57\x00\x00\x00\xff\xff\x42\x5e\x85\x9f\x45\x02\x00\x00"

func scriptsBorrow_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBorrow_nftCdc,
		"scripts/borrow_nft.cdc",
	)
}

func scriptsBorrow_nftCdc() (*asset, error) {
	bytes, err := scriptsBorrow_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/borrow_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0x35, 0x85, 0x35, 0xa5, 0x35, 0x7c, 0x4e, 0xec, 0x2f, 0xd1, 0x85, 0x20, 0x1, 0xe5, 0x41, 0x36, 0x46, 0x72, 0xa9, 0x90, 0x9b, 0x8e, 0xae, 0x8b, 0x7, 0x11, 0x8c, 0xbe, 0x9f, 0xe5, 0xe6}}
	return a, nil
}

var _scriptsGet_collection_lengthCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfa\x8a\xc5\x87\x62\x5f\xe4\x7b\x68\x1a\x82\xdb\x40\x2e\x21\x94\xfc\x80\x2c\xcb\x8e\xa8\xbc\x2b\xe4\x15\x6d\x09\xf9\xf7\x12\xab\xb1\xd3\x94\xe8\x20\x24\x76\xde\xb0\x33\xb6\xf7\x14\x18\x76\x84\x9b\x88\x9d\xad\x9d\x39\xd0\x87\x41\x68\x03\xf5\x90\x49\x59\x4a\x59\x6a\x42\x0e\x4a\xf3\x50\xde\xcb\xa4\x6e\x74\x26\x7e\x3d\xde\xbe\x54\xef\x9d\xd9\x6d\x0e\x0f\xe8\x59\x90\x38\xe1\x63\x0d\x6d\x44\xe8\x95\xc5\x5c\x35\x4d\x30\xc3\xb0\x80\x75\x7a\x14\x0b\xd8\x22\xc3\x49\x00\x00\x38\xc3\xa0\xb4\xa6\x88\x0c\x4b\xe8\x0c\xaf\xd3\xe7\x4a\x15\x62\x92\x69\x72\xce\x68\xb6\x84\xef\xa6\x85\xe5\x15\x1b\xe7\x97\x23\x3b\xc3\x95\xf2\xaa\xb6\xce\xf2\x77\x7e\xb3\x54\x35\x91\xfb\x58\x3b\xab\xf7\x8a\x8f\xc5\xcc\xd5\x14\x02\x7d\x3e\x3f\x9d\xfe\xb5\x70\x0f\x9e\x5f\xf2\x99\x5b\xad\xc0\x2b\xb4\x3a\xcf\x2a\x8a\xae\x01\x24\x86\x64\x05\x7a\x5a\x23\x35\xe6\x47\xfa\x26\x41\x96\x6c\xc6\x2b\x18\x8e\x01\xff\xc6\xbb\x64\xd9\xbe\x0e\x79\x21\x9d\xc1\x8e\x8f\xe2\x2c\x7e\x02\x00\x00\xff\xff\xaa\x92\x4e\x73\xd1\x01\x00\x00"

func scriptsGet_collection_lengthCdcBytes() ([]byte, error) {
	return bindataRead(
		_scriptsGet_collection_lengthCdc,
		"scripts/get_collection_length.cdc",
	)
}

func scriptsGet_collection_lengthCdc() (*asset, error) {
	bytes, err := scriptsGet_collection_lengthCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/get_collection_length.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc0, 0x89, 0xcd, 0xef, 0x5d, 0x12, 0xb7, 0x51, 0x37, 0xc7, 0x80, 0x78, 0xf2, 0x33, 0x27, 0xa0, 0x48, 0xa5, 0xb7, 0x52, 0x63, 0x43, 0xcd, 0x14, 0xbe, 0x1b, 0x93, 0xd9, 0x22, 0x5f, 0x57, 0x8f}}
	return a, nil
}

var _scriptsGet_nft_metadataCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x5f\x6f\xdb\x36\x10\x7f\xd7\xa7\xb8\xe4\x61\xb0\x81\x4d\xde\xc3\xb0\x07\xa3\x6a\xd1\x25\xe9\x50\x20\x33\x8a\x24\xed\x4b\xd0\x07\x5a\x3a\x39\x44\x68\x4a\x23\xa9\x24\x46\xe0\xef\x3e\x90\x94\x45\xd2\x22\x6d\xad\x2f\x95\xef\x7e\xf7\x87\xe4\xfd\xc8\xbb\xd0\x6d\xdb\x08\x05\x37\x6f\x64\xdb\x32\x5c\x7d\x79\x80\x5a\x34\x5b\xb8\xcc\xf3\x45\x9e\x2f\xca\x86\x2b\x41\x4a\x25\x17\x0e\x90\x97\x55\x79\x99\xf5\x76\xff\xa0\x22\x15\x51\xe4\x07\xc5\x57\x99\x30\x0d\x30\xd6\x3a\x5b\x2c\x16\xf0\xf0\x44\x25\xc8\x52\xd0\x56\xc1\x06\x95\x04\xc2\x18\xa8\x27\x84\x17\x8a\xaf\xbf\xad\x89\xc4\x0a\xb6\xbd\x2d\x10\x29\x9b\x92\x12\x85\x15\xbc\x52\xf5\x64\x70\xb2\xc5\x92\xd6\x14\x2b\x58\x7d\x79\x30\x2e\x09\xaf\x40\xa0\xea\x04\x97\x40\x15\x10\x09\x04\x24\xe5\x1b\x86\x20\x95\xe8\x4a\x95\x65\x6d\xb7\xee\xbf\xb5\x15\xbc\x67\x00\x00\x5a\xc8\x50\x01\x27\x5b\x5c\xc2\xbd\x12\x94\x6f\x02\x45\x85\x36\x51\xda\xf0\xa8\x5e\x3d\x75\xdb\x35\x27\x94\x45\xb5\xcd\x2b\x47\xb1\x84\xcf\x55\x25\x50\xca\xd0\x70\xd7\xc6\x23\x8a\x66\x47\x98\xa2\x28\x97\xf0\x18\xee\xe0\x9d\xd1\xec\x7e\x06\x70\x7c\x53\x28\x38\x61\xdf\xef\x6e\xa3\xee\x24\x0a\x4a\xd8\xaa\xdb\xae\x75\x26\xdf\xbf\x72\xf5\xe7\x1f\x01\xa0\x6c\x18\xc3\x52\x2f\xf0\x5b\xb7\x66\xb4\xfc\x46\xd4\xd3\x12\xdc\x77\x02\x7c\xaf\x1a\x41\x36\x68\xd1\xde\x8f\x94\x6f\xd1\xbc\xd0\x0a\x45\xef\x5d\xd0\x17\xa2\x4e\xe2\x4d\xfc\xe8\x8a\x8e\x41\xb7\x94\x3f\x63\xf5\x90\xda\xcf\x71\x0e\x93\x0d\x56\xa9\xaa\x70\x90\xeb\x33\xf5\xe1\x90\x37\x67\x0e\xca\xdb\xda\x7f\x3b\x22\xf0\xeb\x96\x6c\xce\x45\xff\x8b\x70\x8e\x62\x0a\xf2\x5e\x93\x88\xc9\x25\xbc\x5b\xd8\x01\xbe\x0f\x8b\xa9\xa2\x76\x25\x61\xe1\xdd\x58\x71\x66\xb0\x94\x53\x35\x33\x5f\xfa\x9f\x4f\x9c\x5f\x07\x69\x84\x35\x4e\x39\xa2\x8c\x53\x85\x7c\x71\x72\x5e\x2b\xff\xb8\x9c\xe2\x3c\x59\x1c\x36\xc2\x14\xa7\x8c\xd1\xc4\x69\xcf\x71\x24\x86\x4c\x11\x24\xea\x35\xc5\x8e\x74\x0a\xe3\x25\x9c\xe7\xc5\xa9\xd0\xd3\xd0\xab\xe8\x71\x9f\xa4\x43\x0c\x16\xe1\x42\x74\x0b\xc7\x44\x88\xc1\x22\x2c\x88\x7a\x4b\x51\xc0\x2b\x91\xd3\xf5\xaf\x21\xf3\xfe\xe5\xb0\x45\xc3\xea\x5c\x33\x00\x0a\x43\x84\x50\xe1\x91\x00\x0a\x9f\x12\x21\x6c\xa0\x03\x14\x8e\x1a\x21\xc4\xd0\x02\x0a\x4b\x8f\x23\xeb\x5d\x6b\xa2\x5b\x82\x84\xba\x81\x1c\x50\x38\xa2\x84\x10\x8f\x13\x50\xf8\x0c\x09\x61\x3e\x3b\xa0\x08\xc8\x12\x02\x63\x44\x81\x22\xca\x9f\x94\xa1\x47\x95\xc0\xf2\xf8\x8d\x89\xc5\xf4\x68\x14\x46\xf5\x14\xa7\x13\x8e\x24\x7b\xda\xc0\xf1\x26\x62\xea\x94\xe7\x52\x4e\xb9\x19\xa9\x53\x8e\x56\xb6\x0c\x43\x41\x0a\x7c\x1d\x94\x66\x54\x9e\x32\xbd\x09\x2a\x26\x2a\x4f\x9e\xac\xa3\x73\x78\xb2\x4e\x9e\x32\xf5\x28\x1e\x98\x7a\xf2\x64\x54\x4b\xfb\x30\xa2\x95\x1d\x71\xc1\xb2\x5c\xf3\xc0\xe3\xfb\x3e\xdb\xdb\xde\xb1\xee\x38\x6c\x09\xe5\x33\x62\x5f\x27\xf7\x4c\x01\xad\x0e\x4f\xc6\x7c\xe9\x35\x97\xfa\x45\x25\x65\xd9\x74\x5c\x41\xa1\x3b\xdd\xcf\xf6\xc7\xc1\xc3\x3c\x1b\x60\x2e\x35\x28\x0e\x36\x43\x76\xf9\x06\xd5\x15\x69\xc9\x9a\x32\xaa\x76\x33\xaf\x23\xbf\x8a\xf0\x6a\xee\xec\xd6\x8d\x10\xcd\xeb\x87\x5f\xde\x3d\x13\xf7\x79\x6c\xbc\xff\x38\x73\xb6\x9f\x3e\x41\x4b\x38\x2d\x67\x97\x57\x4d\xc7\x2a\xe0\x8d\x02\xeb\x0e\x08\x08\xac\x51\x20\x2f\x11\x54\x63\x1a\x72\x97\xfe\xa5\xb7\x28\x5e\xab\x60\xd7\xfb\x7c\x5c\x06\x33\xbd\x71\xb4\x9a\x5f\x58\x9b\xc5\x02\xfe\x36\x2d\x35\xc2\x9a\x48\x5a\x42\x45\x65\xcb\xc8\x0e\x28\xaf\x1b\xb1\x25\x66\x7b\xea\x46\x80\xd2\x03\x84\x6e\xfd\x0f\x91\xf4\xe0\x60\x6f\xc1\x5c\xa0\x6c\xd8\x0b\xea\x8b\x7b\xa6\xf9\xf2\x21\xbc\xca\xaf\xad\xcb\x8f\xb3\x79\x24\xaa\xbd\x24\x63\xf1\x10\x36\xf4\x05\x79\x10\x14\xdf\x5a\x2c\x15\x56\x7d\xa7\xf1\x63\x72\x0e\x77\x87\xbb\xd8\xcb\xc2\x75\xfe\x07\x47\x31\xf7\x44\x5e\x40\xc2\x97\x73\x73\xd8\xb5\xc2\x6e\xcb\xd8\xa6\xdf\x83\xcc\x5b\x89\xcf\xe9\x09\x2b\xf0\xc8\x6e\xd6\x10\x09\x72\x7c\x1f\x1c\xb5\xcd\x43\x8e\x13\xa2\x05\xb5\xea\x1f\x60\x24\x6c\x0c\xeb\x17\xa4\x53\x4e\x3f\xaf\xd0\x27\x51\x64\x5a\x70\xa2\x48\xc0\x85\xbe\x8b\x98\x1e\xb7\x37\x90\xc9\x2d\xee\xf5\x2e\x8a\xff\x30\x4f\x8f\x73\x6f\xac\x52\x51\xac\xd6\x84\x18\xe2\x84\x7d\x7a\x1f\xc5\x08\x2f\xf2\xfe\x72\xbb\xf0\x97\xfe\x30\x74\x29\xfa\x2e\xd3\xbf\x66\xd1\xcb\x2f\xd9\xa2\x41\x01\xef\x76\x54\xd1\x7c\x7c\x46\xcd\xd1\x71\x39\xe5\xd2\xda\xe7\xcf\xb8\x93\x5e\x9f\x36\x0a\xf0\xf8\x8c\xbb\x9f\xe1\xcb\x17\x7a\x30\x80\x8b\xbc\x13\xac\x7f\x04\xcc\x7f\xf6\x2f\x0c\xfa\x12\x38\x1e\x80\x7a\xce\x99\x66\x30\x31\x06\x1d\x20\x9e\x30\x3a\x13\x1d\x70\x83\x28\xef\x04\x9d\xcd\x47\x43\x92\xf9\x2f\x32\x22\xf5\x1f\x39\xad\x90\x2b\x5a\x53\x1f\xe4\x8d\x4b\xde\x65\xa3\xcf\x64\xb8\x47\xfc\x48\xc1\xc4\xe4\xfd\xd0\xfb\x92\x1a\x9d\x8e\x4b\x30\xe7\xe6\xf3\xdc\x2c\x35\xa2\x66\xde\x4e\x9f\xae\xc6\xc6\xf2\xff\xcc\x5b\x91\xd8\x9e\xfe\xd4\x08\x96\xca\xda\x09\xa3\xc7\x70\x6a\x52\x4b\xb9\x74\x98\x73\x2e\x23\x03\x5d\x7a\x85\x93\xdd\xda\xc9\x6f\x4c\x98\xb0\xe2\x13\x93\xe0\xd8\x2c\xca\x82\xc4\x80\x38\xb6\x4e\xd6\x62\x62\x76\x8c\xf0\xdc\xa9\xf3\x9a\x32\x3c\x26\x59\x62\xba\x1c\x3b\x5a\x3b\xf5\x19\x47\xc3\xe5\x36\x12\x45\x06\xd0\xf0\xbd\xc8\x75\x47\x72\x4b\xa5\x7a\xfc\xdd\xfe\xf5\x6f\x9e\xed\xb3\xff\x02\x00\x00\xff\xff\xd1\x0e\x52\x50\xc2\x15\x00\x00"

func scriptsGet_nft_metadataCdcBytes() ([]byte, error) {
	return bindataRead(
		_scriptsGet_nft_metadataCdc,
		"scripts/get_nft_metadata.cdc",
	)
}

func scriptsGet_nft_metadataCdc() (*asset, error) {
	bytes, err := scriptsGet_nft_metadataCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/get_nft_metadata.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcf, 0x86, 0xb6, 0x28, 0x9e, 0x49, 0x84, 0xf, 0x98, 0xcb, 0x66, 0x9a, 0x72, 0x5, 0x46, 0x80, 0x4, 0x90, 0x1a, 0x29, 0x1b, 0x6c, 0x1b, 0x12, 0xeb, 0x53, 0x65, 0x22, 0x4d, 0xb4, 0x83, 0x13}}
	return a, nil
}

var _scriptsGet_total_supplyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x31\x0a\x42\x31\x0c\x06\xe0\x3d\xa7\xf8\x79\x93\x2e\xe9\x22\x0e\xee\x0a\x2e\x2e\xea\x01\x6a\x7d\x0f\x0a\x6d\x1a\x62\x02\x8a\x78\x77\x47\xdd\x3f\xbe\xda\x75\x98\x63\xff\xcc\x5d\xdb\x7c\x3a\x5c\xb0\xd8\xe8\x98\x98\x13\x73\x2a\x43\xdc\x72\xf1\x47\xfa\x01\x2e\xf7\x32\x11\x69\xdc\xb0\x84\xa0\xe7\x2a\xab\xf5\x0e\xd7\xa3\xf8\x76\x83\x37\x01\x80\xcd\x1e\x26\x7f\x2b\xfb\xf0\xdc\xce\xa1\xda\x5e\xf4\xa1\x6f\x00\x00\x00\xff\xff\xab\xdd\xb2\x0f\x76\x00\x00\x00"

func scriptsGet_total_supplyCdcBytes() ([]byte, error) {
	return bindataRead(
		_scriptsGet_total_supplyCdc,
		"scripts/get_total_supply.cdc",
	)
}

func scriptsGet_total_supplyCdc() (*asset, error) {
	bytes, err := scriptsGet_total_supplyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/get_total_supply.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0x9, 0x60, 0xa2, 0xa5, 0x58, 0x7b, 0xb8, 0xa2, 0x87, 0x3a, 0x50, 0x8b, 0x97, 0x82, 0xd3, 0xf7, 0x78, 0xfa, 0x17, 0x8a, 0xda, 0xc8, 0x54, 0x76, 0x3b, 0xe3, 0x9c, 0x92, 0x0, 0x29, 0x87}}
	return a, nil
}

var _setup_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\xbc\xe6\x10\x6c\x70\xac\x7b\x70\x03\x21\xc4\xb7\x9a\x90\x9a\xde\xc7\xeb\x91\xb5\x64\xbd\x2b\x66\x47\x56\x8d\xf1\x7f\x2f\x92\x5c\x7d\x34\x82\x66\x4f\x62\xf7\x7d\xcd\xd3\xd8\x63\x11\x44\xb1\x09\x7e\x5d\xfa\x83\xdd\x39\xde\x86\x0f\xf6\xc8\x24\x1c\x71\xb7\x5c\xa6\x26\x78\x15\x32\x1a\xd3\x7f\x31\x4b\xb3\x37\x77\xc9\x4d\xe0\xf5\x37\x1d\x0b\xc7\x9b\xf5\x76\x8a\xda\xbf\x8e\x48\x3f\x58\x69\x4f\x4a\xbf\x2c\x57\x71\x8a\x37\x02\xb4\xd4\x24\x4d\x53\x6c\x73\x1b\xa1\x42\x3e\x92\x51\x1b\x3c\x6c\x44\x95\x93\x82\x3c\xc8\x98\x50\x7a\x45\x15\x4a\xb7\x87\x94\xbe\x61\x68\x40\x64\x85\xd5\xc8\x2e\x43\x59\xd4\x17\xc2\x86\xed\x89\xb1\x59\x6f\x63\x92\x0c\xe5\x2e\x49\x02\x00\x85\x70\x41\xc2\xb3\x68\x0f\x9e\xe5\x11\xcf\xa5\xe6\xcf\xad\xfc\x1c\x97\x06\x52\x9f\x34\xc5\x3b\x6b\x29\x1e\x4c\xe2\xce\xb0\x19\x34\xe7\x2e\x08\x39\x61\xda\x9f\x91\x53\x04\xc1\x04\xe7\xb8\x71\xe9\xf8\x36\x43\xeb\xb0\xdc\x05\x91\x50\xad\xee\x07\x7d\xbd\x74\xf8\xa7\x59\xdd\xd0\x23\x26\x1f\x7f\x6a\x10\x3a\xf0\x1b\x69\x3e\xc7\xb7\xef\xf0\xd6\x0d\x12\xd6\x47\x9a\x88\xdd\xd5\x35\x19\xe6\x7f\x11\x26\x65\x10\x3c\x57\xe0\x63\xa1\xe7\xa9\xa0\x8e\x75\x70\x8d\xd5\xc3\x30\x8b\x69\x24\x5e\x6b\x6e\x1f\x6b\x36\x1f\xd9\x44\x3a\x31\xac\xd6\xe5\x0f\x1a\xea\x10\xb7\x16\x6a\xd4\x6c\xf5\xd0\x3b\x2d\xa0\xe1\x0b\x73\x8f\xac\xcc\xdf\x89\x8a\x72\xe7\xac\x81\xa1\x82\x76\xd6\x59\x3d\x23\x0b\xd2\xd8\x4f\x4c\x78\x4b\xe0\xac\xff\x58\xdd\x5f\x3e\x6d\x7c\xef\xfb\xd6\xa8\x2e\x86\xa1\xfa\xcf\xcf\xb0\xf1\x22\xbf\x73\x0c\xee\xc4\xd2\xe3\xae\x4f\xb3\xd1\xcf\x9a\x9c\xb5\x15\xab\x47\x5d\x8c\xc0\x4a\x72\x60\xfd\x7f\x41\x1d\x69\x9e\xb4\x1b\x70\x4d\xfe\x04\x00\x00\xff\xff\x96\xfc\xd1\x2f\xff\x03\x00\x00"

func setup_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_setup_accountCdc,
		"setup_account.cdc",
	)
}

func setup_accountCdc() (*asset, error) {
	bytes, err := setup_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "setup_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0xd8, 0x1f, 0x7d, 0x90, 0x19, 0x13, 0x9, 0x9a, 0x74, 0x10, 0xdf, 0xda, 0xc0, 0x85, 0x8, 0x8c, 0x35, 0xb3, 0x94, 0x46, 0x9d, 0x31, 0x94, 0x71, 0xde, 0x7a, 0x3b, 0xf3, 0xfb, 0xbc, 0x7a}}
	return a, nil
}

var _setup_account_from_nft_referenceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4f\x6b\xdb\x4e\x10\xbd\xeb\x53\xbc\xf8\xf0\x43\x02\x47\xba\xfc\xe8\xc1\x38\x09\xc1\x8d\xa1\x87\x9a\x50\xdc\xde\xc7\xab\xb1\xbd\x44\xde\x15\xbb\x23\xab\x21\xe4\xbb\x17\xfd\xb1\xe4\xb5\x03\x29\xd5\x69\x91\xde\x7b\x33\x6f\xe7\x8d\xf4\xa1\xb4\x4e\xb0\xb2\x66\x59\x99\x9d\xde\x14\xbc\xb6\x2f\x6c\xb0\x75\xf6\x80\x49\x9a\x66\xca\x1a\x71\xa4\xc4\x67\x97\x98\x54\xe5\x6a\x12\xf5\x02\xdf\x59\x28\x27\xa1\x5f\x9a\x6b\xff\x11\x3b\x00\x04\xd4\xa7\xdf\x74\x28\x0b\x5e\x2d\xd7\x1f\xf1\xc6\xaf\x1d\x29\xca\xb2\x0c\xeb\xbd\xf6\x10\x47\xc6\x93\x12\x6d\x0d\xb4\x47\xbd\x27\x01\x19\x90\x52\xb6\x32\x82\xda\x56\x45\x0e\x57\x99\x96\x21\x16\x9e\x05\x5a\x3c\x17\x5b\x54\x65\xf3\xc2\xb1\x62\x7d\x64\xac\x96\x6b\x9f\x76\x9a\xdb\xca\xb4\x82\x2d\xa7\xf2\xec\x71\x6c\x0d\x89\xc5\x8b\xb1\x35\xea\x3d\x3b\x3e\x89\x35\x2a\x7b\x86\xb2\x45\xc1\x23\x4b\x1b\x78\xb1\x8e\x76\x0c\x32\x79\x83\x55\x8e\x49\xb8\xc5\xf2\xa1\x94\xd7\x33\x46\x1a\x45\x67\x36\x62\xca\x73\xc7\xde\xcf\xf0\xd8\x1d\xa6\x28\xab\x4d\xa1\xd5\x33\xc9\x7e\x86\xe7\xe1\x3c\x85\xce\x67\xf8\xf9\xcd\xc8\x97\xff\x13\xbc\x45\x11\x00\x94\x8e\x4b\x72\x1c\x7b\xbd\x33\xec\x66\x78\xac\x64\xff\xd8\x5d\x46\x83\x41\xff\x14\x2c\x67\x0d\xe0\x0e\x3b\x96\x1e\x76\xaa\x9f\x0c\xe0\xe6\x49\x77\x2c\x0b\x2a\x69\xa3\x0b\x2d\xaf\xf1\xd8\xd1\x05\x6c\x63\x9d\xb3\xf5\xfc\xbf\xb7\xab\xa0\x2c\x86\x72\x9d\x85\x69\x18\x97\xf4\x07\x7b\x5b\x1c\xd9\x8d\xb8\xf7\xfb\x38\x54\x7f\x78\x40\x49\x46\xab\x78\xb2\x68\xe7\x6a\xac\xa0\x2b\x08\x82\xe3\x2d\x3b\x36\xaa\x9d\x4c\x38\x92\x49\x12\x05\xce\x5d\x5f\x0a\x77\xe7\x53\xe8\x94\x9a\x66\x4e\xad\xc4\xcd\x05\xeb\x3c\xb9\x09\xd8\x66\x2b\x63\x8f\x0d\x1c\x77\x83\x62\xda\x1f\x9a\xd7\xf1\xfa\xb5\xe4\x79\x68\x72\xb5\x5c\x8f\xdc\xaf\x24\x74\x1f\x27\xc9\x0d\xc8\xdf\xe0\x13\xe0\xe8\x20\xcb\xb0\xe8\xc2\x44\x30\x5c\x5f\xc5\xc9\x07\xdd\xb6\x5f\x47\x29\xcc\x6f\xaf\x0d\xa4\x5d\x38\x9f\x42\x68\x9c\x04\x35\x3d\x1d\x19\x5a\x4e\xb7\xdb\x6f\xd8\x80\xe8\x02\x97\x36\xa8\x78\x7e\x7b\x51\x75\x0a\xb1\xb3\x0f\xea\xf6\x3b\xd2\xe5\xe8\xbc\x98\x3a\x19\xec\x82\x06\x35\x44\x0f\x5b\xeb\x2e\x37\xee\xa2\x87\x42\x9b\x97\xbf\x4b\xe0\xd9\x7f\x65\x3c\xfe\x53\x50\x83\x9c\x5e\x1b\x1d\xf7\x65\x1a\x20\x85\xdc\x8e\xe5\x93\xab\x19\x18\xdd\x36\xbc\x47\xef\xd1\x9f\x00\x00\x00\xff\xff\xe6\x99\x0e\x1e\xb2\x05\x00\x00"

func setup_account_from_nft_referenceCdcBytes() ([]byte, error) {
	return bindataRead(
		_setup_account_from_nft_referenceCdc,
		"setup_account_from_nft_reference.cdc",
	)
}

func setup_account_from_nft_referenceCdc() (*asset, error) {
	bytes, err := setup_account_from_nft_referenceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "setup_account_from_nft_reference.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0xb9, 0x73, 0xc0, 0x2c, 0xb2, 0xf5, 0xa8, 0xea, 0x94, 0xf9, 0x6d, 0xd3, 0xe3, 0x35, 0x70, 0xb, 0xe, 0x4f, 0x6e, 0x47, 0xf6, 0x26, 0x79, 0x85, 0x46, 0x15, 0x30, 0x29, 0x31, 0x6e, 0xdf}}
	return a, nil
}

var _setup_account_to_receive_royaltyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xd1\x6a\xe3\x3a\x10\x7d\xcf\x57\x4c\xf3\xd0\x26\x10\xec\xf7\xd2\x16\xda\x5e\x0a\x17\x6e\xb9\xa5\xed\x76\x5f\x33\x91\xc7\xf6\x10\x45\x32\xd2\x38\xa9\x09\xf9\xf7\x45\x72\xec\x58\xcb\x6e\x1e\x02\x46\x67\xce\x9c\x39\x73\x66\x96\xe7\x39\x7c\xd6\xec\x41\x1c\x1a\x8f\x4a\xd8\x1a\x60\x0f\x08\x42\xbb\x46\xa3\x10\x94\xd6\x85\xcf\xcb\x7b\x2c\x12\x0b\xca\x51\x78\x47\x30\x74\x00\xcd\x66\x0b\x6c\x40\x6a\x62\x07\xa8\x94\x6d\x8d\x04\xd4\x86\xa0\xf5\x54\x44\x1a\x47\x8a\x78\xcf\xa6\x02\x67\x3b\xd4\xc2\xe4\xff\xac\x40\xa1\x49\x0a\xd1\x74\x50\xb6\xa6\xe2\x8d\x26\x10\xbb\x25\xb3\x82\x43\xcd\xaa\x0e\x5a\x7d\x43\x8a\x4b\xa6\x02\x36\x5d\xe8\x0f\xeb\x3d\xb6\x5a\xde\x50\xea\x35\xa0\xab\xda\x1d\x19\x89\x7d\xe2\xdf\xbf\x65\x04\x0d\x12\x0f\x68\xc4\x07\xa1\xbd\x38\xba\x48\x0b\xe3\xbc\xfc\xf7\xff\xcf\x55\xc0\x77\x37\x5a\x07\x3d\xb0\xce\xbd\x58\x87\x15\xe5\xa5\xb6\x87\xcf\xa0\xe5\x2b\xb4\x5b\x4f\xc8\xbb\xc8\x3a\x25\x65\x09\x6c\x3f\x3e\xfe\x79\x5e\x9d\x01\xb6\xd5\x45\x24\x7c\x61\x94\x48\x93\x45\x9e\x8f\x9e\x3d\xa8\x8f\x8c\x68\x0a\xf0\x16\xac\xc9\xe0\xec\x15\x41\x83\x52\x5f\xcc\x09\xd3\x34\xed\x46\xb3\x3a\x6f\xc1\x9f\x77\x12\x61\x52\xa3\x9c\x17\x03\x65\x2b\xad\xa3\x55\x40\xd0\x77\x43\x4a\xa8\x98\x88\x1c\xdb\x55\x64\xc8\xb1\x4a\x8d\x56\x51\xf0\x26\xe6\xe1\x80\xae\xe8\x4b\xa3\x93\x4d\xe3\x6c\xe3\x38\x84\x21\x3a\x3f\x9b\xf1\xae\xb1\x4e\xe0\xe5\xbc\xb2\x38\x1e\x94\xce\xee\x60\x9e\x65\x79\x96\xe5\xca\x1a\x71\xa8\xc4\xe7\x09\x26\x53\x85\x9a\x0f\xd5\xaf\x24\x58\xa0\xe0\x17\xd3\xc1\xff\xa5\x3a\xc1\xf4\xd5\xb3\x49\x90\x16\x63\x12\x6e\x61\x62\xec\x12\x8e\xb3\x19\x00\x40\xe3\xa8\x41\x47\x0b\xcf\x95\x21\x77\x0b\x8f\xad\xd4\x8f\x7d\x30\x46\x4c\xf8\xe5\x39\xbc\x93\xb4\xce\x00\xa1\xd3\x1d\x70\x9a\xa1\xc2\x92\x37\x37\x02\x35\xee\xc3\x3d\xa4\x63\xc7\xad\x8e\x4c\x5c\x42\xdf\x2c\xdb\x58\xe7\xec\xe1\xee\x3a\x35\x20\xa2\x1f\x16\x61\xda\x5b\x18\xd5\x2f\xe1\xfe\x1e\x0c\x6b\x38\x8e\x44\x51\x3e\x1a\x56\x8b\xf9\x63\x0f\x1c\xc3\x70\x39\x88\xf4\x66\xfa\x40\x04\xb1\x60\xac\x00\x7d\xb3\x97\xf9\x72\x64\x3c\x25\xf3\x3e\x0f\xd7\x7d\x8e\x96\xc2\x06\x37\xac\x59\xba\x61\xef\x51\x6a\x9f\x2f\x6b\x74\x17\x22\x65\x3d\xf9\x29\x49\x80\x15\xd4\x58\xcf\x12\xb4\xf4\xc7\x2d\xb5\xb3\x6d\x55\xc7\xc7\xf7\x3e\x7a\x0e\xd8\x08\xb9\x12\x15\x8d\xe5\x9a\x64\xda\xf4\x7e\xf0\x2d\x64\xfc\xee\xfa\x98\xda\x36\xf0\xac\x52\xf3\xb3\x27\xd4\x68\x14\x9d\x1e\x16\x89\x71\x69\x6c\x2a\x92\xf7\x78\xf4\xdd\x40\xf3\x16\x67\x0e\xce\x2f\x96\xab\xa4\x52\xd0\x55\x24\x93\xd5\x8c\xaf\xcb\xab\xc4\xbf\x57\xdc\x12\xf8\xd6\x51\x9c\x73\x32\x08\x7b\xd8\xa3\xe6\x62\x1a\x89\xab\xcb\x7b\xa6\x6a\x52\xdb\xc5\x12\x8e\xc3\x7a\x9f\xc8\x50\xc9\x8a\xd1\x75\xbf\xf1\x84\x2d\x46\xae\xab\xf9\x12\x4e\xb3\x7e\x89\xa7\x5f\x01\x00\x00\xff\xff\x59\x76\xf6\x18\xd5\x05\x00\x00"

func setup_account_to_receive_royaltyCdcBytes() ([]byte, error) {
	return bindataRead(
		_setup_account_to_receive_royaltyCdc,
		"setup_account_to_receive_royalty.cdc",
	)
}

func setup_account_to_receive_royaltyCdc() (*asset, error) {
	bytes, err := setup_account_to_receive_royaltyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "setup_account_to_receive_royalty.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0x1b, 0xe1, 0xea, 0x70, 0x9c, 0x9c, 0x8c, 0xf7, 0x61, 0x84, 0xab, 0xec, 0x46, 0xdb, 0xd0, 0xde, 0x57, 0x4a, 0x1b, 0xb7, 0x32, 0xb5, 0xa2, 0x91, 0xf3, 0xa0, 0x93, 0x4c, 0x38, 0x45, 0xe6}}
	return a, nil
}

var _transfer_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x70\x3e\xac\x0e\xb0\xc6\x97\x61\x07\xa3\x1f\x28\xda\x15\xe8\xa5\x2b\xba\xec\x07\x28\x32\x6d\x6b\x73\x44\x83\x62\x9a\x16\x45\xff\xfb\x20\x7f\xc8\x4e\xe2\x60\xf3\x49\x89\xc8\xf7\xc8\xc7\x47\x99\x4d\x43\x2c\xf0\x48\xf6\x7e\x6b\x4b\xb3\xae\x71\x45\x7f\xd0\x42\xc1\xb4\x81\x78\xb9\x4c\x35\x59\x61\xa5\xc5\xa5\x87\x31\x4b\x9d\xeb\x38\xea\x01\xbe\xbf\xaa\x4d\x53\xe3\xe3\xfd\x6a\x2e\x75\xbc\xed\x92\xa2\x34\x4d\x61\x55\x19\x07\xc2\xca\x3a\xa5\xc5\x90\x05\xe3\xa0\x20\xee\xfe\x2a\x90\xd9\xd8\x12\x94\xcd\x61\x00\x6d\xb3\xc8\x22\x28\xad\x69\x6b\x05\x84\x40\x59\x92\x0a\x39\x8a\x26\x40\x09\xa3\x36\x8d\x41\x2b\x19\xdc\xe4\x39\xa3\x73\x5f\x60\x67\xa4\xca\x59\xed\x1e\xee\x32\xf8\xf5\x60\xe5\xdb\xd7\x05\xbc\x47\x11\x00\x80\x87\x7d\xc6\x02\x19\xad\x46\x0f\x2a\x15\x86\x78\xe4\x33\x07\x9a\xea\x1a\x5b\xec\x36\xa1\x46\x09\xf7\xcf\x58\x64\xf0\x79\xd2\xe0\xed\x18\x3b\x83\x4e\x45\x8b\x3e\x02\x7a\xbe\x1c\x1b\x72\x46\xda\x1b\xdf\xac\x50\xa0\xe9\xaf\x3a\x96\xf7\xa3\x11\x8c\x64\x4f\xdb\x75\x6d\xf4\x47\xc7\xd9\x30\x36\x8a\x31\x71\xa6\xb4\xc8\x19\xdc\x6c\xa5\xba\xe9\x44\xf3\x5d\x43\xff\xa5\x29\xac\x89\x99\x76\xa0\x80\x0f\x05\xe8\x72\xcf\x5c\x5b\xd1\x81\x00\xfe\x73\x58\x17\xcb\x89\x0a\x70\xd9\xa7\x84\x08\xff\x2d\x3b\x82\x8b\x79\x85\xae\x12\x3f\xd7\x0c\x66\x2f\x7f\x0a\xb1\x2a\xf1\x49\x49\xb5\xd8\xc3\xbc\xbe\x86\x46\x59\xa3\x93\xb8\xef\x09\x72\x42\x07\x96\x04\x9c\x10\x23\x28\x0b\xb4\xfe\x8d\x5a\x40\x75\xa2\xba\x06\xb5\x29\x0c\xe6\xd0\x28\xa9\xe2\x45\x34\x95\xa0\xc4\x2e\x28\xb8\xc6\x41\xd3\x8a\x19\x7c\xd6\x81\x85\x1c\x3f\x97\x10\x0c\x97\x1e\xa0\x2f\x64\x74\xde\x3e\x45\x50\xb9\x07\x3e\x12\x9b\x51\xa3\x79\x41\x3e\xb2\x5a\x50\x7a\x34\x02\x5c\x8e\xec\xfb\x5a\x97\x28\xb7\xaa\x51\x6b\x53\x1b\x79\x4b\x66\x45\xed\x6c\x72\xac\x69\x98\xd3\x7f\x78\xec\x2a\x39\x35\x8f\x5b\xda\xd6\x79\x3b\x88\xd3\xbe\x1a\x5a\xdd\x5b\xab\x61\x24\xbd\x7f\xf1\x15\xf5\x56\x70\x58\xd0\x5e\xc5\xc1\x6c\x61\x4f\xda\x97\xc6\xff\xa0\x9d\x9d\xdb\xd3\x61\x58\xb6\x10\xb8\x38\x3f\x72\x6c\x38\x27\xd3\xc7\x61\x3c\xef\xcf\xf0\xee\x60\x49\x8d\xdd\x77\xcd\x3c\xfd\xc1\xec\x86\x63\x22\x5e\xda\x0c\x2e\xce\x6d\x21\x8b\x69\xeb\x0d\x39\x99\xac\xe8\xa7\xa3\xa2\x4b\x94\x87\x3b\x97\x2c\x96\xfe\x79\x55\xc6\xba\x49\xf5\x8b\x0c\xe2\x1f\x6c\x4a\x63\x55\xdd\x89\x02\xae\x0a\x33\xa9\xd4\x0b\x86\xf2\x95\x7d\xdb\x10\x63\x7c\xb2\xd2\x7f\xf1\xac\xfa\xe6\xf1\x65\xca\xb2\xf3\xb4\x03\x49\xdc\x37\xf6\xf1\x37\x00\x00\xff\xff\xe7\x26\x82\xba\x66\x06\x00\x00"

func transfer_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_transfer_nftCdc,
		"transfer_nft.cdc",
	)
}

func transfer_nftCdc() (*asset, error) {
	bytes, err := transfer_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "transfer_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0xec, 0xd6, 0x6b, 0x99, 0xad, 0x29, 0x62, 0x1f, 0x8b, 0x9f, 0x83, 0x4c, 0xd3, 0x1e, 0x9a, 0xb1, 0x77, 0x68, 0x8b, 0xa2, 0x6a, 0x77, 0xf2, 0x0, 0x44, 0xa5, 0x9a, 0x68, 0xa9, 0xe6, 0x61}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"destroy_nft.cdc":                      destroy_nftCdc,
	"mint_nft.cdc":                         mint_nftCdc,
	"scripts/borrow_nft.cdc":               scriptsBorrow_nftCdc,
	"scripts/get_collection_length.cdc":    scriptsGet_collection_lengthCdc,
	"scripts/get_nft_metadata.cdc":         scriptsGet_nft_metadataCdc,
	"scripts/get_total_supply.cdc":         scriptsGet_total_supplyCdc,
	"setup_account.cdc":                    setup_accountCdc,
	"setup_account_from_nft_reference.cdc": setup_account_from_nft_referenceCdc,
	"setup_account_to_receive_royalty.cdc": setup_account_to_receive_royaltyCdc,
	"transfer_nft.cdc":                     transfer_nftCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"destroy_nft.cdc": {destroy_nftCdc, map[string]*bintree{}},
	"mint_nft.cdc": {mint_nftCdc, map[string]*bintree{}},
	"scripts": {nil, map[string]*bintree{
		"borrow_nft.cdc": {scriptsBorrow_nftCdc, map[string]*bintree{}},
		"get_collection_length.cdc": {scriptsGet_collection_lengthCdc, map[string]*bintree{}},
		"get_nft_metadata.cdc": {scriptsGet_nft_metadataCdc, map[string]*bintree{}},
		"get_total_supply.cdc": {scriptsGet_total_supplyCdc, map[string]*bintree{}},
	}},
	"setup_account.cdc": {setup_accountCdc, map[string]*bintree{}},
	"setup_account_from_nft_reference.cdc": {setup_account_from_nft_referenceCdc, map[string]*bintree{}},
	"setup_account_to_receive_royalty.cdc": {setup_account_to_receive_royaltyCdc, map[string]*bintree{}},
	"transfer_nft.cdc": {transfer_nftCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
