// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../transactions/mint_nft.cdc (1.18kB)
// ../../../transactions/setup_account.cdc (814B)
// ../../../transactions/transfer_nft.cdc (1.013kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mint_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\xf3\xe1\xab\x74\xb1\x7a\x36\x9a\x18\xae\x13\x17\x3d\x54\x2d\x12\xbd\x00\x45\xad\xa5\x6d\x29\x52\x20\x57\xb1\x8b\xc0\xef\x5e\x90\xfa\x4f\xdd\x56\x07\xdb\xb0\x66\x66\x67\x67\x48\xaa\x1b\x63\x19\x52\xa3\x8f\xad\x2e\x29\x57\x98\x99\x1f\xa8\xe1\x64\x4d\x0d\xef\x2f\xe9\x31\xdb\x3f\x3c\x3c\x3d\x3e\x3f\xaf\x7a\xe4\xe3\x45\xd4\x8d\xc2\xf4\x98\xcd\x30\x87\xaf\x69\xf6\xb4\x3f\x8c\xd8\x55\x92\x40\x56\x91\x03\x27\x2d\x35\x0c\xad\x43\x07\x5c\x21\xa4\xc7\xec\x0b\x69\x46\x0b\x16\x9d\x69\xad\x44\x60\x03\x35\x69\x06\x01\x1a\xcf\x1e\xe0\xc9\x9f\x19\xea\xd6\x31\xe4\x08\xb6\xd5\x70\x26\xae\x02\x5f\x48\x69\x5a\xcd\xc0\x95\x60\xa8\x44\x27\x5a\x2f\x15\x3d\xdf\xb1\xb1\x58\x00\x69\x48\xfc\x4f\x51\x62\x32\x8e\x5e\xad\xd8\x0a\xed\x84\x64\x32\x3a\xb2\x28\xa9\x21\xd4\xbc\x85\x7d\x51\x58\x74\x2e\x86\xd7\x15\x00\x40\xf8\x48\x12\x50\x46\x0a\x05\x2f\xc2\x92\xc8\x15\xc2\xc9\xd8\x20\x4f\xba\x5c\x4e\x3f\xa1\x45\x2d\x31\xd0\x14\x72\xff\x62\x0b\xff\x4f\x91\x6d\x66\x26\x3c\xac\xb1\xd8\x08\x8b\x91\xa3\x52\x7b\xe8\xbe\xe5\x6a\xdf\xad\xe8\x5d\x04\x4c\xef\x22\x37\xd6\x9a\x33\x88\x69\x90\x4f\xee\x0f\x99\x92\x86\x7e\xed\x51\xc2\xa1\x3a\x6d\x7a\xaf\x77\xd0\x0d\xdc\x74\xa2\x1f\x6e\x3a\xbc\x8f\x7c\xbf\xdb\x1b\x01\xc6\xbb\x51\xd5\x3f\xbb\x1d\x34\x42\x93\x8c\xd6\x07\xd3\xaa\x02\xb4\xe1\xbf\xbb\xed\x93\x59\xc7\x41\xe6\xda\xad\x89\x17\x94\x2d\x63\x9f\x7d\xbf\xf4\x27\xe4\x40\x6a\xda\x5c\x91\x1c\xdb\x37\xf9\x77\x94\x1c\x9a\xf0\x6f\xc7\x0a\x47\xaa\x8f\x7f\xfc\x17\xee\xa0\x44\xee\x63\x9d\xfa\x8e\x17\xf1\x7e\xec\x0c\x2f\xe4\xde\xb9\x61\xb0\x37\x2d\x8d\x52\x18\xce\xcc\x9b\xae\x67\x03\x91\x5e\x42\xbc\xbf\x3b\xf2\xcf\xa6\x44\x3e\x88\x46\xe4\xa4\x88\x7f\x46\x49\x27\xee\x73\x3d\x8c\xda\xf1\x7f\x4b\xca\xd0\xd0\xeb\xdb\x1b\xba\x99\x38\xdf\x82\xce\xf5\x3e\x8a\xff\xd9\x4b\x39\xf7\x79\xb3\x9b\x49\x76\xbd\x4c\xc8\x77\x3f\xa2\x84\x2e\xa0\xc0\xc6\x38\x62\x20\x1e\xf8\xf3\xe4\xa6\xb8\x6e\x1d\xc1\xf0\x95\x1e\xb3\xf9\xf5\x1b\x7c\x0d\xc7\xe2\xfa\x2b\x00\x00\xff\xff\xf2\x8d\xfb\x03\x9c\x04\x00\x00"

func mint_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_mint_nftCdc,
		"mint_nft.cdc",
	)
}

func mint_nftCdc() (*asset, error) {
	bytes, err := mint_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mint_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x26, 0xbc, 0xd9, 0x66, 0x10, 0xee, 0x1, 0x78, 0x76, 0x3b, 0x1c, 0x7f, 0x10, 0x6, 0xd5, 0xc9, 0x44, 0x74, 0x92, 0x3f, 0xa9, 0xad, 0xd6, 0x8d, 0x8c, 0xc5, 0x4c, 0x96, 0x7e, 0xe5, 0xe3, 0xae}}
	return a, nil
}

var _setup_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xe2\x30\x10\xbe\xe7\x29\xbe\xbd\x74\x83\xd4\x92\x3d\x57\xb4\x5a\x44\x41\xda\x4b\x76\xd5\xe6\x05\x06\x33\x21\x56\x8d\x6d\xd9\x93\x52\x84\x78\xf7\x95\x43\x1b\x42\x0b\x3e\xe4\x10\x7f\xf3\xfd\x8d\xf5\xc6\xbb\x20\x28\x9d\x5d\xb4\x76\xad\x97\x86\x2b\xf7\xca\x16\x75\x70\x1b\xfc\x7a\x2f\x17\xd5\xf4\xe9\xe9\x79\xfe\xf2\x92\x7d\x20\xe7\xef\xb4\xf1\x86\xcb\x45\x35\xc0\xcc\xfe\x96\xd5\xf3\x74\xd6\x63\x8b\x02\x55\xa3\x23\x24\x90\x8d\xa4\x44\x3b\x0b\x1d\xb1\x6d\x48\x40\x16\xa4\x94\x6b\xad\x60\xeb\x5a\xb3\x42\x68\x6d\x1a\x10\x87\xc8\x02\x2d\x91\x4d\x8d\xd6\xa7\x1f\x81\x15\xeb\x37\x46\xb9\xa8\x62\x96\x0d\xd9\xf6\x19\x00\xf8\xc0\x9e\x02\xe7\xa4\x94\xdc\x63\xda\x4a\x33\x3d\x52\x8f\xb0\xcf\x3a\x44\x3a\x45\x81\x3f\x35\xa4\xe1\x5e\x78\xe5\x38\xda\x9f\x02\x32\x81\x69\xb5\x43\x43\x6f\x0c\x82\x72\xc6\x70\xc7\xdf\xcf\xea\x3a\x0d\xc9\x78\xe9\x42\x70\xdb\xc9\xcd\x29\xfe\x78\xd6\xa3\x1f\xf3\x54\xc5\x3d\x8a\x28\x2e\xd0\x9a\x8b\x54\x49\x7f\x3b\xc2\xc3\x03\xac\x36\x43\x4b\x1f\xb6\x66\x81\x49\x92\xb2\xe5\x2d\x78\xe3\x65\x77\xc9\x43\x3a\x86\x65\x70\x85\xc9\xdd\x60\x11\x63\xd5\xd1\xcc\xd3\xfc\x49\x36\x1f\x81\xe2\x0f\xfc\xbe\xe8\xf8\x8c\xfb\xab\xab\x98\xda\xd0\x92\x16\x30\x28\xed\x0c\xd5\x75\x92\x70\xf9\xe4\xee\x64\xeb\x16\xe2\xae\xb6\xf0\x2d\xbc\xfa\x0c\xef\xdb\xa5\xd1\x0a\x8a\x3c\x2d\xb5\xd1\xb2\x43\xed\x42\x27\x7d\xa5\x8c\x4e\xdd\x68\xfb\x3a\xb9\xd9\x7f\x7d\xb9\x83\x90\xff\x3a\xde\xc3\x63\x5e\x1c\x15\xce\x0d\xdd\x42\x28\xac\x59\xae\x1b\xfe\x94\x3b\x64\xc7\xef\x21\xfb\x1f\x00\x00\xff\xff\xf3\x87\x0d\x06\x2e\x03\x00\x00"

func setup_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_setup_accountCdc,
		"setup_account.cdc",
	)
}

func setup_accountCdc() (*asset, error) {
	bytes, err := setup_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "setup_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0x66, 0xe9, 0xbd, 0x34, 0xab, 0xac, 0xe8, 0x5c, 0xb6, 0x69, 0x74, 0x44, 0x5a, 0x7f, 0xab, 0xbf, 0x8a, 0x57, 0x84, 0x4b, 0x66, 0x5e, 0xc8, 0xff, 0x48, 0xb2, 0x98, 0x2f, 0x20, 0xcb, 0x23}}
	return a, nil
}

var _transfer_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcd\x6e\x9b\x40\x10\xbe\xf3\x14\x93\x1c\x5a\x2c\x35\xa6\x87\xaa\x07\xcb\x49\x64\xe1\x58\xca\xc5\xad\x1c\xfa\x00\xcb\x32\xc0\xb6\x78\x07\xcd\x0e\x75\xaa\xc8\xef\x5e\xad\xb1\x17\x48\x93\x72\x1a\x2d\x33\xdf\xdf\x8c\xd9\xb7\xc4\x02\x5b\xb2\x9b\xce\x56\x26\x6f\x30\xa3\x5f\x68\xa1\x64\xda\xc3\xe7\xe7\xed\x26\x5b\xad\xd7\xbb\x87\xa7\xa7\xe8\xdc\xf9\xf0\xac\xf6\x6d\x83\xdb\x4d\x36\xea\x49\xbf\x6d\xb3\xdd\x2a\x0d\xbd\x51\x92\x40\x56\x1b\x07\xc2\xca\x3a\xa5\xc5\x90\x05\xe3\xa0\x24\xee\x9f\x4a\x64\x36\xb6\x02\x65\x0b\x08\x50\x7e\x8a\x2c\x82\xd2\x9a\x3a\x2b\x20\x04\xca\x92\xd4\xc8\x51\x34\x02\x8a\x19\xb5\x69\x0d\x5a\x59\xc0\xaa\x28\x18\x9d\xfb\x04\x07\x23\x75\xc1\xea\xf0\xb8\x5e\xc0\x8f\x47\x2b\x5f\xbf\xcc\xe0\x25\x02\x00\x68\x19\x5b\xc5\x18\x2b\xad\xfd\x40\x27\xf5\xaa\xc7\xbf\x34\xf8\x2f\x14\x49\x02\x15\x0a\x48\x8d\x10\x68\x1c\xb4\x5d\xde\x18\x1d\x84\x51\xfe\x13\xb5\x84\x99\x06\x65\x68\x86\x5b\x0f\x70\xa6\x18\xa4\xce\xa2\x31\x45\x4e\xcc\x74\x00\x05\x8c\x25\x32\x5a\x8d\xde\xac\x27\x75\xa6\xb2\xc8\x1f\xdd\x29\x15\x4d\x4d\x83\x27\xcf\x13\xae\xe1\x79\x87\x25\xdc\x7a\x59\x32\xef\x21\x97\x1f\x86\xfd\xcc\xd3\xd0\x77\x17\xfb\x80\x17\x90\x38\x21\x56\x15\x26\x7e\x67\xe1\xef\x2c\xa0\xfb\xef\xfe\x1e\x5a\x65\x8d\x8e\xaf\x53\xea\x9a\x02\x2c\xc9\x7f\xf4\xd2\xa1\x97\x3b\x68\xba\x7e\xc7\xea\x39\xc3\x7f\x10\x18\x35\x9a\xdf\xc8\xee\x3d\xbb\x05\xb6\xe4\x8c\xf4\x5e\x43\xa0\xf3\x0a\x25\x55\xad\xca\x4d\x63\xe4\x4f\x9c\xf4\xf0\xaf\x8c\x5d\x85\x58\x5e\x5e\x5f\xf8\x28\x9d\xef\xa7\xd1\xe3\x5d\x3c\xbb\x9a\x48\xbf\xdc\xd4\x49\x66\xb8\xd2\xb7\x5d\x4f\x14\xdb\x52\x60\x79\x33\xdd\xd3\xfc\x82\x16\x8f\x4f\x75\xa8\xa7\xa9\xad\x7b\xcf\x81\xd9\xd8\xe9\x49\xbe\xcd\x3d\x24\x35\x3f\x97\xb1\x78\xaf\x0b\x58\xde\xd8\x52\xfa\x3d\x1f\xa3\xe3\xdf\x00\x00\x00\xff\xff\x1c\x7a\xbe\x0e\xf5\x03\x00\x00"

func transfer_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_transfer_nftCdc,
		"transfer_nft.cdc",
	)
}

func transfer_nftCdc() (*asset, error) {
	bytes, err := transfer_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "transfer_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0x55, 0xdb, 0x74, 0x7, 0x3f, 0x3e, 0x7e, 0x1b, 0x4c, 0xb, 0x36, 0xf7, 0x41, 0x94, 0xb4, 0xd9, 0x85, 0x20, 0xcf, 0x3c, 0xd9, 0x8d, 0x2f, 0x5e, 0xba, 0x3e, 0x4, 0xf8, 0xe0, 0x1c, 0xd9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mint_nft.cdc":      mint_nftCdc,
	"setup_account.cdc": setup_accountCdc,
	"transfer_nft.cdc":  transfer_nftCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mint_nft.cdc":      &bintree{mint_nftCdc, map[string]*bintree{}},
	"setup_account.cdc": &bintree{setup_accountCdc, map[string]*bintree{}},
	"transfer_nft.cdc":  &bintree{transfer_nftCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
