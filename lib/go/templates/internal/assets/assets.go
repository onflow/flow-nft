// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../transactions/mint_nft.cdc (1.081kB)
// ../../../transactions/setup_account.cdc (809B)
// ../../../transactions/transfer_nft.cdc (1.098kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mint_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xcd\x8e\xd3\x30\x10\xbe\xe7\x29\x46\x7b\x80\xf4\xd2\x70\xae\x60\x57\xa5\xbb\x95\x38\x10\xd0\x6e\x5e\xc0\x71\xa6\xc9\x08\xc7\xb6\xec\xf1\xb6\xa8\xea\xbb\x23\xe7\xbf\x55\x81\x5c\x12\x29\xf3\x7d\xf3\xfd\xd8\xd4\x5a\xe3\x18\x72\xa3\xf7\x41\xd7\x54\x2a\x2c\xcc\x2f\xd4\x70\x70\xa6\x85\x4f\xa7\x7c\x5f\x6c\x9f\x9f\x5f\x5f\xde\xde\x92\x61\xf2\xe5\x24\x5a\xab\x30\xdf\x17\x8b\x99\xdd\x8f\xbc\x78\xdd\xee\xa6\xd9\x24\xcb\xa0\x68\xc8\x83\x97\x8e\x2c\x43\xf0\xe8\x81\x1b\x84\x7c\x5f\x7c\x27\xcd\xe8\xc0\xa1\x37\xc1\x49\x04\x36\xd0\x92\x66\x10\xa0\xf1\x18\x07\x22\xf8\x1b\x43\x1b\x3c\x43\x89\xe0\x82\x86\x23\x71\xd3\xe1\x85\x94\x26\x68\x06\x6e\x04\x43\x23\x7a\xd2\xf6\x9a\x31\xe2\x3d\x1b\x87\x15\x90\x86\x2c\x7e\x8a\x1a\xb3\x69\x75\x92\xb0\x13\xda\x0b\xc9\x64\x74\xea\x50\x92\x25\xd4\xbc\x81\x6d\x55\x39\xf4\x7e\x05\xe7\x24\x01\x00\xc8\x32\x50\x46\x0a\x05\xef\xc2\x91\x28\x15\xc2\xc1\xb8\x8e\x9a\x74\x7d\xbd\xf9\x80\x0e\xb5\xc4\x0e\xa6\x90\x87\x1f\x1b\xf8\x30\xc7\xb5\x5e\x08\x88\x63\xd6\xa1\x15\x0e\x53\x4f\xb5\x8e\xa3\xdb\xc0\xcd\xb6\xb7\x37\x29\x18\x54\x94\xc6\x39\x73\x04\x31\x2f\x8a\xa9\xfd\x25\x4f\xd2\x30\x58\x9e\x28\x3c\xaa\xc3\x7a\xd0\xfa\x05\xfa\x85\xeb\x9e\xf4\xf3\x5d\x85\x8f\x69\xec\x76\x73\x27\xbc\xd5\x44\x1a\x9f\xa7\x27\xb0\x42\x93\x4c\x1f\x76\x26\xa8\x0a\xb4\xe1\x7f\x8b\x1d\x82\x79\xe8\x69\x2e\xbd\x4b\x3c\xa1\x0c\x8c\x70\x5e\x7a\xfe\xda\xd3\x44\xdc\x54\xd1\x47\x0f\x36\x94\x8a\x64\x47\x25\x8d\x52\xd8\x95\x78\x53\xc0\x58\x82\x43\x89\xf4\xde\x79\xae\x91\x87\x6c\xe7\xc2\xaf\xad\xac\x6b\xe4\x9d\xb0\xa2\x24\x45\xfc\x3b\xcd\xfa\x45\xd1\xf8\x6e\xda\x73\x83\x18\x13\x3c\xdf\xde\x9e\xf5\x0c\xf9\xd9\xd1\x5c\x1e\xd3\xff\x07\x57\x2f\x25\xdf\x0d\x6f\xa6\x7d\x58\x5d\x1d\x90\xd8\xcd\x34\x25\x74\x05\x15\x5a\xe3\x89\x81\x78\xc4\x2f\x43\x9c\x93\xbb\x77\x44\xba\x57\xbe\x2f\x96\x57\x63\xd4\x35\xf6\x76\x49\xfe\x04\x00\x00\xff\xff\xee\x53\x03\x8f\x39\x04\x00\x00"

func mint_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_mint_nftCdc,
		"mint_nft.cdc",
	)
}

func mint_nftCdc() (*asset, error) {
	bytes, err := mint_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mint_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x53, 0xd, 0x4b, 0x5c, 0x31, 0xe, 0xcd, 0x8e, 0xd3, 0x41, 0x80, 0x42, 0x9f, 0x3d, 0xde, 0x22, 0xd0, 0x3b, 0x81, 0x61, 0xda, 0x19, 0xa4, 0xd4, 0xd5, 0x59, 0x2f, 0xd8, 0x64, 0x60, 0x8, 0xeb}}
	return a, nil
}

var _setup_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x6f\xe2\x30\x10\x85\xef\xf9\x15\x6f\x2f\x55\x90\x5a\xb2\xe7\x8a\xad\x84\x28\x1c\xb3\x2b\x9a\x3f\x30\xb8\x13\x62\xd5\xd8\xd1\x64\x52\x8a\x10\xff\x7d\xe5\xb0\x35\xc9\xaa\xf5\xd1\xf9\xe6\xbd\x37\xcf\xb1\x87\x36\x88\xa2\x0c\x7e\xd3\xfb\xbd\xdd\x39\xae\xc2\x1b\x7b\xd4\x12\x0e\xf8\xf9\x51\x6e\xaa\xe5\xf3\xf3\x76\xfd\xf2\x92\xfd\x23\xd7\x1f\x74\x68\x1d\x97\x9b\x6a\xc4\xac\x7e\x97\xd5\x76\xb9\x4a\x6c\x51\xa0\x6a\x6c\x07\x15\xf2\x1d\x19\xb5\xc1\xc3\x76\x38\x36\xa4\x20\x0f\x32\x26\xf4\x5e\x71\x0c\xbd\x7b\x85\xf4\x3e\x0e\x68\x40\xc7\x0a\xab\x1d\xbb\x1a\x7d\x1b\x2f\x84\x0d\xdb\x77\x46\xb9\xa9\xba\x2c\x1b\xab\x9d\xb3\x0c\x00\x5a\xe1\x96\x84\x73\x32\x46\x1f\xb1\xec\xb5\x59\x5e\xb5\x67\x9f\x44\x3c\x45\x81\x2d\x6b\x2f\x1e\x4c\xe2\x4e\xb0\x35\xb4\xe1\x14\x83\x9c\x30\xbd\x9e\xd0\x50\x07\x82\x09\xce\xf1\x60\x92\xe6\x6d\x1d\x59\x9d\xef\x82\x48\x38\x2e\xee\x6e\x1d\xcc\x57\x89\x7e\xca\x63\x1f\x8f\x28\x3a\x0d\x42\x7b\x2e\x62\x2f\xe9\xeb\x0c\x3f\x7e\xc1\x5b\x87\x73\x52\x8d\x47\x86\x58\xe9\xea\x32\xc9\xbc\x12\x26\x65\x10\x3c\x1f\xc1\x87\x56\x4f\x5f\x85\x73\xac\xa3\x6b\x2c\x1e\x46\x4f\x34\x37\x83\xc4\x3a\xce\xde\xb2\xe4\xb3\x89\x4d\x47\xef\x0c\xab\xb1\xef\x51\x2b\x89\x18\x36\x8f\x4c\xbe\x78\xb8\xf9\xdc\x43\xc3\xb7\xbb\x4e\xe4\xcd\xe7\x16\x6d\xbf\x73\xd6\xc0\x50\x4b\x3b\xeb\xac\x9e\x50\x07\x19\x2c\xbf\xd8\x6a\x70\x75\xd6\xbf\x2d\xee\xce\xff\xff\x9c\xa3\xd2\xff\x0c\x9a\x97\xa7\x7c\xd2\x6a\x71\xb5\x9a\xa6\xba\x9f\x20\x4a\xb2\x67\xfd\x6e\x83\x84\xce\xb2\xeb\xb3\x5c\xb2\xbf\x01\x00\x00\xff\xff\x6f\xdd\x45\x6c\x29\x03\x00\x00"

func setup_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_setup_accountCdc,
		"setup_account.cdc",
	)
}

func setup_accountCdc() (*asset, error) {
	bytes, err := setup_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "setup_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0xf2, 0x38, 0xb4, 0xba, 0x1a, 0xb3, 0xee, 0xa5, 0xe7, 0x76, 0x53, 0x9c, 0x9a, 0xf1, 0x50, 0xc4, 0xf7, 0x4c, 0xd1, 0x9a, 0x61, 0xd7, 0xed, 0x20, 0x11, 0xba, 0x63, 0xb7, 0xf6, 0xe8, 0x84}}
	return a, nil
}

var _transfer_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\x9b\x4e\x10\xc6\xef\x3c\xc5\x28\x87\xff\x1f\x4b\x0d\xf4\x50\xf5\x60\x39\x89\x2c\x1c\x4b\xb9\xb8\x95\x43\x1f\x60\x59\x06\xd8\x16\xef\xa0\xd9\xa1\x4e\x15\xf9\xdd\xab\x35\xf6\x62\xda\xc4\x97\x72\x42\x30\xf3\x7d\xf3\xfd\x76\xd6\xec\x3a\x62\x81\x0d\xd9\x75\x6f\x6b\x53\xb4\x98\xd3\x0f\xb4\x50\x31\xed\xe0\xe3\xcb\x66\x9d\x2f\x57\xab\xed\xe3\xf3\x73\x74\xaa\x7c\x7c\x51\xbb\xae\xc5\xcd\x3a\xbf\xa8\xc9\xbe\x6c\xf2\xed\x32\x0b\xb5\x51\x9a\x42\xde\x18\x07\xc2\xca\x3a\xa5\xc5\x90\x05\xe3\xa0\x22\x1e\x3e\x55\xc8\x6c\x6c\x0d\xca\x96\x70\x96\xf2\x4d\x64\x11\x94\xd6\xd4\x5b\x01\x21\x50\x96\xa4\x41\x8e\xa2\x0b\x9d\x98\x51\x9b\xce\xa0\x95\x39\x2c\xcb\x92\xd1\xb9\x0f\xb0\x37\xd2\x94\xac\xf6\x4f\xab\x39\x7c\x7b\xb2\xf2\xf9\xd3\x0c\x5e\xa3\x08\x00\xa0\x63\xec\x14\x63\xac\xb4\xf6\x1d\xbd\x34\xcb\xc1\x20\x54\xf8\x27\x4d\xa1\x46\x01\x69\x10\x82\xbe\x83\xae\x2f\x5a\xa3\xc3\x44\x54\x7c\x47\x2d\xa1\xa7\x45\x19\x8b\xe1\xce\x0b\x9c\xa4\xc7\x19\x67\x13\x8b\x82\x98\x69\x0f\x0a\x18\x2b\x64\xb4\x1a\x7d\x4a\x6f\xea\x4c\x6d\x91\xff\x77\x47\x1a\x9a\xda\x16\x8f\x61\x27\x5e\xe3\xe7\x2d\x56\x70\xe7\xc7\x92\x64\x90\x5c\xfc\x37\x9e\x4b\x92\x85\xba\xfb\xd8\x83\x9d\x43\xea\x84\x58\xd5\x98\xfa\xb3\x0a\x7f\x67\x41\xdd\x3f\x0f\x0f\xd0\x29\x6b\x74\x7c\x93\x51\xdf\x96\x60\x49\xae\xcc\x4b\xfb\x61\xdc\x71\xa6\x9b\x77\xa2\x9e\x18\xfe\xa5\xc0\xa8\xd1\xfc\x44\x76\xef\xc5\x2d\xb1\x23\x67\x64\xc8\x1a\x80\x26\x35\x4a\xa6\x3a\x55\x98\xd6\xc8\xaf\x38\x1d\xe4\xaf\x05\x0b\x88\x5e\xff\xdc\xf2\x0b\x52\x5f\x8f\x32\x87\xfb\xf8\x5f\xa0\x9c\x23\x5d\xe3\x72\xde\xd4\x63\x43\xb8\x45\x6f\x23\x9d\xe0\xb0\x95\xc0\xe2\x76\xba\x04\xc9\x59\x2d\xbe\xbc\x00\xe3\xfb\xd4\x7a\x35\x00\x0d\xce\xc6\x4e\xf7\xfd\x6d\xef\xf1\x18\x92\xd3\x6b\x2c\x1e\xde\x1c\x16\xb7\xb6\x92\x81\xd7\x21\x3a\xfc\x0e\x00\x00\xff\xff\x48\x57\x14\x4b\x4a\x04\x00\x00"

func transfer_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_transfer_nftCdc,
		"transfer_nft.cdc",
	)
}

func transfer_nftCdc() (*asset, error) {
	bytes, err := transfer_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "transfer_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0x80, 0xf7, 0x84, 0xba, 0xa4, 0xf3, 0x47, 0x3d, 0xfb, 0xb0, 0xda, 0x55, 0xb5, 0x6e, 0xf6, 0x76, 0xc4, 0x28, 0x4a, 0x2, 0x17, 0xa5, 0xf7, 0x7e, 0xce, 0x9f, 0xdd, 0x3c, 0x3e, 0xd0, 0x32}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mint_nft.cdc":      mint_nftCdc,
	"setup_account.cdc": setup_accountCdc,
	"transfer_nft.cdc":  transfer_nftCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mint_nft.cdc": {mint_nftCdc, map[string]*bintree{}},
	"setup_account.cdc": {setup_accountCdc, map[string]*bintree{}},
	"transfer_nft.cdc": {transfer_nftCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
