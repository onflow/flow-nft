// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../transactions/destroy_nft.cdc (509B)
// ../../../transactions/mint_nft.cdc (2.598kB)
// ../../../transactions/scripts/borrow_nft.cdc (581B)
// ../../../transactions/scripts/get_collection_length.cdc (465B)
// ../../../transactions/scripts/get_nft_metadata.cdc (1.761kB)
// ../../../transactions/scripts/get_total_supply.cdc (118B)
// ../../../transactions/setup_account.cdc (928B)
// ../../../transactions/setup_account_to_receive_royalty.cdc (830B)
// ../../../transactions/transfer_nft.cdc (1.179kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _destroy_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x6f\xe2\x40\x0c\x85\xef\xf9\x15\x4f\x39\xec\x86\xc3\x26\x97\xd5\x1e\x22\xb6\x08\xd1\x22\x71\x41\x55\x4b\x7f\xc0\x30\x71\xc8\xa8\xc1\x8e\x1c\x47\x69\x55\xf1\xdf\xab\x40\x49\xa1\xc2\xa7\xd1\xf8\x7d\xef\xd9\x0e\xfb\x46\xd4\xb0\x16\x5e\x76\xbc\x0b\xdb\x9a\x36\xf2\x4a\x8c\x52\x65\x8f\x38\x4d\x33\x2f\x6c\xea\xbc\xb5\xd9\x4f\x4d\xea\x0b\x1f\x47\x5f\x06\x0f\x6f\x6e\xdf\xd4\xb4\x5e\x6e\x6e\xa1\xdf\xdd\x13\x14\x99\x3a\x6e\x9d\xb7\x20\x9c\x84\x22\xc7\xcb\x8a\xed\xdf\xdf\x09\x3e\x22\x00\x68\x94\x1a\xa7\x94\xb4\x61\xc7\xa4\x39\xe6\x9d\x55\x73\xef\xa5\x63\x3b\x4b\x86\xaa\xc9\xe0\xa5\xae\xe9\xe8\xf3\x44\x25\xfe\xe3\x84\xa4\x5b\x51\x95\x7e\xfa\xeb\x22\x78\x31\x2a\xef\x92\x61\xc4\x1c\x37\x9b\xcf\x26\xea\x76\xf4\xe8\xac\x9a\x8c\x49\x43\xcd\x66\x68\x1c\x07\x9f\xc4\x0b\xe9\xea\x02\x2c\x86\x53\x0c\x1c\x94\x4a\x52\x62\x4f\x30\x81\x55\x04\xe9\x99\xf4\x77\x7b\x31\x5f\x3c\x89\x46\xbf\x2c\x43\x1f\xac\x2a\xd4\xf5\x47\xf5\x78\xb6\xdb\xe8\xd5\xc6\x5c\x1a\xa6\x7f\xae\x17\x4f\xcf\x6e\xc9\xf9\xb1\xba\xcf\x11\x8a\x8b\xc8\x82\x5a\x53\x79\x1f\xf0\xe3\xdf\x21\x3a\x44\x9f\x01\x00\x00\xff\xff\xbd\x0b\x03\xcd\xfd\x01\x00\x00"

func destroy_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_destroy_nftCdc,
		"destroy_nft.cdc",
	)
}

func destroy_nftCdc() (*asset, error) {
	bytes, err := destroy_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "destroy_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x24, 0x4f, 0x57, 0xb2, 0xc6, 0x27, 0xe0, 0x9e, 0xca, 0x4e, 0x50, 0xc7, 0xe3, 0xd1, 0xd3, 0xb1, 0x36, 0xe8, 0x38, 0x59, 0xb7, 0x69, 0x24, 0x74, 0x82, 0x70, 0x76, 0x1a, 0x11, 0x9c, 0xeb, 0x86}}
	return a, nil
}

var _mint_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x4f\x6f\xdb\xb8\x13\xbd\xeb\x53\x0c\x7c\xc8\x4f\xc6\xaf\xb0\xb2\x41\x37\x28\x8c\x3a\x45\x9a\xad\x81\x1e\x6a\x14\xad\xdb\x4b\x90\xc3\x88\x1a\x4b\xc4\x52\xa4\x96\x1a\xc5\x0e\x82\x7c\xf7\x05\x45\xfd\xa3\xab\x66\x75\x88\x25\xce\x7b\xc3\xe1\xcc\x9b\x61\x64\x59\x19\xcb\xb0\x33\x7a\xdb\xe8\x5c\xa6\x8a\xf6\xe6\x6f\xd2\x70\xb0\xa6\x84\xc5\x6a\x95\x08\xa3\xd9\xa2\xe0\x3a\x39\xc7\xac\x44\x26\x16\x51\xe7\xe0\xd3\x09\xcb\x4a\xd1\x6e\xbb\x9f\xa3\x8e\xd6\x80\xf4\x85\x18\x33\x64\xfc\x29\xe9\x58\xcf\xf1\x02\x40\x40\x9d\x89\xf6\xf2\x44\xf4\xee\xea\xdd\x9f\xd7\xe9\xe1\xea\x92\xae\x10\xaf\xa3\x28\x49\x60\x5f\xc8\x1a\x6a\x61\x65\xc5\xd0\xd4\x54\x03\x17\x04\xbb\xed\xfe\x8b\xd4\x4c\x16\x2c\xd5\xa6\xb1\x82\x80\x0d\x94\x52\x33\x20\x68\x3a\x3a\x80\x23\x7f\x66\x28\x9b\x9a\x21\x25\xb0\x8d\x86\xa3\xe4\xa2\xe5\xa3\x10\xa6\xd1\x0c\x5c\x20\x43\x81\xde\x69\x19\x7a\x74\xfc\x9a\x8d\xa5\x0c\xa4\x86\xc4\xbd\x62\x4e\xc9\xb0\x75\x14\xb1\x45\x5d\xa3\x60\x69\x74\x1c\x01\x00\x58\x12\xb2\x92\xa4\x79\x0d\xb7\x59\x66\xa9\xae\xdf\xb4\xeb\x1a\x4b\x5a\xc3\x77\xb6\x52\xe7\x7e\x25\x23\x7f\x24\x69\x74\x68\xe0\xa2\x29\x53\x8d\x52\x85\xcb\xa2\xe1\x7a\x0d\xf7\x3f\xb6\xf2\x74\xfd\xf6\xc1\xaf\x59\xf3\x84\x8a\x9f\xfe\x1a\x5d\x39\x88\x67\x85\x90\x8f\xa4\xe9\x20\x85\x44\x2b\xc9\x61\xba\xe0\x3a\x10\x65\xd2\x91\x77\x4d\x99\x92\x5d\xc3\x8f\xcf\x9a\xaf\xdf\x7a\x53\x89\xa7\x4f\xde\x3a\xae\x2f\xe1\x39\x6a\x8d\x49\x02\xca\x08\x54\xf0\x88\x56\x62\xaa\x08\x0e\xc6\xb6\x29\x93\x3a\x0f\x33\x7a\x20\x4b\x5a\x50\x4b\x53\xc4\x9d\x61\x0d\x17\x13\x65\x4d\x12\xdb\xc3\x7c\xf8\x3e\xe6\x50\x4b\xdf\xfc\xc1\x1e\x22\x0f\xae\x2c\x55\x68\x29\xae\x65\xae\x9d\xdf\xdb\x86\x8b\x5b\x5f\x63\x17\x2e\x74\x4f\x92\x40\x6a\xac\x35\x47\xc0\x31\x28\xa7\x9c\xdf\x68\x4a\x6a\xe8\xca\x3e\xb8\xa8\x49\x1d\x56\xdd\xb9\x36\xe0\xf7\x5b\x79\xa7\xef\x67\x4f\x73\x13\x3b\x75\xaf\x27\x1d\xb6\xf2\x86\xef\xde\xf3\x57\xe4\x62\x39\xb8\x77\xcf\x87\x0f\x50\xa1\x96\x22\x5e\xdc\x99\x46\x65\xa0\x0d\xbf\x1e\x76\x97\xce\xc5\xe8\x66\x7a\x62\x61\x09\xb9\xaf\x48\x27\x08\xc8\x88\x51\xaa\x7a\xc0\x3d\xa2\x05\xdf\x12\x1b\xb8\x0c\x0f\x3b\x14\x01\x36\x70\xff\x30\xd8\x8e\x85\x54\x34\x2b\xb0\x95\x22\x9d\x73\x01\x37\x9d\xc7\xe7\xe0\x74\xae\xae\xe9\x00\x7f\x82\xcd\xac\x8f\xfb\x96\xfa\xf0\x1a\xf3\x0e\x2b\x4c\xa5\x92\xec\x7c\xe4\xc4\x5d\xbd\xe3\x09\x24\xcc\xeb\x2a\x27\x1e\x49\xef\x2f\xc2\x69\xf8\x13\x1b\xc5\xcf\xe1\xda\x37\x12\x24\x1f\xc9\xbe\xdc\xc4\xa1\xfc\x72\xe2\x4e\x81\x3d\xe4\x6b\x93\x2a\x29\x5c\x31\xe3\xe5\x32\x0a\xf6\x0d\xb3\xb8\xc2\xaa\x22\x9d\xc5\x01\xc4\x3d\xb3\x02\xff\x15\xd6\xcd\x99\x76\xd3\xf5\x7c\x3e\xde\xcc\x92\x44\xc3\xeb\x76\x8e\x74\xb9\x9d\x47\x05\x83\x69\x66\xc2\xcc\x15\xc6\x3d\x61\xaa\xc3\xaf\x5e\x58\xfe\xf7\xff\xf0\xc7\x60\x7d\x89\xfc\xdf\xbe\x89\x27\x5a\x71\x91\xf6\x4a\xda\x6c\xe6\x42\xe9\xad\x17\x17\xbf\x01\xcf\xa9\x72\x0d\x8b\x5b\x6b\xf1\x09\x3a\x74\x5d\xb4\x3d\x96\x12\xd0\x3f\x0d\xaa\x76\x84\xf5\x4d\x62\x49\x21\x53\xd6\x37\xcb\x62\x1a\x2c\x9d\x48\x34\x4c\xfd\x2c\x04\xdf\x6b\x1f\x7d\x9b\xb6\x9d\xd6\xdf\x05\xff\xab\xa1\x6a\xc5\xd1\xb6\xaa\x30\x4a\x51\x7b\x65\x9c\x8d\x45\xe8\x67\x5e\x57\xdb\x50\xd4\x83\xb7\xd7\x24\x1d\x4f\x66\xcc\xdd\xb0\xcf\xa8\xcc\x33\x6e\x3f\xb5\x9e\x7f\xf9\xcf\xe0\x9c\xfc\x72\x13\xff\xf7\x88\xca\xa7\xc1\xcf\x8e\xa9\xd1\xed\x62\x19\xa4\xcd\x0d\xc4\x01\x85\xda\x65\xbc\x32\xb5\x64\x90\xdc\xf3\xa7\xe9\x1c\x73\x38\x37\x96\xdb\x9f\xdd\x76\x1f\xb6\xce\xe4\x6a\xee\x83\x0c\x1b\xc0\xdf\xd1\xee\x6f\xb8\x1e\x34\xc4\xe4\x23\x44\x4d\xae\xed\xe1\x35\x44\x4c\xee\xb2\x70\x20\x84\xb0\xb3\xcb\x38\xf8\x0c\x91\xd3\xbb\x79\x7c\x1f\x31\xcb\x4e\xae\x2f\x11\xfc\x1b\x00\x00\xff\xff\xec\xb4\x33\xae\x26\x0a\x00\x00"

func mint_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_mint_nftCdc,
		"mint_nft.cdc",
	)
}

func mint_nftCdc() (*asset, error) {
	bytes, err := mint_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mint_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1a, 0xc4, 0x7c, 0xd3, 0x65, 0x1d, 0x8d, 0xdc, 0xf2, 0x49, 0x56, 0xba, 0x27, 0xa6, 0x93, 0x89, 0x14, 0xc5, 0x3c, 0xff, 0x7a, 0xd0, 0x49, 0x2f, 0x92, 0x61, 0xc6, 0x2d, 0x3a, 0xac, 0xbf, 0x6d}}
	return a, nil
}

var _scriptsBorrow_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x0f\x1f\x16\x1b\x16\xfb\xb2\xec\x21\x34\x0d\x69\x68\xa0\x97\x10\x8a\x7b\x2e\xf2\x78\x9c\x0c\x95\x25\x21\xcb\xb4\x25\xe4\xbf\x97\xc4\xb1\x9d\xa6\x54\x27\x09\xbd\x6f\xa4\xf7\x49\xe3\xac\x0f\xd8\x58\xb3\xee\xcc\x4e\x4a\xcd\x85\x7d\x63\x83\xda\xdb\x06\x71\x96\xe5\x59\x96\x93\x35\xc1\x2b\x0a\x6d\x7e\x1b\xcb\xa8\xa2\x38\xba\xcc\x78\xfc\x50\x8d\xd3\xbc\x59\x17\xbf\xd0\x53\xa0\xe7\xa2\x3c\x47\xb1\x97\x16\x2d\x79\x71\x01\xa5\xf5\xde\xbe\xb7\x50\x06\xe3\x10\x05\xb2\x5a\x33\x05\xb1\x26\x72\x5d\x89\xba\x33\x68\x94\x98\x44\x55\x95\xe7\xb6\x9d\x61\xd9\x6f\xfe\x42\xaa\x19\x5e\x9e\x4c\xf8\xff\x2f\xc5\x21\x02\x00\xcd\x01\x8a\xc8\x76\x26\x60\x8e\x1d\x87\x65\x7f\x18\xe0\x34\x1a\x63\xd3\x33\xcf\x5c\x63\x3e\x60\xe7\xfb\xd3\xca\x76\x1c\x56\xca\xa9\x52\xb4\x84\xcf\xe4\xaa\xcb\x6a\x24\xb7\x5d\xa9\x85\xb6\x2a\xec\xd3\x89\xeb\x5b\xdd\xfd\x39\xfc\x90\x77\x0b\x1e\xef\x93\x89\x5b\x2c\xe0\x94\x11\x4a\xe2\x95\xed\x74\x05\x63\x07\x41\xa0\xf1\x1b\xbd\x23\x77\xa6\xaf\x1a\xc4\x97\x5e\x79\x8e\x87\x1e\x51\xf0\x5c\xb3\x67\x43\x8c\x60\xa1\xd0\x3a\x26\xa9\x85\xce\xa6\xc5\x20\xec\xf9\xda\xf4\x60\xe5\x15\xf3\xef\x66\x2e\x75\x36\xeb\x22\x39\xe9\x96\x2a\x8d\x8e\xd1\x57\x00\x00\x00\xff\xff\x42\x5e\x85\x9f\x45\x02\x00\x00"

func scriptsBorrow_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBorrow_nftCdc,
		"scripts/borrow_nft.cdc",
	)
}

func scriptsBorrow_nftCdc() (*asset, error) {
	bytes, err := scriptsBorrow_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/borrow_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0x35, 0x85, 0x35, 0xa5, 0x35, 0x7c, 0x4e, 0xec, 0x2f, 0xd1, 0x85, 0x20, 0x1, 0xe5, 0x41, 0x36, 0x46, 0x72, 0xa9, 0x90, 0x9b, 0x8e, 0xae, 0x8b, 0x7, 0x11, 0x8c, 0xbe, 0x9f, 0xe5, 0xe6}}
	return a, nil
}

var _scriptsGet_collection_lengthCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfa\x8a\xc5\x87\x62\x5f\xe4\x7b\x68\x1a\x82\xdb\x40\x2e\x21\x94\xfc\x80\x2c\xcb\x8e\xa8\xbc\x2b\xe4\x15\x6d\x09\xf9\xf7\x12\xab\xb1\xd3\x94\xe8\x20\x24\x76\xde\xb0\x33\xb6\xf7\x14\x18\x76\x84\x9b\x88\x9d\xad\x9d\x39\xd0\x87\x41\x68\x03\xf5\x90\x49\x59\x4a\x59\x6a\x42\x0e\x4a\xf3\x50\xde\xcb\xa4\x6e\x74\x26\x7e\x3d\xde\xbe\x54\xef\x9d\xd9\x6d\x0e\x0f\xe8\x59\x90\x38\xe1\x63\x0d\x6d\x44\xe8\x95\xc5\x5c\x35\x4d\x30\xc3\xb0\x80\x75\x7a\x14\x0b\xd8\x22\xc3\x49\x00\x00\x38\xc3\xa0\xb4\xa6\x88\x0c\x4b\xe8\x0c\xaf\xd3\xe7\x4a\x15\x62\x92\x69\x72\xce\x68\xb6\x84\xef\xa6\x85\xe5\x15\x1b\xe7\x97\x23\x3b\xc3\x95\xf2\xaa\xb6\xce\xf2\x77\x7e\xb3\x54\x35\x91\xfb\x58\x3b\xab\xf7\x8a\x8f\xc5\xcc\xd5\x14\x02\x7d\x3e\x3f\x9d\xfe\xb5\x70\x0f\x9e\x5f\xf2\x99\x5b\xad\xc0\x2b\xb4\x3a\xcf\x2a\x8a\xae\x01\x24\x86\x64\x05\x7a\x5a\x23\x35\xe6\x47\xfa\x26\x41\x96\x6c\xc6\x2b\x18\x8e\x01\xff\xc6\xbb\x64\xd9\xbe\x0e\x79\x21\x9d\xc1\x8e\x8f\xe2\x2c\x7e\x02\x00\x00\xff\xff\xaa\x92\x4e\x73\xd1\x01\x00\x00"

func scriptsGet_collection_lengthCdcBytes() ([]byte, error) {
	return bindataRead(
		_scriptsGet_collection_lengthCdc,
		"scripts/get_collection_length.cdc",
	)
}

func scriptsGet_collection_lengthCdc() (*asset, error) {
	bytes, err := scriptsGet_collection_lengthCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/get_collection_length.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc0, 0x89, 0xcd, 0xef, 0x5d, 0x12, 0xb7, 0x51, 0x37, 0xc7, 0x80, 0x78, 0xf2, 0x33, 0x27, 0xa0, 0x48, 0xa5, 0xb7, 0x52, 0x63, 0x43, 0xcd, 0x14, 0xbe, 0x1b, 0x93, 0xd9, 0x22, 0x5f, 0x57, 0x8f}}
	return a, nil
}

var _scriptsGet_nft_metadataCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x30\x39\x0c\x36\x30\x38\x97\x61\x87\xa0\x69\x51\x74\x1f\xd8\x61\x43\xd1\x75\xbd\x0c\x3b\x28\x32\x9d\x10\xb0\x25\x43\xa2\x9b\x06\x45\xfe\xfb\x20\x59\xb1\xe4\xd6\x05\x9a\x4b\x64\x91\x8f\x7c\x8f\xa4\x48\x6d\xa7\x0d\xc3\xd7\x27\xd1\x76\x0d\xfe\xfa\x76\x0f\xb5\xd1\x2d\x2c\xcb\x72\x55\x96\x2b\xa9\x15\x1b\x21\xd9\xae\xa2\x43\x29\x2b\xb9\xcc\x02\xee\x27\xb2\xa8\x04\x8b\x07\xc2\x83\x7d\x03\x3a\xf1\x19\xd0\x59\xd7\x6f\xc1\xb2\xe9\x25\x83\xcb\xf9\x9c\x01\x00\xb8\xcb\x06\x19\x94\x68\x71\x0d\xbf\xd9\x90\xda\x4d\x0c\x15\x5a\x69\xa8\x63\xd2\x6a\xd6\xce\xfb\xbe\xdd\x2a\x41\xcd\xac\x55\x1f\x14\x9a\x35\x5c\x57\x95\x41\x6b\xa7\xc0\x63\x37\x9f\xd1\xe8\xa3\x68\x98\xd0\xae\xe1\xef\x54\xc7\x9d\xb7\x1c\xff\x65\xde\x9f\x14\x71\xee\x4f\xee\x97\x0a\xf8\x38\xde\xce\xb0\x8f\xc6\x57\xd4\xa3\x69\xca\x3b\xde\xab\x9a\xef\x13\xde\xd1\xf0\x0e\xd2\xce\xad\x08\x65\x77\x3f\x8b\x4d\x5d\x3a\xda\xb0\xf1\xec\xa7\x86\x84\x39\x6c\x52\x1d\x53\xb7\x51\x03\x6c\xa2\x9e\xa9\x8b\xd7\x02\x9b\x41\xd3\x0b\xf4\xb1\xf3\xd9\x07\x55\x53\xdb\xa8\x08\x36\x51\x9d\x77\x39\x65\xa7\x61\x9a\xea\x5e\x41\x2b\x48\xe5\x62\xa8\x53\x2c\x18\x50\xb5\x86\x3f\x3f\x14\x7f\xfe\x54\xac\x93\x71\x73\xfd\x15\x52\xea\x5e\x31\x6c\x60\x87\x7c\x3d\x7c\x9c\x23\x14\xd9\xe8\x26\x75\xd3\xa0\x0c\xfa\x03\x66\x64\x58\xee\x90\x6f\x44\x27\xb6\xd4\x10\x1f\xf3\xe4\xa5\xdc\x8c\xb0\xdb\x7e\xdb\x90\xbc\x15\xbc\x2f\x22\x6e\xab\x8d\xd1\x87\x8b\x0f\xcf\x09\x24\x1e\x5f\x82\x4f\x97\x79\xc4\x5e\x5d\x41\x27\x14\xc9\x7c\x79\xa3\xfb\xa6\x02\xa5\x19\x86\x70\x20\xc0\x60\x8d\x06\x95\x44\x60\x0d\xbc\xc7\x84\xfe\x32\x11\xa5\x6a\xa7\x3b\xda\x02\x9f\xc8\x20\x77\x85\xa3\xaa\x58\x0c\x98\xd5\x0a\xbe\xfb\x47\x86\xb0\x15\x96\x24\x54\x64\xbb\x46\x1c\x81\x54\xad\x4d\x2b\x7c\x79\x6a\x6d\x80\xf7\x64\x5d\x9d\xc7\x4c\x8f\x84\x87\xa1\xb5\xa5\x41\xab\x9b\x47\x74\xe3\x98\xbb\x3e\x5f\x4c\x07\xf4\xcb\x10\xf2\x32\x2f\x66\xb2\x0e\x9d\x9f\xcb\x87\xb0\xa3\x47\x54\x93\xa4\xf8\xd4\xa1\x64\xac\xc2\xcc\x3f\xbc\x9b\xc3\xdd\x79\xc0\x12\x16\x71\x17\x9c\x03\xcd\x85\x17\x76\x01\x6f\xc4\x8a\x61\xce\x55\xdb\x0c\x65\x79\x8d\x09\x35\xf0\x80\x11\x35\x5d\x02\x41\x88\xbf\x5c\x94\x61\x5e\x17\x69\x67\xef\xc7\xd7\xe4\xc6\xd3\x7d\xe5\xa1\xf5\x06\xb9\x37\xbe\x54\x2f\x17\x56\x60\xe6\xf7\xc0\x1b\x6b\xeb\xec\x92\x5c\xce\xee\xb0\xb3\xdf\x78\x55\xf6\x86\xf2\xe2\xd5\x52\xf3\x7f\x33\x2b\x2d\x1c\x4a\xaa\x50\x31\xd5\x94\x3a\x25\xeb\x2d\x69\x89\x93\x39\x56\x3b\xbc\x94\x22\x3b\x65\xff\x03\x00\x00\xff\xff\xce\x9b\xac\x67\xe1\x06\x00\x00"

func scriptsGet_nft_metadataCdcBytes() ([]byte, error) {
	return bindataRead(
		_scriptsGet_nft_metadataCdc,
		"scripts/get_nft_metadata.cdc",
	)
}

func scriptsGet_nft_metadataCdc() (*asset, error) {
	bytes, err := scriptsGet_nft_metadataCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/get_nft_metadata.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbd, 0x30, 0x36, 0xda, 0x3, 0x24, 0x2, 0xdc, 0x6a, 0xb7, 0xc4, 0xfb, 0xd6, 0xb8, 0xb2, 0x3b, 0x36, 0xe2, 0xc4, 0xe, 0x92, 0x78, 0xd7, 0xa5, 0xf3, 0x17, 0x91, 0xeb, 0x13, 0xd, 0xd5, 0x62}}
	return a, nil
}

var _scriptsGet_total_supplyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x31\x0a\x42\x31\x0c\x06\xe0\x3d\xa7\xf8\x79\x93\x2e\xe9\x22\x0e\xee\x0a\x2e\x2e\xea\x01\x6a\x7d\x0f\x0a\x6d\x1a\x62\x02\x8a\x78\x77\x47\xdd\x3f\xbe\xda\x75\x98\x63\xff\xcc\x5d\xdb\x7c\x3a\x5c\xb0\xd8\xe8\x98\x98\x13\x73\x2a\x43\xdc\x72\xf1\x47\xfa\x01\x2e\xf7\x32\x11\x69\xdc\xb0\x84\xa0\xe7\x2a\xab\xf5\x0e\xd7\xa3\xf8\x76\x83\x37\x01\x80\xcd\x1e\x26\x7f\x2b\xfb\xf0\xdc\xce\xa1\xda\x5e\xf4\xa1\x6f\x00\x00\x00\xff\xff\xab\xdd\xb2\x0f\x76\x00\x00\x00"

func scriptsGet_total_supplyCdcBytes() ([]byte, error) {
	return bindataRead(
		_scriptsGet_total_supplyCdc,
		"scripts/get_total_supply.cdc",
	)
}

func scriptsGet_total_supplyCdc() (*asset, error) {
	bytes, err := scriptsGet_total_supplyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/get_total_supply.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0x9, 0x60, 0xa2, 0xa5, 0x58, 0x7b, 0xb8, 0xa2, 0x87, 0x3a, 0x50, 0x8b, 0x97, 0x82, 0xd3, 0xf7, 0x78, 0xfa, 0x17, 0x8a, 0xda, 0xc8, 0x54, 0x76, 0x3b, 0xe3, 0x9c, 0x92, 0x0, 0x29, 0x87}}
	return a, nil
}

var _setup_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcd\x6e\xda\x40\x10\xbe\xfb\x29\xbe\xe6\x10\x19\x89\xe0\x7b\x44\x23\x45\x51\x38\xa2\xa8\xe5\x05\x86\x65\x8c\x57\x59\x76\xad\xd9\x71\x28\x42\xbc\x7b\xb5\x36\xb5\x0d\xb5\xd4\xee\xc9\x9a\xfd\x7e\x67\x6d\x0f\x75\x10\xc5\x3a\xf8\x55\xe3\xf7\x76\xeb\x78\x13\x3e\xd9\xa3\x94\x70\xc0\xc3\x62\x51\x98\xe0\x55\xc8\x68\x2c\xee\x31\x0b\xb3\x33\x0f\xd9\x55\xe0\xfd\x17\x1d\x6a\xc7\xeb\xd5\x66\x8a\x3a\xdc\x76\xa4\xac\x28\xb0\xa9\x6c\x84\x0a\xf9\x48\x46\x6d\xf0\xb0\x11\xc7\x8a\x14\xe4\x41\xc6\x84\xc6\x2b\x8e\xa1\x71\x3b\x48\xe3\x13\x41\x03\x22\x2b\xac\x46\x76\x25\x9a\x3a\x0d\x84\x0d\xdb\x2f\xc6\x7a\xb5\x89\x59\x36\x56\x3b\x67\x19\x00\xd4\xc2\x35\x09\xe7\xd1\xee\x3d\xcb\x33\x5e\x1b\xad\x5e\x3b\xf5\x19\xce\x2d\x24\x9d\xa2\xc0\x0f\xd6\x46\x3c\x98\xc4\x9d\x60\x4b\x68\xc5\x7d\x0e\x72\xc2\xb4\x3b\xa1\xa2\x08\x82\x09\xce\x71\xeb\xd2\xf3\x6d\x89\xce\x61\xb1\x0d\x22\xe1\xb8\x7c\x1c\x55\x7e\xeb\xf1\x2f\x79\x5a\xce\x33\x26\x2f\x7f\x6a\x10\xda\xf3\x07\x69\x35\xc3\xb7\xef\xf0\xd6\x8d\x12\xa6\x23\x6d\xc4\x7e\x74\xc9\xc6\xf9\xdf\x84\x49\x19\x04\xcf\x47\xf0\xa1\xd6\xd3\x54\x50\xc7\x3a\x1a\x63\xf9\x34\xce\x62\x5a\x89\xf7\xc4\x1d\x62\xe5\xb3\x1b\x9b\x48\x5f\x0c\xab\x69\xf9\xa3\x0d\xf5\x88\xeb\x16\x12\x2a\x5f\x3e\x0d\x4e\x73\x68\xf8\x8f\xde\x37\x56\xe6\x4f\xa3\xba\xd9\x3a\x6b\x60\xa8\xa6\xad\x75\x56\x4f\x28\x83\xb4\xf6\x13\x0d\xaf\x09\x9c\xf5\x9f\xcb\xc7\xf3\x5f\x3f\xed\xe0\xfb\xd1\xaa\xce\xc7\xa1\x86\xcf\x7b\xd8\xe5\x25\xbf\x79\x8a\xc9\x26\x1d\x34\x15\x99\xdf\x80\x95\x64\xcf\xfa\xef\xfa\x3d\x69\x96\x75\xef\x7b\xc9\x7e\x07\x00\x00\xff\xff\x73\xab\x6a\xaa\xa0\x03\x00\x00"

func setup_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_setup_accountCdc,
		"setup_account.cdc",
	)
}

func setup_accountCdc() (*asset, error) {
	bytes, err := setup_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "setup_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0xd4, 0x97, 0x91, 0xe4, 0x73, 0xc5, 0x59, 0x21, 0xf4, 0x4e, 0x1d, 0xff, 0xc3, 0x43, 0xef, 0x32, 0xd2, 0x85, 0x28, 0xe3, 0x57, 0x89, 0x3e, 0x83, 0x20, 0x7, 0x87, 0x51, 0x45, 0x7c, 0x74}}
	return a, nil
}

var _setup_account_to_receive_royaltyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6f\xdb\x30\x0c\x85\xef\xfe\x15\x44\x0f\x5b\x02\x04\xf6\xce\xc1\x5a\x20\x5d\xd3\x61\xd8\xd6\x15\x49\xd6\x3b\x23\xd3\xb6\x50\x45\x12\x28\x2a\x8d\x11\xe4\xbf\x0f\x72\x1c\x37\x1e\xaa\x9b\x48\x3e\x82\xdf\x7b\x59\x51\xc0\xa6\xd1\x01\x84\xd1\x06\x54\xa2\x9d\x05\x1d\x00\x41\x68\xe7\x0d\x0a\x41\xe5\x38\x7d\xdf\xfb\x49\x23\x0e\xb0\x2c\x01\xe1\x05\xa3\x11\x60\x0a\x2e\xb2\xa2\x54\x97\x86\x34\x03\x2a\xe5\xa2\x95\x34\x1b\x52\x0d\x25\x35\x5a\x50\x68\x21\x06\x4a\x1f\xa0\x03\xee\xbc\xa1\x8d\x7b\x25\x9b\x65\x7a\xe7\x1d\x0b\x3c\x46\x5b\xeb\x6d\x5f\x85\x8a\xdd\x0e\xbe\x1c\x1e\xff\x3e\x7d\xff\x71\xff\x6b\xb9\xf9\xf3\x73\xf9\xb4\x78\x78\x58\x2d\xd7\xeb\x8b\xe0\x37\x09\x96\x28\xf8\xa2\xe9\x2d\x9c\x05\x37\x79\x5e\xe4\x79\xa1\x9c\x15\x46\x25\xa1\x18\xcd\xe4\xaa\x54\x37\x59\x76\x4d\x7c\xcc\x32\x00\x00\xcf\xe4\x91\x69\x12\x74\x6d\x89\xe7\xb0\x88\xd2\x2c\xce\x20\x33\xd8\x27\xd2\x67\x94\x66\x0e\x6b\x71\x8c\x35\xa5\xcf\xf4\xa2\x4d\xaf\x28\x60\x45\x12\xd9\x02\x21\x9b\x16\x74\xd5\x71\xf6\x5e\x40\xe9\x28\xd8\xcf\x02\x0d\xee\x09\xf0\x3f\xd2\xce\xc8\x61\x93\xae\xe0\x7c\x44\xbe\x75\xcc\xee\xed\xeb\xa7\xd1\x74\xde\x4d\xdf\x4d\x12\xed\xfc\xfd\xb2\x29\xdc\xde\x82\xd5\x06\x8e\xc3\xa2\xf4\xb8\xbb\x69\x28\x9d\x46\x07\x7f\x63\x4a\x29\x23\xf8\xb8\x35\x5a\x81\x42\x8f\x5b\x6d\xb4\xb4\x7d\x98\x7d\xc4\x5d\x84\xce\x9a\x16\xe8\xe0\x5d\xa0\x70\xbd\x24\x8d\x95\xe4\x5d\xd0\x02\x55\xb4\x67\x53\xa5\x61\x17\xeb\xa6\x6b\xae\x48\x91\xde\x13\x83\xb6\x42\x5c\xa1\xa2\x41\xde\x73\x1a\x6d\x5f\x3f\xa4\x3c\x8e\x6b\x97\x4d\xb3\xb1\x7f\xf9\x3d\x1a\xb4\x8a\x4e\x77\x93\x11\xfb\x38\xf9\x9a\x64\xe5\x5a\x34\xd2\x5e\xd6\x3c\x77\xd4\xc9\xbc\xc9\x74\x36\x52\x0a\x72\x4d\x72\xe5\xee\xd0\x9d\x66\x67\x1b\x4f\xff\x02\x00\x00\xff\xff\xe6\xbf\x5d\x5d\x3e\x03\x00\x00"

func setup_account_to_receive_royaltyCdcBytes() ([]byte, error) {
	return bindataRead(
		_setup_account_to_receive_royaltyCdc,
		"setup_account_to_receive_royalty.cdc",
	)
}

func setup_account_to_receive_royaltyCdc() (*asset, error) {
	bytes, err := setup_account_to_receive_royaltyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "setup_account_to_receive_royalty.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe9, 0xf0, 0x64, 0x1c, 0xd9, 0xa2, 0x13, 0xf7, 0x3, 0x24, 0x53, 0xcc, 0x5, 0xaf, 0x70, 0x59, 0x78, 0x5b, 0x76, 0x1f, 0xa7, 0x91, 0x69, 0x67, 0x37, 0x37, 0xd5, 0x7e, 0x44, 0x8d, 0x35, 0x40}}
	return a, nil
}

var _transfer_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\x9b\x40\x10\x86\xef\x3c\xc5\xc8\x87\x16\x4b\x0d\x5c\xaa\x1e\x90\x93\xc8\x72\x1a\x29\x97\x28\x6a\xdd\x07\x58\x96\x01\xb6\xc5\x33\x68\x76\xa8\x5b\x45\x7e\xf7\x0a\x83\xc1\xc4\xc4\x97\x72\x42\x30\xff\xff\xcf\x7c\xbb\xe3\x76\x35\x8b\xc2\x33\xd3\x63\x43\x85\x4b\x2b\xdc\xf2\x2f\x24\xc8\x85\x77\xb0\x88\xa2\xd8\x32\xa9\x18\xab\x3e\x7e\x5b\x13\xd9\xcc\x2e\x82\xde\xe0\xeb\x1f\xb3\xab\x2b\x7c\x7e\xdc\xce\x49\xc7\xbf\x9d\x28\x88\x63\xd8\x96\xce\x83\x8a\x21\x6f\xac\x3a\x26\x70\x1e\x72\x96\xee\x53\x8e\x22\x8e\x0a\x30\x94\xc1\xc9\xb3\x15\x31\x21\x18\x6b\xb9\x21\x05\x65\x30\xc4\x5a\xa2\x04\xc1\x99\x4f\x28\x68\x5d\xed\x90\x34\x81\x75\x96\x09\x7a\xff\x09\xf6\x4e\xcb\x4c\xcc\xfe\xe9\x21\x81\x1f\x4f\xa4\x5f\x3e\x2f\xe1\x35\x08\x00\x00\x6a\xc1\xda\x08\x86\xde\x15\x84\x92\xc0\xba\xd1\x72\xdd\x45\xb4\x35\xd0\x3f\x71\x0c\x05\x2a\x68\x89\x30\x04\x78\xa8\x9b\xb4\x72\x76\x68\x89\xd3\x9f\x68\x75\xd0\x54\xa8\x63\x31\xdc\xb6\x06\xbd\xf3\xd8\xe4\x32\x38\x8f\x48\x59\x84\xf7\x60\x40\x30\x47\x41\xb2\xd8\x8e\xd9\x86\x76\xed\x7d\xf4\x47\x1c\x96\xab\x0a\x8f\xd3\x4e\xb2\xc6\xcf\xdf\x30\x87\xdb\x5e\x33\x94\xb4\x4f\xd4\x25\xac\x3e\x9c\x1d\xc9\x66\x90\xdd\x85\x2d\xe8\x04\x66\x7f\x7e\x57\x16\x53\xe0\x8b\xd1\x72\x39\xf1\xbc\xbf\x87\xda\x90\xb3\xe1\x62\xc3\x4d\x95\x01\xb1\x5e\x19\x84\xf7\xdd\x1c\x63\xb3\x8b\x77\x18\xf4\x70\x2f\x1c\x04\x2d\xba\xdf\x28\xfe\x3d\x0e\x19\xd6\xec\x9d\x76\x10\x06\xd2\x53\x0e\x05\xea\xc6\xd4\x26\x75\x95\xd3\xbf\xe1\xec\xc0\x2f\xc7\xfc\xcb\x79\x07\x86\xaf\x17\x2b\xf1\x56\x7c\xb8\x0b\xff\x87\xd5\x69\xd2\x6b\xb8\x4e\x57\xfb\x28\x18\xf6\x6f\x9e\xf4\x84\x12\xe5\x0a\xab\x9b\xe9\xa5\x89\x4e\x6e\xe1\xf9\xc6\x8c\xef\xd3\xe8\x87\x8e\xf3\x90\xec\x68\xba\x1f\xf3\xd9\xe3\xe9\x44\xfd\x6b\xa8\x2d\xbc\x04\x56\x37\x94\x6b\xc7\xeb\x10\x1c\xfe\x05\x00\x00\xff\xff\xe4\xc8\xf9\xb9\x9b\x04\x00\x00"

func transfer_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_transfer_nftCdc,
		"transfer_nft.cdc",
	)
}

func transfer_nftCdc() (*asset, error) {
	bytes, err := transfer_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "transfer_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x83, 0xaa, 0xe1, 0x14, 0x3d, 0xe6, 0x1f, 0xed, 0xd7, 0x9b, 0xa1, 0x31, 0xc3, 0xc6, 0x3a, 0xac, 0x67, 0x61, 0xc5, 0xdc, 0x5a, 0xf7, 0x8c, 0x67, 0x8d, 0x26, 0xc0, 0x51, 0x22, 0x8c, 0xb1, 0xf4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"destroy_nft.cdc":                      destroy_nftCdc,
	"mint_nft.cdc":                         mint_nftCdc,
	"scripts/borrow_nft.cdc":               scriptsBorrow_nftCdc,
	"scripts/get_collection_length.cdc":    scriptsGet_collection_lengthCdc,
	"scripts/get_nft_metadata.cdc":         scriptsGet_nft_metadataCdc,
	"scripts/get_total_supply.cdc":         scriptsGet_total_supplyCdc,
	"setup_account.cdc":                    setup_accountCdc,
	"setup_account_to_receive_royalty.cdc": setup_account_to_receive_royaltyCdc,
	"transfer_nft.cdc":                     transfer_nftCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"destroy_nft.cdc": {destroy_nftCdc, map[string]*bintree{}},
	"mint_nft.cdc": {mint_nftCdc, map[string]*bintree{}},
	"scripts": {nil, map[string]*bintree{
		"borrow_nft.cdc": {scriptsBorrow_nftCdc, map[string]*bintree{}},
		"get_collection_length.cdc": {scriptsGet_collection_lengthCdc, map[string]*bintree{}},
		"get_nft_metadata.cdc": {scriptsGet_nft_metadataCdc, map[string]*bintree{}},
		"get_total_supply.cdc": {scriptsGet_total_supplyCdc, map[string]*bintree{}},
	}},
	"setup_account.cdc": {setup_accountCdc, map[string]*bintree{}},
	"setup_account_to_receive_royalty.cdc": {setup_account_to_receive_royaltyCdc, map[string]*bintree{}},
	"transfer_nft.cdc": {transfer_nftCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
